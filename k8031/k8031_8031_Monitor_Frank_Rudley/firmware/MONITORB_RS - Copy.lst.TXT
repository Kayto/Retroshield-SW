                   ; MONITORA.ASM - Rev A Started 01/02/94
                   ; MONITORB.ASM - Rev B Started 01/31/21 - Same as MONITORA
                   ; ** MONITORB_RS.ASM - Rev B modified for Retroshield 25/12/
                   ; ** converted to asm31-sdcc231-pj3 asm 
                   ;
                   ; ** Original Comments
                   ; 8031 System #6
                   ;
                   ; This program helps to develop a Monitor for the 8031 syste
                   ; Runs at 9600 Baud
                   ;
                   ; Allows the reading and writing to internal RAM. (R and W f
                   ; Allows you to read and write to ROM stuff. (O and M functi
                   ; It also displays SFRs. (S funtion)
                   ; It writes 256 byte blocks of ROM. (B Function)
                   ; It write all internal Ram (D Function)
                   ; Allow Upload of HEX file for Monitor Program Devel (H Func
                   ; Do Checksum between load memory and HEX file (C Function)
                   ; Do a Jump to 0800h to run other programs. (J Function)
                   ; Allow Upload of HEX File for Running at 0800h Memory (E Fu
                   ; Do Checksum between load memory and HEX file at 0800 Mem (
                   ;
                   ; Give a list of functions (Menu) (N Function)
                   ;
                   ; ** MONITORB_RS.ASM Comments
                   ; UART timings changed
                   ; ASM includes appended
                   ; RAM ammended to 2000
                   ;
0000:              .equ    BITRATE, 0xFF   ; For 57600 @ 11.0592MHz
0000:              .equ    ESC, 0x1B
0000:              .equ    CKSUM, 0x10
0000:              .equ    NEWPROG, 0x2000
0000:              .equ    LF, 10
0000:              .equ    CR, 13
                   ;
                   ;
                   ;$MOD51
                   ;$TITLE(MONITORB.ASM)
                   ;$DATE(JAN-31-21)
                   ;$PAGEWIDTH(132)
                   ;$OBJECT(MONITORB.HEX)
                   ;
                   ; Setup Serial Stuff
                   ;
0000: 75 87 80             mov     pcon, #0x80     ; Configure UART, fast baud
0003: 75 89 21             MOV    TMOD, #0x21 ; T1 Mode Auto Reload Mode
0006: 75 8D FF             MOV    TH1, #BITRATE
0009: 75 8B FF             MOV    TL1, #BITRATE
                   ;
                   ; Serial in Mode 1, Enable Serial reception, Set TI
                   ;
000C: 75 98 52             MOV    SCON, #0x52
000F: D2 8E                SETB   TR1  ; Start Timer for Serial Port
                   ;
0011: 12 07 7F     MENU:   LCALL  WT_STRING
0014: 0A 0D                .db     LF,CR
0016: 38 30 33 31 
      20 4D 4F 4E 
      49 54 4F 52 
      20 52 65 76 
      20 42 20 62 
      79 20 46 72 
      61 6E 6B 20 
      52 75 64 6C 
      65 79 0A 0D 
                           .db     "8031 MONITOR Rev B by Frank Rudley",LF,CR
003A: 0A 0A 0A 0A 
                           .db     LF,LF,LF,LF
003E: 1B                   .db     ESC
                   ;
003F: 12 07 7F     GETSEL: LCALL  WT_STRING
0042: 0A 38 30 33 
      31 3E                .db     LF,"8031>"     ; Prompt
0048: 1B                   .db     ESC
                   ;
0049: 12 07 95             LCALL  RD_CHAR
                   ;
004C: 54 5F                ANL    A,#0x5F      ; Upcase, Stip Parity
                   ;
004E: B4 52 02     R_TEST: CJNE   A,#'R',W_TEST; If Not R, Then Repeat Menu
0051: 01 9E                AJMP   R_RUN        ; R, So Run Read Internal RAM
                   ;
0053: B4 57 02     W_TEST: CJNE   A,#'W',O_TEST; If Not W, Then Repeat Menu
0056: 01 B5                AJMP   W_RUN        ; W, So Run Write Internal RAM
                   ;
0058: B4 4F 02     O_TEST: CJNE   A,#'O',M_TEST; If Not O, Then Repeat Menu
005B: 01 CC                AJMP   O_RUN        ; O, So Run Read ROM
                   ;
005D: B4 4D 02     M_TEST: CJNE   A,#'M',S_TEST; If Not M, Then Repeat Menu
0060: 01 E9                AJMP   M_RUN        ; M, So Run Write ROM
                   ;
0062: B4 53 02     S_TEST: CJNE   A,#'S',B_TEST; If Not S, Then Repeat Menu
0065: 21 07                AJMP   S_RUN        ; S, So Display SFRs
                   ;
0067: B4 42 02     B_TEST: CJNE   A,#'B',D_TEST; If Not B, Then Repeat Menu
006A: 21 F6                AJMP   B_RUN        ; B, Display 256 byte Block of R
                   ;
006C: B4 44 02     D_TEST: CJNE   A,#'D',H_TEST; If Not D, Then Repeat Menu
006F: 41 89                AJMP   D_RUN        ; D, Display 128 byte Block of i
                   ;
0071: B4 48 02     H_TEST: CJNE   A,#'H',C_TEST; If Not H, Then Repeat Menu
0074: 61 0B                AJMP   H_RUN        ; H, Allow Upload of Hex File
                   ;
0076: B4 43 02     C_TEST: CJNE   A,#'C',J_TEST; If Not C, Then Repeat Menu
0079: 61 5E                AJMP   C_RUN        ; C, Then DO Checksum Verify
                   ;
007B: B4 4A 02     J_TEST: CJNE   A,#'J',E_TEST; If Not J, Then Repeat Menu
007E: 81 31                AJMP   J_RUN        ; J, Then Jump to New Program at
                   ;
0080: B4 45 02     E_TEST: CJNE   A,#'E',K_TEST; If Not E, Then Repeat Menu
0083: 81 34                AJMP   E_RUN        ; E, Allow Upload of Hex File
                   ;
0085: B4 4B 02     K_TEST: CJNE   A,#'K',N_TEST; If Not K, Then Repeat Menu
0088: 81 86                AJMP   K_RUN        ; K, Then DO Checksum Verify
                   ;
008A: B4 4E 02     N_TEST: CJNE   A,#'N',A_TEST; If Not N, Then Repeat Menu
008D: A1 56                AJMP   N_RUN        ; N, Then List Menu
                   ;
008F: B4 41 02     A_TEST: CJNE   A,#'A',X_TEST; If Not A, Then Repeat Menu
0092: C1 C9                AJMP   A_RUN        ; A, Then Read External RAM
                   ;
0094: B4 58 02     X_TEST: CJNE   A,#'X',J_MENU; If Not X, Then Repeat Menu
0097: C1 E8                AJMP   X_RUN        ; X, Then Dump 256 byte block of
                   ;
0099: F1 D8        J_MENU: ACALL  WAIT         ; Wait then show menu
009B: 02 00 11             LJMP   MENU
                   ;
009E: F1 7F        R_RUN:  ACALL  WT_STRING
00A0: 2D 52 41 4D 
      3E                   .db     "-RAM>"
00A5: 1B                   .db     ESC
00A6: F1 E4                ACALL  READHEX
00A8: F8                   MOV    R0,A
00A9: 74 3A                MOV    A,#':'
00AB: F1 A1                ACALL  WT_CHAR
00AD: E6                   MOV    A,@R0
00AE: F1 F0                ACALL  WRBYTE
00B0: F1 CF                ACALL  LFCR
00B2: 02 00 3F             LJMP   GETSEL
                   ;
00B5: F1 7F        W_RUN:  ACALL  WT_STRING
00B7: 2D 52 41 4D 
      3E                   .db     "-RAM>"
00BC: 1B                   .db     ESC
00BD: F1 E4                ACALL  READHEX
00BF: F8                   MOV    R0,A
00C0: 74 3A                MOV    A,#':'
00C2: F1 A1                ACALL  WT_CHAR
00C4: F1 E4                ACALL  READHEX
00C6: F6                   MOV    @R0,A
00C7: F1 CF                ACALL  LFCR
00C9: 02 00 3F             LJMP   GETSEL
                   ;
00CC: F1 7F        O_RUN:  ACALL  WT_STRING
00CE: 2D 52 4F 4D 
      3E                   .db     "-ROM>"
00D3: 1B                   .db     ESC
00D4: F1 E4                ACALL  READHEX
00D6: F5 83                MOV    DPH,A
00D8: F1 E4                ACALL  READHEX
00DA: F5 82                MOV    DPL,A
00DC: 74 3A                MOV    A,#':'
00DE: F1 A1                ACALL  WT_CHAR
00E0: E4                   CLR    A
00E1: 93                   MOVC   A,@A+DPTR
00E2: F1 F0                ACALL  WRBYTE
00E4: F1 CF                ACALL  LFCR
00E6: 02 00 3F             LJMP   GETSEL
                   ; 
00E9: F1 7F        M_RUN:  ACALL  WT_STRING
00EB: 2D 52 4F 4D 
      3E                   .db     "-ROM>"
00F0: 1B                   .db     ESC
00F1: F1 E4                ACALL  READHEX
00F3: F5 83                MOV    DPH,A
00F5: F1 E4                ACALL  READHEX
00F7: F5 82                MOV    DPL,A
00F9: 74 3A                MOV    A,#':'
00FB: F1 A1                ACALL  WT_CHAR
00FD: F1 E4                ACALL  READHEX
00FF: F0                   MOVX   @DPTR,A
0100: F1 D8                ACALL  WAIT     ; Wait for Burn in Time
0102: F1 CF                ACALL  LFCR
0104: 02 00 3F             LJMP   GETSEL
                   ;
                   ;
                   ; Display P0
                   ;
0107: F1 7F        S_RUN:  ACALL  WT_STRING  ; Display SFR Routine
0109: 53 46 52 73 
      0A 0A 0A 0D 
                           .db     "SFRs",LF,LF,LF,CR
0111: 50 30 20 20 
      20 3D 20             .db     "P0   = "
0118: 1B                   .db     ESC
0119: E5 80                MOV    A,P0
011B: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display P1
                   ;
011D: F1 7F                ACALL  WT_STRING
011F: 20 20 20 20 
      50 31 20 20 
      20 3D 20             .db     "    P1   = "
012A: 1B                   .db     ESC
012B: E5 90                MOV    A,P1
012D: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display P2
                   ;
012F: F1 7F                ACALL  WT_STRING
0131: 20 20 20 20 
      50 32 20 20 
      20 3D 20             .db     "    P2   = "
013C: 1B                   .db     ESC
013D: E5 A0                MOV    A,P2
013F: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display P3
                   ;
0141: F1 7F                ACALL  WT_STRING
0143: 20 20 20 20 
      50 33 20 20 
      20 3D 20             .db     "    P3   = "
014E: 1B                   .db     ESC
014F: E5 B0                MOV    A,P3
0151: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TMOD
                   ;
0153: F1 7F                ACALL  WT_STRING
0155: 0A 0D 54 4D 
      4F 44 20 3D 
      20                   .db     LF,CR,"TMOD = "
015E: 1B                   .db     ESC
015F: E5 89                MOV    A,TMOD
0161: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TCON
                   ;
0163: F1 7F                ACALL  WT_STRING
0165: 20 20 20 20 
      54 43 4F 4E 
      20 3D 20             .db     "    TCON = "
0170: 1B                   .db     ESC
0171: E5 88                MOV    A,TCON
0173: F1 F0                ACALL  WRBYTE
                   ; 
                   ; Display SCON
                   ;
0175: F1 7F                ACALL  WT_STRING
0177: 20 20 20 20 
      53 43 4F 4E 
      20 3D 20             .db     "    SCON = "
0182: 1B                   .db     ESC
0183: E5 98                MOV    A,SCON
0185: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display PSW
                   ;
0187: F1 7F                ACALL  WT_STRING
0189: 20 20 20 20 
      50 53 57 20 
      20 3D 20             .db     "    PSW  = "
0194: 1B                   .db     ESC
0195: E5 D0                MOV    A,PSW
0197: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display PCON
                   ;
0199: F1 7F                ACALL  WT_STRING
019B: 0A 0D 50 43 
      4F 4E 20 3D 
      20                   .db     LF,CR,"PCON = "
01A4: 1B                   .db     ESC
01A5: E5 87                MOV    A,PCON
01A7: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TH0
                   ;
01A9: F1 7F                ACALL  WT_STRING
01AB: 20 20 20 20 
      54 48 30 20 
      20 3D 20             .db     "    TH0  = "
01B6: 1B                   .db     ESC
01B7: E5 8C                MOV    A,TH0
01B9: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TL0
                   ;
01BB: F1 7F                ACALL  WT_STRING
01BD: 20 20 20 20 
      54 4C 30 20 
      20 3D 20             .db     "    TL0  = "
01C8: 1B                   .db     ESC
01C9: E5 8A                MOV    A,TL0
01CB: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TH1
                   ;
01CD: F1 7F                ACALL  WT_STRING
01CF: 20 20 20 20 
      54 48 31 20 
      20 3D 20             .db     "    TH1  = "
01DA: 1B                   .db     ESC
01DB: E5 8D                MOV    A,TH1
01DD: F1 F0                ACALL  WRBYTE
                   ;
                   ; Display TL1
                   ;
01DF: F1 7F                ACALL  WT_STRING
01E1: 20 20 20 20 
      54 4C 31 20 
      20 3D 20             .db     "    TL1  = "
01EC: 1B                   .db     ESC
01ED: E5 8B                MOV    A,TL1
01EF: F1 F0                ACALL  WRBYTE
01F1: F1 CF                ACALL  LFCR
01F3: 02 00 3F             LJMP   GETSEL
                   ;
01F6: F1 7F        B_RUN:  ACALL  WT_STRING
01F8: 2D 41 20 32 
      35 36 20 42 
      79 74 65 20 
      42 6C 6F 63 
      6B 20 6F 66 
      20 52 6F 6D 
      0A 0A 0D             .db     "-A 256 Byte Block of Rom",LF,LF,CR
0213: 42 6C 6F 63 
      6B 3E                .db     "Block>"
0219: 1B                   .db     ESC
021A: F1 E4                ACALL  READHEX
021C: F9                   MOV    R1,A
021D: F1 7F                ACALL  WT_STRING
021F: 0A 0D 20 20 
      20 20 20 20 
      30 30 20 30 
      31 20 30 32 
      20 30 33 20 
      30 34 20 30 
      35 20 30 36 
      20 30 37 20 
      30 38 20 30 
      39 20 30 41 
      20 30 42 20 
      30 43 20 30 
      44 20 30 45 
      20 30 46 0A 
      0A 0D                .db     LF,CR,"      00 01 02 03 04 05 06 07 08 09 0
0259: 1B                   .db     ESC
025A: 89 83                MOV    DPH,R1
025C: 78 00                MOV    R0,#00H
025E: 88 82        B_2:    MOV    DPL,R0
0260: F1 CF                ACALL  LFCR
0262: E5 83                MOV    A,DPH
0264: F1 F0                ACALL  WRBYTE
0266: E5 82                MOV    A,DPL
0268: F1 F0                ACALL  WRBYTE
026A: 74 20                MOV    A,#' '
026C: F1 A1                ACALL  WT_CHAR
026E: F1 A1                ACALL  WT_CHAR
0270: 88 82        B_1:    MOV    DPL,R0   
0272: E4                   CLR    A
0273: 93                   MOVC   A,@A+DPTR
0274: F1 F0                ACALL  WRBYTE
0276: 74 20                MOV    A,#' '
0278: F1 A1                ACALL  WT_CHAR
027A: 08                   INC    R0
027B: E8                   MOV    A,R0
027C: 54 0F                ANL    A,#00FH
027E: B4 00 EF             CJNE   A,#000H,B_1
0281: B8 00 DA             CJNE   R0,#000H,B_2
0284: F1 CF                ACALL  LFCR
0286: 02 00 3F             LJMP   GETSEL
                   ;
0289: F1 7F        D_RUN:  ACALL  WT_STRING
028B: 2D 41 20 31 
      32 38 20 42 
      79 74 65 20 
      42 6C 6F 63 
      6B 20 6F 66 
      20 49 6E 74 
      65 72 6E 61 
      6C 20 52 61 
      6D 0A 0A 0D 
                           .db     "-A 128 Byte Block of Internal Ram",LF,LF,CR
02AF: 0A 0D 20 20 
      20 20 30 30 
      20 30 31 20 
      30 32 20 30 
      33 20 30 34 
      20 30 35 20 
      30 36 20 30 
      37 20 30 38 
      20 30 39 20 
      30 41 20 30 
      42 20 30 43 
      20 30 44 20 
      30 45 20 30 
      46 0A 0A 0D 
                           .db     LF,CR,"    00 01 02 03 04 05 06 07 08 09 0A 
02E7: 1B                   .db     ESC
02E8: 78 00                MOV    R0,#00H
02EA: F1 CF        D_2:    ACALL  LFCR
02EC: E8                   MOV    A,R0
02ED: F1 F0                ACALL  WRBYTE
02EF: 74 20                MOV    A,#' '
02F1: F1 A1                ACALL  WT_CHAR
02F3: F1 A1                ACALL  WT_CHAR
02F5: E6           D_1:    MOV    A,@R0
02F6: F1 F0                ACALL  WRBYTE
02F8: 74 20                MOV    A,#' '
02FA: F1 A1                ACALL  WT_CHAR
02FC: 08                   INC    R0
02FD: E8                   MOV    A,R0
02FE: 54 0F                ANL    A,#00FH
0300: B4 00 F2             CJNE   A,#000H,D_1
0303: B8 80 E4             CJNE   R0,#080H,D_2
0306: F1 CF                ACALL  LFCR
0308: 02 00 3F             LJMP   GETSEL
                   ;  
030B: F1 7F        H_RUN:  ACALL  WT_STRING
030D: 2D 55 70 6C 
      6F 61 64 20 
      48 65 78 20 
      46 69 6C 65 
      0A 0D                .db     "-Upload Hex File",LF,CR
031F: 1B                   .db     ESC
                   ;
0320: F1 95        H_1:    ACALL  RD_CHAR
0322: B4 3A 34             CJNE   A,#':',H_X ; Exit if not a ":"
                   ;
0325: F1 E4                ACALL  READHEX    ; Get Word Count
0327: F9                   MOV    R1,A       ; Load Word Count to R1
                   ;
0328: F1 E4                ACALL  READHEX    ; Read Address and put into Data P
032A: 24 08                ADD    A,#008H    ; Add offset in address
032C: F5 83                MOV    DPH,A      ; Upper Byte
                   ;
032E: F1 E4                ACALL  READHEX    ; Lower Byte
0330: F5 82                MOV    DPL,A
                   ;
0332: F1 E4                ACALL  READHEX    ; Read Record Type
0334: B4 00 0E             CJNE   A,#0,H_Y   ; Done and Exit
                   ;
0337: F1 E4        H_2:    ACALL  READHEX    ; Read Data
0339: F0                   MOVX   @DPTR,A    ; Burn ROM
033A: F1 D8                ACALL  WAIT       ; Wait for Burn Time
033C: A3                   INC    DPTR       ; Increment Data Pointer
033D: D9 F8                DJNZ   R1,H_2     ; Loop Till Out of Words
033F: F1 E4                ACALL  READHEX    ; Read Checksum but don't do anyth
0341: F1 CF                ACALL  LFCR
0343: 80 DB                SJMP   H_1
                   ;
                   ; Done and Exit Read Last Byte
                   ;
0345: F1 E4        H_Y:    ACALL  READHEX
0347: F1 7F                ACALL  WT_STRING
0349: 0A 0D 44 4F 
      4E 45 20 4C 
      4F 41 44 21 
      21 0A 0D             .db     LF,CR,"DONE LOAD!!",LF,CR
0358: 1B                   .db     ESC
0359: F1 CF        H_X:    ACALL  LFCR
035B: 02 00 3F             LJMP   GETSEL
                   ;
035E: F1 7F        C_RUN:  ACALL  WT_STRING
0360: 2D 55 70 6C 
      6F 61 64 20 
      48 65 78 20 
      46 69 6C 65 
      20 46 6F 72 
      20 43 6B 65 
      63 6B 73 75 
      6D 20 43 68 
      65 63 6B 0A 
      0D                   .db     "-Upload Hex File For Ckecksum Check",LF,CR
0385: 1B                   .db     ESC
0386: 7B 00                MOV    R3,#0      ; Initialize to Good Load Use R3 f
                   ;
0388: F1 95        C_1:    ACALL  RD_CHAR
038A: B4 3A 5F             CJNE   A,#':',C_4 ; Exit if not a ":"
038D: 78 00                MOV    R0,#000H   ; Clear Resister for Checksum
                   ;
038F: F1 E4                ACALL  READHEX    ; Get Word Count
0391: F9                   MOV    R1,A       ; Load Word Count to R1
0392: F8                   MOV    R0,A       ; Initial Value for Checksum
                   ;
0393: F1 E4                ACALL  READHEX    ; Read Address and put into Data P
0395: FA                   MOV    R2,A
0396: 28                   ADD    A,R0       ; Add Upper Address Byte to Checks
0397: F8                   MOV    R0,A
0398: EA                   MOV    A,R2
0399: 24 08                ADD    A,#008H    ; Add offset in address
039B: F5 83                MOV    DPH,A      ; Upper Byte
                   ;
039D: F1 E4                ACALL  READHEX    ; Lower Byte
039F: F5 82                MOV    DPL,A
03A1: 28                   ADD    A,R0       ; Add Lower Address Byte to Checks
03A2: F8                   MOV    R0,A
                   ;
03A3: F1 E4                ACALL  READHEX    ; Read Record Type
03A5: B4 00 46             CJNE   A,#0,C_Y   ; Done and Exit
                   ;
03A8: F1 E4        C_2:    ACALL  READHEX    ; Read Data But Don't Do Anything 
03AA: E4                   CLR    A
03AB: 93                   MOVC   A,@A+DPTR  ; Read ROM
03AC: 28                   ADD    A,R0       ; Add for Checksum
03AD: F8                   MOV    R0,A
03AE: A3                   INC    DPTR       ; Increment Data Pointer
03AF: D9 F7                DJNZ   R1,C_2     ; Loop Till Out of Words
                   ;
                   ; Write out if Checksum Good or Bad
                   ;
03B1: 88 10                MOV    CKSUM,R0
03B3: F1 E4                ACALL  READHEX     ; Read Checksum of Line
03B5: F4                   CPL    A           ; Complement Checksum
03B6: 24 01                ADD    A,#1        ; Add 1
03B8: B5 10 18             CJNE   A,CKSUM,C_3 ; Jump if Bad Checksum        
03BB: F1 7F                ACALL  WT_STRING   ; Write Good Checksum
03BD: 0A 0D 20 47 
      6F 6F 64 20 
      43 68 65 63 
      6B 73 75 6D 
      20 0A 0D             .db     LF,CR," Good Checksum ",LF,CR
03D0: 1B                   .db     ESC
03D1: 80 B5                SJMP   C_1
03D3: F1 7F        C_3:    ACALL  WT_STRING   ; Write Bad Checksum
03D5: 0A 0D 20 42 
      61 64 20 43 
      68 65 63 6B 
      73 75 6D 20 
      0A 0D                .db     LF,CR," Bad Checksum ",LF,CR
03E7: 1B                   .db     ESC
03E8: 7B 01                MOV    R3,#       1 ; Set Flag for Bad Load
03EA: 80 9C                SJMP   C_1        ; Loop Back for Next Line
03EC: 80 3E        C_4:    SJMP   C_X
                   ;
                   ; Done and Exit Read Last Byte
                   ;
03EE: F1 E4        C_Y:    ACALL  READHEX
03F0: BB 00 1E             CJNE   R3,#0,C_Z
03F3: F1 7F                ACALL  WT_STRING
03F5: 0A 0D 47 4F 
      4F 44 20 43 
      48 45 43 4B 
      53 55 4D 20 
      44 4F 4E 45 
      21 21 20 0A 
      0D                   .db     LF,CR,"GOOD CHECKSUM DONE!! ",LF,CR
040E: 1B                   .db     ESC
040F: 80 1B                SJMP   C_X
0411: F1 7F        C_Z:    ACALL  WT_STRING
0413: 0A 0D 42 41 
      44 20 43 48 
      45 43 4B 53 
      55 4D 20 44 
      4F 4E 45 21 
      21 20 0A 0D 
                           .db     LF,CR,"BAD CHECKSUM DONE!! ",LF,CR
042B: 1B                   .db     ESC
042C: F1 CF        C_X:    ACALL  LFCR
042E: 02 00 3F             LJMP   GETSEL
                   ;
0431: 02 20 00     J_RUN:  LJMP   NEWPROG
                   ;
0434: F1 7F        E_RUN:  ACALL  WT_STRING
0436: 2D 55 70 6C 
      6F 61 64 20 
      48 65 78 20 
      46 69 6C 65 
      0A 0D                .db     "-Upload Hex File",LF,CR
0448: 1B                   .db     ESC
                   ;
0449: F1 95        E_1:    ACALL  RD_CHAR
044B: B4 3A 33             CJNE   A,#':',E_X ; Exit if not a ":"
                   ;
044E: F1 E4                ACALL  READHEX    ; Get Word Count
0450: F9                   MOV    R1,A       ; Load Word Count to R1
                   ;
0451: F1 E4                ACALL  READHEX    ; Read Address and put into Data P
0453: F5 83                MOV    DPH,A      ; Upper Byte
                   ;
0455: F1 E4                ACALL  READHEX    ; Lower Byte
0457: F5 82                MOV    DPL,A
                   ;
0459: F1 E4                ACALL  READHEX    ; Read Record Type
045B: B4 00 0E             CJNE   A,#0,E_Y   ; Done and Exit
                   ;
045E: F1 E4        E_2:    ACALL  READHEX    ; Read Data
0460: F0                   MOVX   @DPTR,A    ; Burn ROM
0461: F1 D8                ACALL  WAIT       ; Wait for Burn Time
0463: A3                   INC    DPTR       ; Increment Data Pointer
0464: D9 F8                DJNZ   R1,E_2     ; Loop Till Out of Words
0466: F1 E4                ACALL  READHEX    ; Read Checksum but don't do anyth
0468: F1 CF                ACALL  LFCR
046A: 80 DD                SJMP   E_1
                   ;
                   ; Done and Exit Read Last Byte
                   ;
046C: F1 E4        E_Y:    ACALL  READHEX
046E: F1 7F                ACALL  WT_STRING
0470: 0A 0D 44 4F 
      4E 45 20 4C 
      4F 41 44 21 
      21 20 0A 0D 
                           .db     LF,CR,"DONE LOAD!! ",LF,CR
0480: 1B                   .db     ESC
0481: F1 CF        E_X:    ACALL  LFCR
0483: 02 00 3F             LJMP   GETSEL
                   ;
0486: F1 7F        K_RUN:  ACALL  WT_STRING
0488: 2D 55 70 6C 
      6F 61 64 20 
      48 65 78 20 
      46 69 6C 65 
      20 46 6F 72 
      20 43 6B 65 
      63 6B 73 75 
      6D 20 43 68 
      65 63 6B 0A 
      0D                   .db     "-Upload Hex File For Ckecksum Check",LF,CR
04AD: 1B                   .db     ESC
04AE: 7B 00                MOV    R3,#0      ; Initialize to Good Load Use R3 f
                   ;
04B0: F1 95        K_1:    ACALL  RD_CHAR
04B2: B4 3A 5D             CJNE   A,#':',K_4 ; Exit if not a ":"
04B5: 78 00                MOV    R0,#000H   ; Clear Resister for Checksum
                   ;
04B7: F1 E4                ACALL  READHEX    ; Get Word Count
04B9: F9                   MOV    R1,A       ; Load Word Count to R1
04BA: F8                   MOV    R0,A       ; Initial Value for Checksum
                   ;
04BB: F1 E4                ACALL  READHEX    ; Read Address and put into Data P
04BD: FA                   MOV    R2,A
04BE: 28                   ADD    A,R0       ; Add Upper Address Byte to Checks
04BF: F8                   MOV    R0,A
04C0: EA                   MOV    A,R2
04C1: F5 83                MOV    DPH,A      ; Upper Byte
                   ;
04C3: F1 E4                ACALL  READHEX    ; Lower Byte
04C5: F5 82                MOV    DPL,A
04C7: 28                   ADD    A,R0       ; Add Lower Address Byte to Checks
04C8: F8                   MOV    R0,A
                   ;
04C9: F1 E4                ACALL  READHEX    ; Read Record Type
04CB: B4 00 46             CJNE   A,#0,K_Y   ; Done and Exit
                   ;
04CE: F1 E4        K_2:    ACALL  READHEX    ; Read Data But Don't Do Anything 
04D0: E4                   CLR    A
04D1: 93                   MOVC   A,@A+DPTR  ; Read ROM
04D2: 28                   ADD    A,R0       ; Add for Checksum
04D3: F8                   MOV    R0,A
04D4: A3                   INC    DPTR       ; Increment Data Pointer
04D5: D9 F7                DJNZ   R1,K_2     ; Loop Till Out of Words
                   ;
                   ; Write out if Checksum Good or Bad
                   ;
04D7: 88 10                MOV    CKSUM,R0
04D9: F1 E4                ACALL  READHEX     ; Read Checksum of Line
04DB: F4                   CPL    A           ; Complement Checksum
04DC: 24 01                ADD    A,#1        ; Add 1
04DE: B5 10 18             CJNE   A,CKSUM,K_3 ; Jump if Bad Checksum        
04E1: F1 7F                ACALL  WT_STRING   ; Write Good Checksum
04E3: 0A 0D 20 47 
      6F 6F 64 20 
      43 68 65 63 
      6B 73 75 6D 
      20 0A 0D             .db     LF,CR," Good Checksum ",LF,CR
04F6: 1B                   .db     ESC
04F7: 80 B7                SJMP   K_1
04F9: F1 7F        K_3:    ACALL  WT_STRING   ; Write Bad Checksum
04FB: 0A 0D 20 42 
      61 64 20 43 
      68 65 63 6B 
      73 75 6D 20 
      0A 0D                .db     LF,CR," Bad Checksum ",LF,CR
050D: 1B                   .db     ESC
050E: 7B 01                MOV    R3,#       1 ; Set Flag for Bad Load
0510: 80 9E                SJMP   K_1        ; Loop Back for Next Line
0512: 80 3D        K_4:    SJMP   K_X
                   ;
                   ; Done and Exit Read Last Byte
                   ;
0514: F1 E4        K_Y:    ACALL  READHEX
0516: BB 00 1D             CJNE   R3,#0,K_Z
0519: F1 7F                ACALL  WT_STRING
051B: 0A 0D 47 4F 
      4F 44 20 43 
      48 45 43 4B 
      53 55 4D 20 
      44 4F 4E 45 
      21 21 0A 0D 
                           .db     LF,CR,"GOOD CHECKSUM DONE!!",LF,CR
0533: 1B                   .db     ESC
0534: 80 1B                SJMP   K_X
0536: F1 7F        K_Z:    ACALL  WT_STRING
0538: 0A 0D 42 41 
      44 20 43 48 
      45 43 4B 53 
      55 4D 20 44 
      4F 4E 45 21 
      21 20 0A 0D 
                           .db     LF,CR,"BAD CHECKSUM DONE!! ",LF,CR
0550: 1B                   .db     ESC
0551: F1 CF        K_X:    ACALL  LFCR
0553: 02 00 3F             LJMP   GETSEL
                   ;
                   ; List Out The Menu
                   ;
0556: F1 7F        N_RUN:  ACALL  WT_STRING
0558: 0A 0D 52 20 
      3D 20 52 65 
      61 64 20 49 
      6E 74 20 52 
      41 4D 0A 0D 
                           .db     LF,CR,"R = Read Int RAM",LF,CR
056C: 57 20 3D 20 
      57 72 69 74 
      65 20 74 6F 
      20 49 6E 74 
      20 52 41 4D 
      0A 0D                .db           "W = Write to Int RAM",LF,CR
0582: 4F 20 3D 20 
      52 65 61 64 
      20 52 4F 4D 
      0A 0D                .db           "O = Read ROM",LF,CR
0590: 4D 20 3D 20 
      57 72 69 74 
      65 20 52 4F 
      4D 20 61 6E 
      64 20 45 78 
      74 20 52 61 
      6D 0A 0D             .db           "M = Write ROM and Ext Ram",LF,CR
05AB: 53 20 3D 20 
      44 69 73 70 
      6C 61 79 20 
      53 46 52 73 
      0A 0D                .db           "S = Display SFRs",LF,CR
05BD: 42 20 3D 20 
      32 35 36 20 
      62 79 74 65 
      73 20 6F 66 
      20 52 4F 4D 
      0A 0D                .db           "B = 256 bytes of ROM",LF,CR
05D3: 44 20 3D 20 
      31 32 38 20 
      62 79 74 65 
      73 20 6F 66 
      20 49 6E 74 
      20 52 41 4D 
      0A 0D                .db           "D = 128 bytes of Int RAM",LF,CR
05ED: 48 20 3D 20 
      4C 6F 61 64 
      20 48 45 58 
      20 46 69 6C 
      65 20 66 6F 
      72 20 4D 4F 
      4E 49 54 4F 
      52 20 50 72 
      6F 67 73 0A 
      0D                   .db           "H = Load HEX File for MONITOR Progs",
0612: 43 20 3D 20 
      56 65 72 69 
      66 79 20 43 
      68 65 63 6B 
      73 75 6D 73 
      20 4D 4F 4E 
      49 54 4F 52 
      20 50 72 6F 
      67 73 0A 0D 
                           .db           "C = Verify Checksums MONITOR Progs",L
0636: 4A 20 3D 20 
      4A 75 6D 70 
      20 74 6F 20 
      72 75 6E 20 
      50 72 6F 67 
      73 0A 0D             .db           "J = Jump to run Progs",LF,CR
064D: 45 20 3D 20 
      4C 6F 61 64 
      20 48 45 58 
      20 46 69 6C 
      65 20 66 6F 
      72 20 50 72 
      6F 67 73 0A 
      0D                   .db           "E = Load HEX File for Progs",LF,CR
066A: 4B 20 3D 20 
      56 65 72 69 
      66 79 20 43 
      68 65 63 6B 
      73 75 6D 73 
      20 66 6F 72 
      20 50 72 6F 
      67 73 0A 0D 
                           .db           "K = Verify Checksums for Progs",LF,CR
068A: 4E 20 3D 20 
      54 68 69 73 
      20 4D 65 6E 
      75 0A 0D             .db           "N = This Menu",LF,CR
0699: 41 20 3D 20 
      52 65 61 64 
      20 45 78 74 
      20 52 41 4D 
      0A 0D                .db           "A = Read Ext RAM",LF,CR
06AB: 58 20 3D 20 
      32 35 36 20 
      62 79 74 65 
      73 20 6F 66 
      20 45 78 74 
      20 52 41 4D 
      0A 0D                .db           "X = 256 bytes of Ext RAM",LF,CR
06C5: 1B                   .db     ESC
06C6: 02 00 3F             LJMP   GETSEL
                   ;
                   ; Read External Ram Part
                   ;
06C9: F1 7F        A_RUN:  ACALL  WT_STRING
06CB: 2D 45 58 52 
      41 4D 3E             .db     "-EXRAM>"
06D2: 1B                   .db     ESC
06D3: F1 E4                ACALL  READHEX
06D5: F5 83                MOV    DPH,A
06D7: F1 E4                ACALL  READHEX
06D9: F5 82                MOV    DPL,A
06DB: 74 3A                MOV    A,#':'
06DD: F1 A1                ACALL  WT_CHAR
06DF: E4                   CLR    A
06E0: E0                   MOVX   A,@DPTR
06E1: F1 F0                ACALL  WRBYTE
06E3: F1 CF                ACALL  LFCR
06E5: 02 00 3F             LJMP   GETSEL
                   ;
                   ; Dump 256 byte Block of Ext Ram
                   ;
06E8: F1 7F        X_RUN:  ACALL  WT_STRING
06EA: 2D 41 20 32 
      35 36 20 42 
      79 74 65 20 
      42 6C 6F 63 
      6B 20 6F 66 
      20 45 78 74 
      20 52 61 6D 
      0A 0A 0D             .db     "-A 256 Byte Block of Ext Ram",LF,LF,CR
0709: 42 6C 6F 63 
      6B 3E                .db     "Block>"
070F: 1B                   .db     ESC
0710: F1 E4                ACALL  READHEX
0712: F9                   MOV    R1,A
0713: F1 7F                ACALL  WT_STRING
0715: 0A 0D 20 20 
      20 20 20 20 
      30 30 20 30 
      31 20 30 32 
      20 30 33 20 
      30 34 20 30 
      35 20 30 36 
      20 30 37 20 
      30 38 20 30 
      39 20 30 41 
      20 30 42 20 
      30 43 20 30 
      44 20 30 45 
      20 30 46 0A 
      0A 0D                .db     LF,CR,"      00 01 02 03 04 05 06 07 08 09 0
074F: 1B                   .db     ESC
0750: 89 83                MOV    DPH,R1
0752: 78 00                MOV    R0,#00H
0754: 88 82        X_2:    MOV    DPL,R0
0756: F1 CF                ACALL  LFCR
0758: E5 83                MOV    A,DPH
075A: F1 F0                ACALL  WRBYTE
075C: E5 82                MOV    A,DPL
075E: F1 F0                ACALL  WRBYTE
0760: 74 20                MOV    A,#' '
0762: F1 A1                ACALL  WT_CHAR
0764: F1 A1                ACALL  WT_CHAR
0766: 88 82        X_1:    MOV    DPL,R0   
0768: E4                   CLR    A
0769: E0                   MOVX   A,@DPTR
076A: F1 F0                ACALL  WRBYTE
076C: 74 20                MOV    A,#' '
076E: F1 A1                ACALL  WT_CHAR
0770: 08                   INC    R0
0771: E8                   MOV    A,R0
0772: 54 0F                ANL    A,#00FH
0774: B4 00 EF             CJNE   A,#000H,X_1
0777: B8 00 DA             CJNE   R0,#000H,X_2
077A: F1 CF                ACALL  LFCR
077C: 02 00 3F             LJMP   GETSEL
                   ;
                   ; $INCLUDE(WT_STRIN.ASM) $077C
                   ; This Subroutine Writes Out A String Through RS232
                   ;
077F: D0 83        WT_STRING: POP    DPH          ; Load DPTR with First Charac
0781: D0 82                   POP    DPL
0783: E4                      CLR    A            ; Zero Offset
0784: 93                      MOVC   A,@A+DPTR    ; Get First Character in Stri
0785: 30 99 FD     MEN_1:     JNB    TI,MEN_1     ; Wait until transmitter read
0788: C2 99                   CLR    TI           ; Set Not Ready
078A: F5 99                   MOV    SBUF,A       ; Output Character
078C: A3                      INC    DPTR         ; Increment Data Pointer
078D: E4                      CLR    A            ; Zero Offset
078E: 93                      MOVC   A,@A+DPTR    ; Get Next Character
078F: B4 1B F3                CJNE   A,#ESC,MEN_1 ; Loop until read ESC
0792: 74 01                   MOV    A,#1
0794: 73                      JMP    @A+DPTR      ; Return After read ESC
                   
                   ; $INCLUDE(RD_CHAR.ASM) $0792
                   ; This Subroutine Reads a Character and Echos it back.
                   ;
0795: 30 98 FD     RD_CHAR:  JNB    RI,RD_CHAR
0798: C2 98                  CLR    RI
079A: E5 99                  MOV    A,SBUF
079C: 54 7F                  ANL    A,#07FH
079E: F1 A1                  ACALL  WT_CHAR
07A0: 22                     RET
                   ;
                   ; $INCLUDE(WT_CHAR.ASM) $079E
                   ; This Subroutine Writes out a Character
                   ;
07A1: 30 99 FD     WT_CHAR:  JNB    TI,WT_CHAR
07A4: C2 99                  CLR    TI
07A6: F5 99                  MOV    SBUF,A
07A8: 22                     RET
                   ;
                   ; $INCLUDE(ASC2HEX.ASM) $07A6
                   ; This Subroutine converts Hex to ASCII
                   ;
07A9: C2 D7        ASC2HEX: CLR    CY
07AB: 94 30                 SUBB   A,#'0'
07AD: F5 F0                 MOV    B,A
07AF: 94 0A                 SUBB   A,#10
07B1: 20 D7 06              JB     CY,A2LT10
07B4: E5 F0                 MOV    A,B
07B6: 94 07                 SUBB   A,#7
07B8: F5 F0                 MOV    B,A
07BA: E5 F0        A2LT10:  MOV    A,B
07BC: 22                    RET
                   
                   ;$INCLUDE(HEX2ASC.ASM) $07BA
                   ; This Subroutine Converts Hex to ASCII
                   ;
07BD: 54 0F        HEX2ASC:  ANL    A,#00FH
07BF: C2 D7                  CLR    CY
07C1: F5 F0                  MOV    B,A
07C3: 94 0A                  SUBB   A,#10
07C5: E5 F0                  MOV    A,B
07C7: 20 D7 02               JB     CY,H2LT10
07CA: 24 07                  ADD    A,#7
07CC: 24 30        H2LT10:   ADD    A,#'0'
07CE: 22                     RET
                   
                   ;$INCLUDE(LFCR.ASM) $07CC
                   ; This Subroutine Does a Line-Feed Cariage Return
                   ;
07CF: 74 0A        LFCR:   MOV    A,#00AH
07D1: F1 A1                ACALL  WT_CHAR
07D3: 74 0D                MOV    A,#00DH
07D5: F1 A1                ACALL  WT_CHAR
07D7: 22                   RET
                   
                   ;$INCLUDE(WAIT.ASM) $07D5
                   ; This Subroutine Causes a Pause for a Fraction of a Second
                   ;
07D8: 74 0A        WAIT:   MOV    A,#10
07DA: 75 F0 FF     WAIT1:  MOV    B,#0FFH
07DD: D5 F0 FD     WAIT2:  DJNZ   B,WAIT2
07E0: 14                   DEC    A
07E1: 70 F7                JNZ    WAIT1
07E3: 22                   RET
                   
                   ;$INCLUDE(READHEX.ASM) $07E1
                   ; This Subroutine Reads a Hex Byte and Puts it in A
                   ;
                   READHEX:
07E4: F1 95                ACALL  RD_CHAR
07E6: F1 A9                ACALL  ASC2HEX
07E8: C4                   SWAP   A
07E9: FA                   MOV    R2,A
07EA: F1 95                ACALL  RD_CHAR
07EC: F1 A9                ACALL  ASC2HEX
07EE: 4A                   ORL    A,R2
07EF: 22                   RET
                   
                   ;$INCLUDE(WRBYTE.ASM) $07ED
                   ; This Subroutine Writes a BYTE 
                   ;
07F0: FA           WRBYTE: MOV    R2,A
07F1: C4                   SWAP   A
07F2: F1 BD                ACALL  HEX2ASC
07F4: F1 A1                ACALL  WT_CHAR
07F6: EA                   MOV    A,R2
07F7: F1 BD                ACALL  HEX2ASC
07F9: F1 A1                ACALL  WT_CHAR
07FB: 22                   RET
                           
                   ;        END
