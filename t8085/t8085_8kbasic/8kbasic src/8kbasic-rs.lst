 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 1 - 9/26/2024 16:17:21


    1/   0 :                            ;EDITS:
    2/   0 :                            ;    30-JUN-2008 KJL
    3/   0 :                            ;       - CREATED FROM IMSAI 8K BASIC VERSION 1.4 MANUAL
    4/   0 :                            ;
    5/   0 :                            ;    07-FEB-2014 UM
    6/   0 :                            ;	- FIXED TYPOS, MATCHES MANUAL NOW
    7/   0 :                            ;    22-FEB-2019 JQ
    8/   0 :                            ;	- ADDED SUPPORT FOR DISABLING CONSOLE CR/LF DELAY.
    9/   0 :                            ;
   10/   0 :                            ;    21-OCT-2018 JQ
   11/   0 :                            ;	- ADDED SUPPORT FOR MC6850 ACIA.
   12/   0 :                            ;	- IMPLIMENTED CONDITIONAL ASSEMBLY FOR
   13/   0 :                            ;	  UART AND ACIA SUPPORT.
   14/   0 :                            ;	- MODIFIED FOR USE ON OMEN ALPHA 8085SBC.
   15/   0 :                            ;	- IMPLIMENTED CONDITIONAL ASSEMBLY FOR
   16/   0 :                            ;	  USING ORIGINATING AT OTHER THAN 0x0000.
   17/   0 :                            ;	- BUGFIX: THE INTERPRETER ASSUMES THAT ANY TEXT NOT
   18/   0 :                            ;	  FOUND IN THE JUMP-TABLE MAY BE A 'LET' STATEMENT
   19/   0 :                            ;	  BUT HANGS IF IT IS NOT. WHAT IF CAPS-LOCK IS OFF?
   20/   0 :                            ;
   21/   0 :                            ;---------------------------------------------------------
   22/   0 :                            ; BASIC_3V0.ASM 1.420   10/21/18        JQ      8k BASIC
   23/   0 :                            ; BASIC30.ASM   1.4     05/19/77        JRB     8K BASIC
   24/   0 :                            ; BASICS2.ASM   1.401   05/11/77        DK      8K BASIC
   25/   0 :                            ; BASIC19.ASM   1.401   05/11/77        DH
   26/   0 :                            ; BASIC18.ASM   1.401   05/10/77        JRB
   27/   0 :                            ; BASIC16.ASM   1.401   05/09/77        DH
   28/   0 :                            ; BASIC11.ASM   1.401   05/04/77        DH
   29/   0 :                            ; BASIC10.ASM   1.401   05/03/77        DH
   30/   0 :                            ; BASIC8.ASM    1.401   05/02/77        DH
   31/   0 :                            ;
   32/   0 :                            ; IMSAI 8K-9K BASIC
   33/   0 :                            ;
   34/   0 :                            ; COPYRIGHT (C) 1977
   35/   0 :                            ; IMSAI MANUFACTURING CORPORATION
   36/   0 :                            ; 14860 WICKS BLVD, SAN LEANDRO CALIFORNIA  94577
   37/   0 :                            ;
   38/   0 :                            ; CORRECTION HISTORY:
   39/   0 :                            ;
   40/   0 :                            ;   02/25/77 - FIXED BEGPR POINTERS
   41/   0 :                            ;            - FIXED LOG(X) FOR 0.5 < X < 1.0
   42/   0 :                            ;            - FIXED SQR(X) FOR 0.0 < X < 0.5
   43/   0 :                            ;            - FIXED SCI NOTATION INPUT ROUTINE
   44/   0 :                            ;            - FIXED EDIT ROUTINE WHEN PROGRAM ENDS ON
   45/   0 :                            ;              00 BOUNDARY (SYSTEM USED TO GO AWAY)
   46/   0 :                            ;            - ADDED XEQ COMMAND (LIKE RUN BUT KEEPS DATA)
   47/   0 :                            ;            - SOFTWARE MEMORY PROTECT OF 1ST 9K IMPLIMENTED
   48/   0 :                            ;            - FIXED TAB FOR BACKWARDS MOVEMENT
   49/   0 :                            ;            - FIXED OV ERROR FOR SMALL X IN TRIG,LOG & EXP
   50/   0 :                            ;            - ADDED PROGRAM CHAINING CAPABILITY.
   51/   0 :                            ;            - FIXED EXP(X) ROUTINE FOR LARGE X.
   52/   0 :                            ;            - ADDED PEEK(X) COMMAND
   53/   0 :                            ;            - ADDED POKE A,X COMMAND
   54/   0 :                            ;            - ADDED CALL A COMMAND
   55/   0 :                            ;  04/02/77  - ADDED TARBEL CASSETTE SAVE AND LOAD
   56/   0 :                            ;            - ADDED FIX LINE EDITOR
   57/   0 :                            ;            - RENAMED NATURAL LOG TO LN(X)
   58/   0 :                            ;            - ADDED BASE 10 LOG AS LOG(X)
   59/   0 :                            ;            - ALLOWED FOR DAZZLER IN OUTPUT ROUTINE
   60/   0 :                            ;            - ADDED LINE # SEARCH UTILITY (LOCAT EQU $)
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 2 - 9/26/2024 16:17:21


   61/   0 :                            ;            - ADDED TABLE SEARCH UTILITY (SEEK EQU $)
   62/   0 :                            ;            - ARRAYS CAN NOW HAVE > 256 ELEMENTS PER DIM
   63/   0 :                            ; 04/09/77   -ADDED CONDITIONAL ASSY PARAMS FOR 8 AND 9K
   64/   0 :                            ;            -FIXED POWER ERROR. (X^B WHEN B=0 GAVE X^2.)
   65/   0 :                            ;            -ADDED CONTROL H AS PHYSICAL RUBOUT OF CHAR
   66/   0 :                            ; 04/27/77   -CHANGE RST'S TO RUN UNDER CP/M
   67/   0 :                            ;            -ADDED EXPRESSION EVALUATER FIX
   68/   0 :                            ;            -LOAD UNDER CP/M
   69/   0 :                            ; 05/02/77   -ADD DDT, BYE COMMANDS, BIOS I/O
   70/   0 :                            ; 05/03/77   -OPTIMIZE FUNCTION ITERATION LOOP (SIN5)
   71/   0 :                            ;            -SO UNDERFLOW CAN BE MADE NON-FATAL
   72/   0 :                            ; 05/04/77   -OPTIMIZE SIN(X) ROUTINE
   73/   0 :                            ;            -ADD NON-FATAL ERRORS
   74/   0 :                            ; 05/09/77   -SQUISH TO INCLUDE PEEK,POKE,CALL IN 8K
   75/   0 :                            ; 05/11/77   -MAKE RND(X) USE X AS RANGE; X^0->1,0^X->0
   76/   0 :                            ;            -TAB(N) GO TO NEXT LINE IF PAST POSITION
   77/   0 :                            ; 5/12/77   - BUG IN NESTED FOR'S AND REENTERED FOR'S FIXED
   78/   0 :                            ;
   79/   0 :                            ; ASSEMBLY PARAMETERS:
   80/   0 : =0H                        ROMSTRT	EQU		00000H	;START OF ROM
   81/   0 : =8000H                     RAMSTRT	EQU		08000H	;START OF RAM
   82/   0 :                            ;ROMSTRT	EQU		08000H	;START OF ROM
   83/   0 :                            ;RAMSTRT	EQU		0C000H	;START OF RAM
   84/   0 : =0F800H                    RAMEND	EQU		0F800H	;END OF RAM+1
   85/   0 : =1H                        LARGE   EQU     1       ;1=9K ASSEMBLY, 0=8K
   86/   0 : =0H                        CPM     EQU     0       ;1=RUN UNDER CPM
   87/   0 : =0H                        HUNTER  EQU     0       ;1=INCLUDE BAUD COMMAND
   88/   0 :                            ;
   89/   0 : =1H                        MSTRCLK	EQU		1		;0 = 3.68MHz, 1 = 4.91MHz
   90/   0 : =0H                        ACIA	EQU		0		;1=ENABLE MC6850 ACIA CODE
   91/   0 : =1H                        UART	EQU		1		;1=ENABLE 8251 UART CODE
   92/   0 : =0H                        PT_SUPP	EQU		0		;1=ENABLE PAPER-TAPE SUPPPORT IN CONSOLE OUTPUT
   93/   0 : =0H                        IMSAI	EQU		0		;1=ENABLE IMSAI CASSETTE STORAGE COMMANDS
   94/   0 :                            ;
   95/   0 :                            
   96/   0 : =>FALSE                    	IF ROMSTRT = 8000H	;IF TESTING IN RAM, DON'T DESTROY MON85 VARS
   97/   0 :                            MON85	EQU		1		;1=LEAVE MON85 RAM INTACT (DEBUGGING)
   98/   0 : =>TRUE                     	ELSE
   99/   0 : =0H                        MON85	EQU		0
  100/   0 : [96]                       	ENDIF
  101/   0 :                            
  102/   0 : =>TRUE                     	IF ROMSTRT = 0		;INITIALIZE SERIAL PORT IF BASIC AT RESET VECTOR
  103/   0 : =1H                        ACIAINI	EQU		1		;1=INITALIZE ACIA
  104/   0 : =1H                        UARTINI	EQU		1		;1=INITALIZE UART
  105/   0 : =>FALSE                    	ELSE
  106/   0 :                            ACIAINI	EQU		0		;1=INITALIZE ACIA
  107/   0 :                            UARTINI	EQU		0		;1=INITALIZE UART
  108/   0 : [102]                      	ENDIF
  109/   0 :                            	
  110/   0 :                            
  111/   0 :                            ;
  112/   0 :                            ; CPM EQUATES
  113/   0 :                            ;
  114/   0 : =0H                        BOOT    EQU     0       ;WARM BOOT
  115/   0 : =5H                        BDOS    EQU     5       ;BDOS ENTRY
  116/   0 : =100H                      TBASE   EQU     0100H   ;PROGRAM LOAD UNDER CPM
  117/   0 : =3H                        CSTAT   EQU     3       ;OFFSET OF CONSOLE STATUS
  118/   0 :                                                            ;...QUERY IN BIOS TABLE
  119/   0 :                            ;
  120/   0 :                            ; BASIC EQUATES
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 3 - 9/26/2024 16:17:21


  121/   0 :                            ;
  122/   0 :                            
  123/   0 : =7FH                       RUBOUT	EQU		07FH	;RUBOUT CHARACTER
  124/   0 : =>TRUE                     	IF ROMSTRT = 0
  125/   0 : =0F7H                      FATAL   EQU     0F7H    ;OPCODE FOR FATAL IS RST 6
  126/   0 : =>FALSE                    	ELSE
  127/   0 :                            FATAL   EQU     0CDH    ;OPCODE FOR FATAL ERROR IS "CALL" TO RST6
  128/   0 : [124]                      	ENDIF
  129/   0 :                            ;
  130/   0 :                            BASIC:
  131/   0 : =>TRUE                     	IF CPM = 0
  132/   0 :                                    ORG     ROMSTRT
  133/   0 : 21 00 84                           LXI     H,RAM+1024
  134/   3 : 3E AE                              MVI     A,0AEH  ;START OF INIT SEQUENCE
  135/   5 : C3 7E 00                           JMP     INIT1   ;FINISH INIT
  136/   8 : =>FALSE                    	ELSE
  137/   8 :                                    ORG     TBASE
  138/   8 :                                    JMP     INITC   ;USE TEMPORARY CODE AT END
  139/   8 : [131]                      	ENDIF
  140/   8 :                            ;
  141/   8 :                            ;       ORG     ROMSTRT+8
  142/   8 :                            ;
  143/   8 :                            ; SKIP CHARS POINTED BY H,L UNTIL NON-BLANK,
  144/   8 :                            ; LEAVE IN REG A
  145/   8 :                            ;
  146/   8 :                            RST1:
  147/   8 : 7E                         TSTC:   MOV     A,M     ;LOAD THE BYTE AT (H,L)
  148/   9 : FE 20                              CPI     ' '     ;TEST IF BLANK
  149/   B : C0                                 RNZ             ;RETURN IF NOT
  150/   C : 23                                 INX     H       ;POINT NEXT
  151/   D : C3 08 00                           JMP     RST1    ;LOOP
  152/  10 :                            
  153/  10 :                            
  154/  10 :                            ;
  155/  10 :                            ;
  156/  10 :                            ;       ORG     ROMSTRT+16
  157/  10 :                            ;
  158/  10 :                            ; COMPARE STRING AT (H,L) TO STRING AT (D,E)
  159/  10 :                            ; RETURN IF EQUAL (THRU X'00' IN D,E) OR ON FIRST NOT EQUAL
  160/  10 :                            ; ONLY THE FIRST THREE CHARS NEED BE EQUAL
  161/  10 :                            ; IGNORE ALL SPACES
  162/  10 :                            ;
  163/  10 :                            
  164/  10 :                            RST2:
  165/  10 : C5                         COMP:   PUSH    B       ;SAVE B,C
  166/  11 : 06 00                              MVI     B,0     ;INIT COUNT
  167/  13 : =>TRUE                     	IF ROMSTRT = 0
  168/  13 : CF                         COMP1:  RST     1       ;SKIP SPACES
  169/  14 : =>FALSE                    	ELSE
  170/  14 :                            COMP1:	CALL	RST1	;CALL TO RAM ADDRESS
  171/  14 : [167]                      	ENDIF
  172/  14 : 1A                                 LDAX    D       ;GET CHAR TO MATCH WITH
  173/  15 : C3 5A 1A                           JMP     COMP2   ;CONTINUE ELSEWHERE
  174/  18 :                            ;
  175/  18 :                            ;
  176/  18 :                            ;       ORG     ROMSTRT+24
  177/  18 :                            ;
  178/  18 :                            ; STORE THE FLOATING POINT ACCUMULATOR AT (H,L)
  179/  18 :                            ;
  180/  18 :                            RST3:
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 4 - 9/26/2024 16:17:21


  181/  18 : 11 58 82                   SFPA:   LXI     D,FACC  ;POINT FLOAT ACC
  182/  1B : 06 04                              MVI     B,4     ;BYTE COUNT
  183/  1D : C3 2E 1C                           JMP     COPYD   ;GO MOVE IT
  184/  20 :                            ;
  185/  20 :                            ;
  186/  20 :                            ;       ORG     ROMSTRT+32
  187/  20 :                            ;
  188/  20 :                            ; INCREMENT H,L BY BYTE AT (SP), RETURN TO (SP)+1
  189/  20 :                            ;
  190/  20 :                            RST4:
  191/  20 : E3                         INCPC:  XTHL            ;GET RETURN ADDRESS IN H,L
  192/  21 : 7E                                 MOV     A,M     ;GET THE INCREMENT
  193/  22 : 23                                 INX     H       ;POINT TRUE RETURN
  194/  23 : E3                                 XTHL            ;PUT BACK TO STACK
  195/  24 : D5                                 PUSH    D       ;SAVE D,E
  196/  25 : C3 3B 00                           JMP     RST4A   ;CONTINUE
  197/  28 :                            ;
  198/  28 :                            ;
  199/  28 :                            ;       ORG     ROMSTRT+40
  200/  28 :                            ;
  201/  28 :                            ; LOAD THE FLOATING POINT ACCUM WITH THE 4 BYTES AT (H,L)
  202/  28 :                            ;
  203/  28 :                            RST5:
  204/  28 : 11 58 82                   LDFPA:  LXI     D,FACC  ;POINT FLOAT ACC
  205/  2B : 06 04                              MVI     B,4     ;BYTE COUNT
  206/  2D : C3 39 1C                           JMP     COPYH   ;GO MOVE IT
  207/  30 :                            ;
  208/  30 :                            ;
  209/  30 :                            ;       ORG     ROMSTRT+48
  210/  30 :                            ;
  211/  30 :                            ; PRINT:  'XX ERR & NNN'
  212/  30 :                            ; **** IF ERROR MESSAGE CHANGES TO A DIFFERENT RST,
  213/  30 :                            ; **** ...CHANGE "FATAL" EQUATE
  214/  30 :                            ;
  215/  30 :                            RST6:
  216/  30 : E3                         PRERR:  XTHL            ;SAVE HL, GET ERROR CODE PTR
  217/  31 : F5                                 PUSH    PSW     ;SAVE REGS
  218/  32 : D5                                 PUSH    D
  219/  33 : C5                                 PUSH    B
  220/  34 : C3 12 1C                           JMP     ERROR   ;CONTINUE
  221/  37 : =>TRUE                     	IF ROMSTRT = 0
  222/  37 : 00 00 00 00                		DW		0,0		;FILL IN SPACE TILL NEXT VECTOR
  223/  3B : =>FALSE                    	ELSE
  224/  3B :                            		DB		0,0		;FILL IN SPACE TILL NEXT VECTOR
  225/  3B : [221]                      	ENDIF
  226/  3B :                            ;
  227/  3B : =>TRUE                             IF CPM = 0
  228/  3B :                                    ORG     ROMSTRT+59      ;LEAVE 3 BYTES FOR DDT
  229/  3B : [227]                              ENDIF
  230/  3B :                            ;
  231/  3B :                            RST4A:
  232/  3B : 5F                         		MOV     E,A     ;PUT IN LOW
  233/  3C : B7                                 ORA     A       ;TEST SIGN
  234/  3D : 16 00                              MVI     D,0     ;DEFAULT POSITIVE
  235/  3F : F2 44 00                           JP      RST4B   ;BRIF +
  236/  42 : 16 FF                              MVI     D,0FFH  ;ELSE, NEG
  237/  44 : 19                         RST4B:  DAD     D       ;BUMP H,L
  238/  45 : D1                                 POP     D       ;RESTORE D,E
  239/  46 : C9                                 RET             ;RETURN
  240/  47 : 43 4F 50 59 52 49 47 48 54         DB      "COPYRIGHT (C)1977"
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 5 - 9/26/2024 16:17:21


        50 : 20 28 43 29 31 39 37 37   
  241/  58 : 49 4D 53 41 49 20 4D 46 47         DB      "IMSAI MFG CORP"
        61 : 20 43 4F 52 50            
  242/  66 : 53 41 4E 20 4C 45 41 4E 44         DB      "SAN LEANDRO CA 94577 USA"
        6F : 52 4F 20 43 41 20 39 34 35
        78 : 37 37 20 55 53 41         
  243/  7E :                            ;
  244/  7E :                            ; INITIALIZATION ROUTINE
  245/  7E :                            ; DETERMINE MEMORY SIZE.
  246/  7E :                            ;    (START AT 9K AND TRY 1K INCREMENTS TILL END)
  247/  7E :                            ; SETUP POINTERS FOR STACK, DATA, AND PROGRAM
  248/  7E :                            ; INIT SIO BOARD
  249/  7E :                            ;
  250/  7E :                            INIT1:
  251/  7E : =>TRUE                     	IF CPM = 0
  252/  7E : =>TRUE                     	IF UART = 1
  253/  7E : =8H                        UARTB	EQU	08H		;Base IO address of 8251 UART (IO)
  254/  7E : =8H                        UARTD	EQU	UARTB		;Data address
  255/  7E : =9H                        UARTC	EQU	UARTB+1		;Control address
  256/  7E : =9H                        UARTS	EQU	UARTB+1		;Status address
  257/  7E :                            
  258/  7E : =2H                        RX_MASK	EQU	00000010B	;RXRDY flag bit in status byte
  259/  7E : =1H                        TX_MASK	EQU	00000001B	;TXRDY flag bit in status byte
  260/  7E :                            
  261/  7E : =>TRUE                     	IF UARTINI = 1
  262/  7E :                            		; Initialize the 8251 UART
  263/  7E :                            		; Must force setup mode with 3 consecutive NULL characters
  264/  7E : 3E 00                      		MVI		A,0		; Insure not setup mode
  265/  80 : D3 09                      		OUT		UARTC	; Write once
  266/  82 : D3 09                      		OUT		UARTC	; Write again (now in operate mode)
  267/  84 : D3 09                      		OUT		UARTC	; Write again (now in operate mode)
  268/  86 :                            		;Issue internal RESET
  269/  86 : 3E 40                      		MVI		A,040H	; Return to setup mode
  270/  88 : D3 09                      		OUT		UARTC	; write it
  271/  8A :                            		;Issue Mode Set
  272/  8A : =>TRUE                     	IF MSTRCLK = 1	;4.9152MHz Clock Source Selected
  273/  8A : 3E 4E                      		MVI		A,04EH	; 8 data, 1 stop, x16 @ 4.5192MHz
  274/  8C : =>FALSE                    	ELSE		;3.6864MHz Clock Source Selected
  275/  8C :                            		MVI		A,04DH	; 8 data, 1 stop, x1 @ 3.6864MHz
  276/  8C : [272]                      	ENDIF
  277/  8C : D3 09                      		OUT		UARTC	; Write it
  278/  8E :                            		;Issue Command Set
  279/  8E : 3E 37                      		MVI		A,037H	; RTS,DTR,Enable RX and TX
  280/  90 : D3 09                      		OUT		UARTC	; Write it
  281/  92 :                            		;
  282/  92 : [261]                      	ENDIF
  283/  92 : [252]                      	ENDIF
  284/  92 :                            ;
  285/  92 : =>FALSE                    	IF ACIA = 1
  286/  92 :                            ACIAB	EQU		0xC0	;Base I/O address of ACIA
  287/  92 :                            ACIAC	EQU		ACIAB	;ACIA Control address
  288/  92 :                            ACIAS	EQU		ACIAB	;ACIA Status address
  289/  92 :                            ACIAD	EQU		ACIAB+1	;ACIA Data address
  290/  92 :                            
  291/  92 :                            TX_MASK	EQU	 00000010B	;ACIA TDRE bit
  292/  92 :                            RX_MASK	EQU	 00000001B	;ACIA RXRF bit
  293/  92 :                            
  294/  92 :                            	IF ACIAINI = 1
  295/  92 :                            		;Initialize the 6850 ACIA
  296/  92 :                            		MVI		A,003H 	;Master RESET first!
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 6 - 9/26/2024 16:17:21


  297/  92 :                            		OUT		ACIAC
  298/  92 :                            	IF MSTRCLK = 1	;4.9152MHz Clock Source Selected
  299/  92 :                            		MVI		A,016H	;divide by 64 for 38400 Bd, 8 bit, no parity, 1 stop bit, no IRQ
  300/  92 :                            	ELSE		;3.6864MHz Clock Source Selected
  301/  92 :                            		MVI		A,015H	;divide by 16 for 115200 Bd, 8 bit, no parity, 1 stop bit, no IRQ
  302/  92 : [298]                      	ENDIF
  303/  92 :                            		OUT		ACIAC
  304/  92 : [294]                      	ENDIF
  305/  92 : [285]                      	ENDIF
  306/  92 : [251]                      	ENDIF
  307/  92 :                            ;
  308/  92 :                            		;TEST RAM FROM RAMSTRT TO RAMEND
  309/  92 : 01 00 04                           LXI     B,1024  ;1K INCR COUNTER
  310/  95 : 7E                         INIT2:  MOV     A,M     ;GET A BYTE FROM MEMORY
  311/  96 : 2F                                 CMA             ;COMPLEMENT
  312/  97 : 77                                 MOV     M,A     ;REPLACE
  313/  98 : BE                                 CMP     M       ;TEST IF RAM/ROM/END
  314/  99 : C2 A2 00                           JNZ     INIT3   ;BRIF OUT OF RAM
  315/  9C : 2F                                 CMA             ;RE-COMPLEMENT
  316/  9D : 77                                 MOV     M,A     ;PUT ORIG BACK
  317/  9E : 09                                 DAD     B       ;POINT NEXT BLOCK
  318/  9F :                            		; JQ - ADDED SO AS NOT TO OVERWRITE MON85 VARIABLES WHILE DEBUGGING
  319/  9F : =>FALSE                    		IF MON85
  320/  9F :                             		MOV		A,H		;CHECK FOR END OF RAM HARDWALL
  321/  9F :                            		CPI		RAMEND >> 8
  322/  9F :                            		JNZ		INIT2	;NOT HARDWARE, LOOP
  323/  9F :                            		MOV		A,L
  324/  9F :                            		CPI		RAMEND & 0FFH
  325/  9F :                            		JNZ		INIT2	;NOT HARDWARE, LOOP
  326/  9F : =>TRUE                     		ELSE
  327/  9F : D2 95 00                           JNC     INIT2   ;LOOP
  328/  A2 : [319]                      		ENDIF
  329/  A2 :                            ;
  330/  A2 : F9                         INIT3:  SPHL            ;SET STACK POINTER TO END OF MEMORY
  331/  A3 : 01 00 FF                           LXI     B,-256 ;ALLOW 256 BYTES FOR STACK
  332/  A6 : 09                                 DAD     B       ;ADD TO ADDRESS
  333/  A7 : 22 91 82                           SHLD    DATAB   ;SAVE ADDR OF START OF DATA
  334/  AA :                            ;
  335/  AA :                            ; SOFTWARE WRITE PROTECT OF FIRST 9K OF RAM.
  336/  AA :                            ;
  337/  AA :                            ; BUT NO PROTECT UNDER CPM OR FOR 8K (EPROM) VERSION
  338/  AA : =>TRUE                     	IF LARGE = 1 && CPM = 0
  339/  AA : 3E 02                              MVI     A,2     ;SET PROTECT OF FIRST 1K BLOCK
  340/  AC : D3 FE                      PROTC:  OUT     0FEH    ;SEND IT
  341/  AE : C6 04                              ADI     4       ;ADDRESS NEXT 1K BLOCK
  342/  B0 : FE 26                              CPI     26H     ;STOP AFTER 9 BLOCKS
  343/  B2 : C2 AC 00                           JNZ     PROTC   ;CONTINUE TO PROTECT
  344/  B5 : [338]                          ENDIF
  345/  B5 : AF                                 XRA     A       ;GET A ZERO IN A
  346/  B6 : F5                                 PUSH    PSW     ;SET STACK 1 LEVEL DEEP WITHOUT A GOSUB
  347/  B7 : 21 00 00                           LXI     H,0     ;CLEAR H,L
  348/  BA : 39                                 DAD     SP      ;SP TO H,L
  349/  BB : 22 8B 82                           SHLD    STACK   ;SAVE BEG OF STACK
  350/  BE : CD 5F 01                           CALL    IRAM    ;INIT RAM
  351/  C1 : 11 54 1D                           LXI     D,NRNDX ;POINT TO RANDOM # SERIES
  352/  C4 : 06 08                              MVI     B,8     ;LOAD COUNT
  353/  C6 : CD 2E 1C                           CALL    COPYD   ;COPY TO TRND<X> IN RAM TABLE
  354/  C9 : 36 02                              MVI     M,2     ;SET RANDOM SWITCH
  355/  CB : =>FALSE                        IF CPM = 1
  356/  CB :                                    CALL    NEW0    ;AUTOMATIC "NEW"
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 7 - 9/26/2024 16:17:21


  357/  CB : [355]                      	ENDIF
  358/  CB : 21 61 1D                           LXI     H,VERS  ;POINT VERSION MESSAGE
  359/  CE : CD 9E 19                   RDYM:   CALL    TERMM   ;WRITE IT
  360/  D1 :                            ;
  361/  D1 : =0D1H                      RDY     EQU     $
  362/  D1 :                            ;
  363/  D1 :                            ; PRINT 'READY'
  364/  D1 :                            ;
  365/  D1 : 21 28 1E                           LXI     H,READY ;POINT READY MSG
  366/  D4 : CD 9E 19                           CALL    TERMM   ;GO PRINT IT
  367/  D7 :                            ;
  368/  D7 : =0D7H                      GETCM   EQU     $
  369/  D7 :                            ;
  370/  D7 :                            ;
  371/  D7 :                            ; COMMAND INPUT ROUTINE
  372/  D7 :                            ;
  373/  D7 :                            ; READ A LINE FROM THE TTY
  374/  D7 :                            ; IF STARTS WITH NUMERIC CH, ASSUME IT'S A BASIC STATEMENT
  375/  D7 :                            ; IF NOT, IT IS EITHER AN IMMEDIATE STATMENT, OR A COMMAND
  376/  D7 :                            ;
  377/  D7 : 3E 3A                              MVI     A,':'   ;PROMPT & ON SET FOR SW
  378/  D9 : 32 76 80                           STA     EDSW    ;SET MODE=EDIT
  379/  DC : 2A 8B 82                           LHLD    STACK   ;GET STACK ADDRESS
  380/  DF : F9                                 SPHL            ;SET REG SP
  381/  E0 : CD DB 18                           CALL    TERMI   ;GET A LINE
  382/  E3 : CD 96 1A                           CALL    PACK    ;GO PACK THE NUMBER INTO B,C
  383/  E6 : 78                                 MOV     A,B     ;GET HI BYTE OF LINE NUMBER
  384/  E7 : B1                                 ORA     C       ;PLUS LOW BYTE
  385/  E8 : CA 72 01                           JZ      EXEC    ;BRIF EXEC STATEMENT
  386/  EB : C5                                 PUSH    B       ;SAVE LINE NUMBER
  387/  EC : 11 7D 80                           LXI     D,IMMED+1       ;POINT SAVE AREA
  388/  EF : EB                                 XCHG            ;FLIP/FLOP
  389/  F0 : 70                                 MOV     M,B     ;PUT LO LINE
  390/  F1 : 23                                 INX     H       ;POINT NEXT
  391/  F2 : 71                                 MOV     M,C     ;PUT LO LINE
  392/  F3 : 23                                 INX     H       ;POINT NEXT
  393/  F4 : 06 03                              MVI     B,3     ;INIT COUNT
  394/  F6 : 1A                         EDIT1:  LDAX    D       ;GET A BYTE
  395/  F7 : 77                                 MOV     M,A     ;PUT IT DOWN
  396/  F8 : 04                                 INR     B       ;COUNT IT
  397/  F9 : 23                                 INX     H       ;POINT NEXT
  398/  FA : 13                                 INX     D       ;DITTO
  399/  FB : B7                                 ORA     A       ;TEST BYTE JUST MOVED
  400/  FC : C2 F6 00                           JNZ     EDIT1   ;LOOP
  401/  FF : 78                                 MOV     A,B     ;GET COUNT
  402/ 100 : 32 7C 80                           STA     IMMED   ;STORE THE COUNT
  403/ 103 : C1                                 POP     B       ;GET LINE NUM
  404/ 104 : CD 59 1F                           CALL    LOCAT   ;GO FIND REQUESTED LINE NUMBER
  405/ 107 : E5                                 PUSH    H       ;SAVE H,L
  406/ 108 : DA 22 01                           JC      EDIT5   ;BRIF IF LINE NOT FOUND
  407/ 10B : 54                         EDIT2:  MOV     D,H     ;COPY ADDR
  408/ 10C : 5D                                 MOV     E,L     ;TO D,E
  409/ 10D : 06 00                              MVI     B,0     ;GET A ZERO
  410/ 10F : 4E                                 MOV     C,M     ;GET LEN
  411/ 110 : 09                                 DAD     B       ;POINT NEXT STMT
  412/ 111 : 7E                         EDIT3:  MOV     A,M     ;GET LEN NEXT STMT
  413/ 112 : B7                                 ORA     A       ;TEST IT
  414/ 113 : CA 1D 01                           JZ      EDIT8   ;BRIF END
  415/ 116 : 47                                 MOV     B,A     ;SET LENGTH
  416/ 117 : CD 39 1C                           CALL    COPYH   ;ELSE MOVE LINE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 8 - 9/26/2024 16:17:21


  417/ 11A : C3 11 01                           JMP     EDIT3   ;LOOP
  418/ 11D : EB                         EDIT8:  XCHG            ;PUT NEW ADDR TO H,L
  419/ 11E : 77                                 MOV     M,A     ;MARK END
  420/ 11F : 22 93 82                           SHLD    PROGE   ;AND UPDATE ADDRESS
  421/ 122 : 3A 7C 80                   EDIT5:  LDA     IMMED   ;GET LEN OF INSERT
  422/ 125 : FE 04                              CPI     4       ;TEST IF DELETE
  423/ 127 : CA D7 00                           JZ      GETCM   ;BRIF IS
  424/ 12A : 4F                                 MOV     C,A     ;SET LO LEN
  425/ 12B : 06 00                              MVI     B,0     ;ZERO HI LEN
  426/ 12D : 2A 93 82                           LHLD    PROGE   ;GET END OF PROG
  427/ 130 : 54                                 MOV     D,H     ;COPY TO
  428/ 131 : 5D                                 MOV     E,L     ;D,E
  429/ 132 : 09                                 DAD     B       ;DISP LEN OF INSERT
  430/ 133 : 22 93 82                           SHLD    PROGE   ;UPDATE END POINT
  431/ 136 : C1                                 POP     B       ;GET ADDR
  432/ 137 : 1A                         EDIT6:  LDAX    D       ;GET A BYTE
  433/ 138 : 77                                 MOV     M,A     ;COPY IT
  434/ 139 : 1B                                 DCX     D       ;POINT PRIOR
  435/ 13A : 2B                                 DCX     H       ;DITTO
  436/ 13B : 7A                                 MOV     A,D     ;GET HI ADDR
  437/ 13C : B8                                 CMP     B       ;COMPARE
  438/ 13D : CA 43 01                           JZ      EDIT7   ;BRIF HI EQUAL
  439/ 140 : D2 37 01                           JNC     EDIT6   ;BRIF NOT LESS
  440/ 143 : 7B                         EDIT7:  MOV     A,E     ;GET LO ADDR
  441/ 144 : B9                                 CMP     C       ;COMPARE
  442/ 145 : D2 4B 01                           JNC     ED7A    ;MUST TEST FOR 00 BOUNDARY
  443/ 148 : C3 54 01                           JMP     ED7B    ;GO AROUND BOUNDARY TEST CODE
  444/ 14B : 2F                         ED7A:   CMA             ;COMPLIMENT LOW LINE NUMBER
  445/ 14C : B9                                 CMP     C       ;AND COMPARE TO START
  446/ 14D : C2 37 01                           JNZ     EDIT6   ;BRIF NOT =
  447/ 150 : B7                                 ORA     A       ;NOT TEST FOR 00
  448/ 151 : C2 37 01                           JNZ     EDIT6   ;THIS IS USUAL CASE
  449/ 154 : 13                         ED7B:   INX     D       ;POINT FORWARD
  450/ 155 : 21 7C 80                           LXI     H,IMMED ;POINT INSERT
  451/ 158 : 46                                 MOV     B,M     ;GET LENGTH
  452/ 159 : CD 39 1C                           CALL    COPYH   ;GO MOVE IT
  453/ 15C : C3 D7 00                           JMP     GETCM   ;GO GET ANOTHER COMMAND
  454/ 15F :                            ;
  455/ 15F :                            ; IRAM          INITIALIZE RAM
  456/ 15F :                            ;       ZEROES RAM FROM BZERO TO EZERO
  457/ 15F :                            ;       INITS RANDOM # CONSTANTS
  458/ 15F :                            ;       RETURNS H=PTR TO TRND
  459/ 15F :                            ;
  460/ 15F : 21 00 80                   IRAM:   LXI     H,BZERO ;CLEAR BZERO->EZERO
  461/ 162 : 06 77                              MVI     B,EZERO-BZERO
  462/ 164 : CD 3F 1C                           CALL    ZEROM
  463/ 167 : 11 54 1D                           LXI     D,NRNDX ;MOVE RANDOM # SERIES TO RNDX
  464/ 16A : 21 77 82                           LXI     H,RNDX
  465/ 16D : 06 08                              MVI     B,8     ;COUNT
  466/ 16F : C3 2E 1C                           JMP     COPYD   ;MOVE IT & RETURN
  467/ 172 : =172H                      EXEC    EQU     $
  468/ 172 :                            ;
  469/ 172 :                            ;
  470/ 172 :                            ; DECODE COMMAND IN IOBUFF
  471/ 172 :                            ; EXECUTE IF POSSIBLE
  472/ 172 :                            ; THEN GOTO GET NEXT COMMAND
  473/ 172 :                            ;
  474/ 172 :                            ;
  475/ 172 : 32 74 82                           STA     MULTI   ;RESET MULTI SW
  476/ 175 : 32 88 82                           STA     FNMOD   ;RESET FN TYPE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 9 - 9/26/2024 16:17:21


  477/ 178 : 3C                                 INR     A       ;GET A ONE
  478/ 179 : 32 75 80                           STA     RUNSW   ;SET IMMEDIATE MODE
  479/ 17C : 21 CF 80                           LXI     H,IOBUF+1       ;POINT SMT
  480/ 17F : 11 7C 80                           LXI     D,IMMED ;POINT NEW AREA
  481/ 182 : 7E                         EXEC1:  MOV     A,M     ;GET A BYTE
  482/ 183 : 12                                 STAX    D       ;PUT TO (D,L)
  483/ 184 : 13                                 INX     D       ;POINT NEXT
  484/ 185 : 23                                 INX     H       ;DITTO
  485/ 186 : B7                                 ORA     A       ;TEST BYTE
  486/ 187 : C2 82 01                           JNZ     EXEC1   ;CONTINUE
  487/ 18A : 21 EE 1D                           LXI     H,NULLI ;POINT NO LINE NUM
  488/ 18D : 22 89 82                           SHLD    LINE    ;SAVE ADDR
  489/ 190 : 21 7C 80                           LXI     H,IMMED ;POINT START OF CMMD
  490/ 193 : C3 15 02                           JMP     RUN3    ;GO INTO RUN PROCESSOR
  491/ 196 :                            ;
  492/ 196 : =196H                      NEW     EQU     $
  493/ 196 :                            ;
  494/ 196 :                            ; NEW COMMAND
  495/ 196 :                            ; 'NEW'==>CLEAR PROGRAM AND DATA
  496/ 196 :                            ; 'NEW*'==>CLEAR PROGRAM ONLY
  497/ 196 :                            ;
  498/ 196 : E5                                 PUSH    H       ;SAE PTR
  499/ 197 : 21 D7 00                           LXI     H,GETCM ;MAKE SUBROUTINE
  500/ 19A : E3                                 XTHL            ;RESTORE H
  501/ 19B : =>TRUE                     	IF ROMSTRT = 0
  502/ 19B : CF                                 RST     1       ;GET 1ST NON-BLANK CHAR AFTER 'NEW'
  503/ 19C : =>FALSE                    	ELSE
  504/ 19C :                            		CALL	RST1	;CALL TO RAM ADDRESS
  505/ 19C : [501]                      	ENDIF
  506/ 19C : DE 2A                              SBI     '*'     ;TEST
  507/ 19E : CA A6 01                           JZ      NEW1    ;BRIF PROGRAM CLEAR ONLY
  508/ 1A1 : AF                         NEW0:   XRA     A       ;GET A ZERO
  509/ 1A2 : 2A 91 82                           LHLD    DATAB   ;POINT DATA AREA
  510/ 1A5 : 77                                 MOV     M,A     ;CLEAR IT
  511/ 1A6 : 21 96 82                   NEW1:   LXI     H,BEGPR ;POINT START
  512/ 1A9 : 22 93 82                           SHLD    PROGE   ;RESET PROGRAM END
  513/ 1AC : 77                                 MOV     M,A     ;CLEAR IT
  514/ 1AD : C9                                 RET
  515/ 1AE :                            ;
  516/ 1AE : =1AEH                      FREE    EQU     $
  517/ 1AE :                            ;
  518/ 1AE :                            ; FREE COMMAND
  519/ 1AE :                            ; COMPUTE AMOUNT OF AVAILABLE STORAGE (EXCLUDING DATA AREA)
  520/ 1AE :                            ;
  521/ 1AE : 2A 91 82                           LHLD    DATAB   ;GET DATA BEG ADDRESS
  522/ 1B1 : EB                                 XCHG            ;PUT IN D,E
  523/ 1B2 : 2A 93 82                           LHLD    PROGE   ;GET PROGRAM END ADDRESS
  524/ 1B5 : 7B                                 MOV     A,E     ;LO ADDR TO REG A
  525/ 1B6 : 95                                 SUB     L       ;SUBTRACT
  526/ 1B7 : 5F                                 MOV     E,A     ;SAVE IT
  527/ 1B8 : 7A                                 MOV     A,D     ;HI ADDR TO REG A
  528/ 1B9 : 9C                                 SBB     H       ;SUBTRACT
  529/ 1BA : 57                                 MOV     D,A     ;SAVE IT
  530/ 1BB : CD 6A 1C                           CALL    BINFL   ;GO FLOAT D,E
  531/ 1BE : 21 CE 80                           LXI     H,IOBUF ;POINT BUFFER
  532/ 1C1 : CD C7 14                           CALL    FOUT    ;GO CONVERT TO OUTPUT
  533/ 1C4 : 36 00                              MVI     M,0     ;MARK END
  534/ 1C6 : CD 96 19                           CALL    TERMO   ;GO WRITE IT
  535/ 1C9 : C3 D7 00                           JMP     GETCM   ;CONTINUE
  536/ 1CC :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 10 - 9/26/2024 16:17:21


  537/ 1CC : =>FALSE                    	IF IMSAI
  538/ 1CC :                            TAPE    EQU     $
  539/ 1CC :                            ;
  540/ 1CC :                            ; TAPE COMMAND. DON'T ECHO INPUT. CONTINUE UNTIL KEY
  541/ 1CC :                            ; COMMAND.
  542/ 1CC :                            ;
  543/ 1CC :                                    MVI     A,1     ;SET TAPE INPUT SWITCH
  544/ 1CC :                                    STA     TAPES   ;STORE IT
  545/ 1CC :                                    MVI     A,11H   ;GET DC1 (=READER ON)
  546/ 1CC :                                    CALL    TESTO   ;WRITE IT
  547/ 1CC :                                    JMP     GETCM   ;GO PROCESS INPUT
  548/ 1CC : [537]                      	ENDIF
  549/ 1CC :                            ;
  550/ 1CC : =1CCH                      ENDIT   EQU     $
  551/ 1CC :                            ;
  552/ 1CC :                            ; END COMMAND. IF TAPE PUNCH SWITCH IS ON, PUNCH 'KEY' THEN
  553/ 1CC :                            ; CONTINUE
  554/ 1CC :                            ;
  555/ 1CC : =>FALSE                    	IF IMSAI
  556/ 1CC :                                    LDA     TAPES   ;GET PAPER TAPE SWITCH
  557/ 1CC :                                    CPI     2       ;TEST FOR SAVE
  558/ 1CC :                                    JNZ     RDY     ;BRIF NOT
  559/ 1CC :                                    LXI     H,KEYL  ;POINT 'KEY'
  560/ 1CC :                                    CALL    TERMM   ;WRITE IT
  561/ 1CC :                                    CALL    HDRTL   ;GO PUT TRAILER
  562/ 1CC : =>TRUE                     	ELSE
  563/ 1CC : C3 D1 00                           JMP     RDY     ;BRIF NOT
  564/ 1CF : [555]                      	ENDIF
  565/ 1CF :                            ;
  566/ 1CF :                            ; KEY COMMAND. RESET TAPE SWITCH. TURN READER OFF
  567/ 1CF :                            ;
  568/ 1CF :                            KEY:
  569/ 1CF : =>FALSE                    	IF IMSAI
  570/ 1CF :                            	    XRA     A       ;RESET TAPE SWITCH
  571/ 1CF :                                    STA     TAPES
  572/ 1CF :                                    LXI     H,PCHOF ;POINT READER/PUNCH OFF
  573/ 1CF :                                    JMP     RDYM    ;PRINT POFF+READY MESSAGE
  574/ 1CF : =>TRUE                     	ELSE
  575/ 1CF : C3 D1 00                           JMP     RDY		;PRINT READY MESSAGE
  576/ 1D2 : [569]                      	ENDIF
  577/ 1D2 :                            ;
  578/ 1D2 : =>FALSE                    	IF IMSAI
  579/ 1D2 :                            HDRTL   EQU     $
  580/ 1D2 :                            ;
  581/ 1D2 :                            ; PUNCH HEADER OR TRAILER ON PAPER TAPE.
  582/ 1D2 :                            ;
  583/ 1D2 :                                    MVI     B,25    ;LOAD COUNT
  584/ 1D2 :                            HDR1:   MVI     A,0FFH  ;LOAD RUBOUT
  585/ 1D2 :                                    CALL    TESTO   ;WRITE IT
  586/ 1D2 :                                    DCR     B       ;DECREMENT COUNT
  587/ 1D2 :                                    XRA     A       ;ZERO A
  588/ 1D2 :                                    CMP     B       ;TEST COUNT
  589/ 1D2 :                                    RZ              ;RETURN ON ZERO
  590/ 1D2 :                                    JMP     HDR1    ;CONTINUE
  591/ 1D2 : [578]                      	ENDIF
  592/ 1D2 :                            ;
  593/ 1D2 :                            ;
  594/ 1D2 :                            ; RUN PROCESSOR, GET NEXT STATMENT, AND EXECUTE IT
  595/ 1D2 :                            ; IF IN IMMEDIATE MODE, THEN RETURN TO GETCMMD
  596/ 1D2 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 11 - 9/26/2024 16:17:21


  597/ 1D2 : AF                         RUNCM:  XRA     A       ;PUT A ZERO TO A
  598/ 1D3 : 2A 91 82                           LHLD    DATAB   ;GET ADDRESS OF DATA POOL
  599/ 1D6 : 77                                 MOV     M,A     ;INITIALIZE TO 0
  600/ 1D7 : =1D7H                      XEQ     EQU     $       ;START FOR EXECUTION WITH OLD DATA
  601/ 1D7 : CD 5F 01                           CALL    IRAM    ;INITALIZE START OF RAM
  602/ 1DA : 21 95 82                           LXI     H,BEGPR-1       ;POINT 1 PRIOR TO BEGIN
  603/ 1DD : 22 8F 82                           SHLD    DATAP   ;RESTORE DATA STMT POINTER
  604/ 1E0 : 36 00                              MVI     M,0     ;RESET DATA STMT POINTER
  605/ 1E2 : 23                                 INX     H       ;POINT TO START
  606/ 1E3 : 22 70 82                           SHLD    STMT    ;SAVE IT
  607/ 1E6 : C3 03 02                           JMP     RUN2    ;GO PROCESS IT
  608/ 1E9 :                            ;
  609/ 1E9 :                            ; STATEMENTS RETURN HERE TO CONTINUE PROCESSING
  610/ 1E9 : 21 74 82                   RUN:    LXI     H,MULTI ;POINT MULTIPLE SWITCH
  611/ 1EC : 7E                                 MOV     A,M     ;GET SW
  612/ 1ED : B7                                 ORA     A       ;TEST IT
  613/ 1EE : CA F9 01                           JZ      RUN1    ;BRIF NOT ON
  614/ 1F1 : 36 00                              MVI     M,0     ;ELSE, RESET IT
  615/ 1F3 : 2A 72 82                           LHLD    ENDLI   ;GET ADDRESS
  616/ 1F6 : C3 15 02                           JMP     RUN3    ;GO PROCESS REMAIN
  617/ 1F9 : 2A 70 82                   RUN1:   LHLD    STMT    ;ELSE, GET ADDR OF PREV STMT
  618/ 1FC : 5E                                 MOV     E,M     ;GET LEN CODE
  619/ 1FD : 16 00                              MVI     D,0     ;CLEAR HIGH BYTE OF ADDR
  620/ 1FF : 19                                 DAD     D       ;INCR STMT POINTER
  621/ 200 : 22 70 82                           SHLD    STMT    ;SAVE IT
  622/ 203 : 3A 75 80                   RUN2:   LDA     RUNSW   ;GET RUN TYPE
  623/ 206 : B7                                 ORA     A       ;TEST IT
  624/ 207 : C2 D7 00                           JNZ     GETCM   ;BRIF IMMEDIATE MODE
  625/ 20A : 7E                                 MOV     A,M     ;GET LEN CODE
  626/ 20B : B7                                 ORA     A       ;TEST IF END
  627/ 20C : CA CC 01                           JZ      ENDIT   ;BRIF IS
  628/ 20F : 23                                 INX     H       ;POINT LINE NUMBER
  629/ 210 : 22 89 82                           SHLD    LINE    ;SAVE ADDR
  630/ 213 : 23                                 INX     H       ;POINT 2ND BYTE
  631/ 214 : 23                                 INX     H       ;POINT 1ST PGM BYTE
  632/ 215 :                            ;
  633/ 215 :                            ; ENTER HERE TO DO IMMEDIATE COMMAND
  634/ 215 : =>TRUE                     	IF ROMSTRT = 0
  635/ 215 : CF                         RUN3:   RST     1       ;SKIP BLANKS
  636/ 216 : =>FALSE                    	ELSE
  637/ 216 :                            RUN3:	CALL	RST1	;CALL TO RAM ADDRESS
  638/ 216 : [634]                      	ENDIF
  639/ 216 : 22 52 82                   RUN4:   SHLD    ADDR1   ;SAVE ADDR
  640/ 219 : CD 1B 1A                           CALL    TSTCC   ;GO SEE IF CONTROL-C OR O
  641/ 21C : 11 4E 1E                           LXI     D,JMPTB ;POINT TO TABLE
  642/ 21F : CD 81 1F                           CALL    SEEK1   ;GO SEARCH COMMAND TABLE
  643/ 222 : CA 2D 02                           JZ      RUN7    ;BRIF COMMAND NOT FOUND
  644/ 225 : E5                                 PUSH    H       ;SAVE H,L
  645/ 226 : 1A                                 LDAX    D       ;LOAD LOW BYTE
  646/ 227 : 6F                                 MOV     L,A     ;LOW BYTE TO L
  647/ 228 : 13                                 INX     D       ;POINT NEXT
  648/ 229 : 1A                                 LDAX    D       ;LOAD HIGH BYTE
  649/ 22A : 67                                 MOV     H,A     ;HIGH BYTE TO H
  650/ 22B : E3                                 XTHL            ;COMMAND ADDRESS TO STACK
  651/ 22C : C9                                 RET             ;JUMP TO ROUTINE
  652/ 22D : 2A 52 82                   RUN7:   LHLD    ADDR1   ;RESTORE H,L POINTER
  653/ 230 :                            ;	2018-1101 JQ - IF CAPS-LOCK IS OFF, IF IS ASSUMED
  654/ 230 :                            ;				THE INPUT BUFFER CONTAINS A 'LET'
  655/ 230 :                            ;				STATEMENT, WHICH IS SILLY. JUST ERROR!
  656/ 230 :                            ;        JMP     LET     ;ASSUME IT'S LET STMT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 12 - 9/26/2024 16:17:21


  657/ 230 : 21 5C 1D                           LXI     H,WHATL ;POINT LITERAL
  658/ 233 : CD 9E 19                           CALL    TERMM   ;GO PRINT IT
  659/ 236 : C3 D7 00                           JMP     GETCM   ;GO TO COMMAND
  660/ 239 :                            ;
  661/ 239 : =>FALSE                    	IF IMSAI
  662/ 239 :                            ; SAVE COMMAND. TURN THE PUNCH ON THEN LIST PROGRAM
  663/ 239 :                            ;
  664/ 239 :                            SAVE:   MVI     A,2     ;SET PUNCH MODE
  665/ 239 :                                    STA     TAPES
  666/ 239 :                                    MVI     A,12H   ;GET DC2 (=PUNCH ON)
  667/ 239 :                                    CALL    TESTO   ;WRITE IT
  668/ 239 :                                    CALL    HDRTL   ;GP PUT HEADER
  669/ 239 : [661]                      	ENDIF
  670/ 239 :                            ;
  671/ 239 :                            
  672/ 239 : =239H                      LIST    EQU     $
  673/ 239 :                            ;
  674/ 239 :                            ;
  675/ 239 :                            ; LIST PROCESSOR
  676/ 239 :                            ; DUMP THE SOURCE PROGRAM TO TTY OR PAPER TAPE
  677/ 239 :                            ;
  678/ 239 :                            ;
  679/ 239 : =>TRUE                     	IF ROMSTRT = 0
  680/ 239 : CF                                 RST     1       ;SKIP TO NON BLANK
  681/ 23A : =>FALSE                    	ELSE
  682/ 23A :                            		CALL	RST1	;CALL TO RAM ADDRESS
  683/ 23A : [679]                      	ENDIF
  684/ 23A : 11 00 00                           LXI     D,0     ;GET A ZERO IN D
  685/ 23D : EB                                 XCHG            ;FLIP TO H,L
  686/ 23E : 22 4B 82                           SHLD    LINEL   ;SAVE IT
  687/ 241 : 21 99 99                           LXI     H,9999H ;GET HIGH NUMBER IN H,L
  688/ 244 : 22 4D 82                           SHLD    LINEH   ;SAVE IT
  689/ 247 : EB                                 XCHG            ;FLIP BACK
  690/ 248 : B7                                 ORA     A       ;TEST IF EOL
  691/ 249 : CA 69 02                           JZ      LIST1   ;BRIF IT IS
  692/ 24C : CD 96 1A                           CALL    PACK    ;GO PACK THE NUMBER, IF ANY
  693/ 24F : 50                                 MOV     D,B     ;COPY NUMBER TO D,L
  694/ 250 : 59                                 MOV     E,C     ;SAME
  695/ 251 : EB                                 XCHG            ;FLIP TO H,L
  696/ 252 : 22 4B 82                           SHLD    LINEL   ;SAVE IT
  697/ 255 : 22 4D 82                           SHLD    LINEH   ;SAME
  698/ 258 : EB                                 XCHG            ;RESTORE H,L
  699/ 259 : =>TRUE                     	IF ROMSTRT = 0
  700/ 259 : CF                                 RST     1       ;SKIP TO NON BLANK
  701/ 25A : =>FALSE                    	ELSE
  702/ 25A :                            		CALL	RST1	;CALL TO RAM ADDRESS
  703/ 25A : [699]                      	ENDIF
  704/ 25A : FE 2C                              CPI     ','     ;TEST IF COMMA
  705/ 25C : C2 69 02                           JNZ     LIST1   ;BRIF NOT
  706/ 25F : 23                                 INX     H       ;POINT NEXT
  707/ 260 : =>TRUE                     	IF ROMSTRT = 0
  708/ 260 : CF                                 RST     1       ;SKIP TO NON-BLANK
  709/ 261 : =>FALSE                    	ELSE
  710/ 261 :                            		CALL	RST1	;CALL TO RAM ADDRESS
  711/ 261 : [707]                      	ENDIF
  712/ 261 : CD 96 1A                           CALL    PACK    ;ELSE, GO GET THE NUMBER
  713/ 264 : 60                                 MOV     H,B     ;COPY TO
  714/ 265 : 69                                 MOV     L,C     ;D,L
  715/ 266 : 22 4D 82                           SHLD    LINEH   ;SAVE IT
  716/ 269 : 21 96 82                   LIST1:  LXI     H,BEGPR ;POINT BEGINNING OF PROGRAM
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 13 - 9/26/2024 16:17:21


  717/ 26C : CD 1B 1A                   LIST2:  CALL    TSTCC   ;GO SEE IF CONTROL-C OR CONTROL-O
  718/ 26F : 7E                                 MOV     A,M     ;GET LEN CODE
  719/ 270 : B7                                 ORA     A       ;TEST IF END OF PROGRAM
  720/ 271 : CA CC 01                           JZ      ENDIT   ;BRIF END OF PGM
  721/ 274 : D6 03                              SUI     3       ;SUBTRACT THREE
  722/ 276 : 47                                 MOV     B,A     ;SAVE LEN
  723/ 277 : 23                                 INX     H       ;POINT HIGH BYTE OF LINE#
  724/ 278 : EB                                 XCHG            ;FLIP H,L TO D,E
  725/ 279 : 2A 4B 82                           LHLD    LINEL   ;GET LOW LINE TO TEST
  726/ 27C : EB                                 XCHG            ;RESTORE H,L
  727/ 27D : 7E                                 MOV     A,M     ;GET LOW BYTE OF LINE NUMBER
  728/ 27E : BA                                 CMP     D       ;COMP WITH LINEL
  729/ 27F : DA BC 02                           JC      LIST8   ;BRIF LESS
  730/ 282 : C2 8C 02                           JNZ     LIST4   ;BRIF NOT EQUAL
  731/ 285 : 23                                 INX     H       ;POINT NEXT
  732/ 286 : 7E                                 MOV     A,M     ;GET NEXT BYTE OF LINE#
  733/ 287 : 2B                                 DCX     H       ;POINT BACK
  734/ 288 : BB                                 CMP     E       ;COMP LOW BYTES
  735/ 289 : DA BC 02                           JC      LIST8   ;BRIF LESS
  736/ 28C : EB                         LIST4:  XCHG            ;SAVE H,L IN D,E
  737/ 28D : 2A 4D 82                           LHLD    LINEH   ;GET HIGH LINE FOR TEST
  738/ 290 : EB                                 XCHG            ;RESTORE H,L
  739/ 291 : 7E                                 MOV     A,M     ;GET LINE BYTE
  740/ 292 : BA                                 CMP     D       ;COMPARE HIGH BYTES
  741/ 293 : CA 9C 02                           JZ      LIST5   ;BRIF EQUAL
  742/ 296 : D2 CC 01                           JNC     ENDIT   ;BRIF HIGHER
  743/ 299 : C3 A6 02                           JMP     LIST6   ;GO AROUND
  744/ 29C : 23                         LIST5:  INX     H       ;POINT NEXT
  745/ 29D : 7E                                 MOV     A,M     ;GET NEXT BYTE
  746/ 29E : 2B                                 DCX     H       ;POINT BACK
  747/ 29F : BB                                 CMP     E       ;COMPARE LOW BYTES
  748/ 2A0 : CA A6 02                           JZ      LIST6   ;BRIF EQUAL
  749/ 2A3 : D2 CC 01                           JNC     ENDIT   ;BRIF HIGHER
  750/ 2A6 : 11 CE 80                   LIST6:  LXI     D,IOBUF ;POINT BUFFER AREA
  751/ 2A9 : CD EA 19                           CALL    LINEO   ;CONVERT LINE NUMBER
  752/ 2AC : 7E                         LIST7:  MOV     A,M     ;GET A BYTE
  753/ 2AD : 12                                 STAX    D       ;PUT IT TO BUFFER
  754/ 2AE : 13                                 INX     D       ;POINT NEXT BUFF
  755/ 2AF : 23                                 INX     H       ;POINT NEXT PROG
  756/ 2B0 : 05                                 DCR     B       ;DECR CTR
  757/ 2B1 : C2 AC 02                           JNZ     LIST7   ;LOOP
  758/ 2B4 : E5                                 PUSH    H       ;SAVE HL ADDR
  759/ 2B5 : CD 96 19                           CALL    TERMO   ;GO TYPE IT
  760/ 2B8 : E1                                 POP     H       ;RETRIEVE H ADDR
  761/ 2B9 : C3 6C 02                           JMP     LIST2   ;CONTINUE
  762/ 2BC : 58                         LIST8:  MOV     E,B     ;PUT LEN  IN E
  763/ 2BD : 16 00                              MVI     D,0     ;CLEAR D
  764/ 2BF : 19                                 DAD     D       ;POINT NEXT STMT
  765/ 2C0 : 23                                 INX     H       ;POINT NEXT
  766/ 2C1 : 23                                 INX     H       ;POINT LEN CODE
  767/ 2C2 : C3 6C 02                           JMP     LIST2   ;GO LIST IT
  768/ 2C5 :                            ;
  769/ 2C5 :                            ;
  770/ 2C5 : =2C5H                      CONTI   EQU     $
  771/ 2C5 :                            ;
  772/ 2C5 :                            ; CONTINUE EXECUTION AT STATEMENT FOLLOWING STOP OR AT
  773/ 2C5 :                            ; STATEMENT THAT WAS INTERRUPTED WHEN CONTROL-C WAS TYPED
  774/ 2C5 :                            ;
  775/ 2C5 :                            ;
  776/ 2C5 : 21 77 80                           LXI     H,LINEN ;POINT LINE NUMBER OF LAST STOP/ERROR/
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 14 - 9/26/2024 16:17:21


  777/ 2C8 : 7E                                 MOV     A,M     ;GET 1ST CHAR
  778/ 2C9 : B7                                 ORA     A       ;TEST IF IMMED CMMD
  779/ 2CA : CA C8 05                           JZ      LET     ;BRIF IF IMMED CMMD
  780/ 2CD :                            ;
  781/ 2CD :                            ;
  782/ 2CD :                            ;
  783/ 2CD :                            ; STMT:  GOTO NNNN
  784/ 2CD :                            ;
  785/ 2CD :                            ;
  786/ 2CD : AF                         GOTO:   XRA     A       ;CLEAR REG A
  787/ 2CE : 32 76 80                           STA     EDSW    ;RESET IMMED MODE (IF IT WAS SET)
  788/ 2D1 : 32 75 80                           STA     RUNSW   ;AND RUN TYPE
  789/ 2D4 : CD 8E 1A                           CALL    NOTEO   ;ERROR IF END-OF-LINE
  790/ 2D7 : CD 96 1A                           CALL    PACK    ;GO GET LINE NUMBER IN B,C
  791/ 2DA : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
  792/ 2DD : CD 59 1F                   GOTO2:  CALL    LOCAT   ;GO SEARCH FOR REQUESTED LINE #
  793/ 2E0 : DA E4 1B                           JC      ULERR   ;BRIF NOT FOUND
  794/ 2E3 : 22 70 82                           SHLD    STMT    ;SAVE ADDR
  795/ 2E6 : AF                                 XRA     A       ;GET A ZERO
  796/ 2E7 : 32 74 82                           STA     MULTI   ;TURN OFF MULTIPLE STMTS
  797/ 2EA : C3 03 02                           JMP     RUN2    ;GO PROCESS THE STATEMENT
  798/ 2ED :                            ;
  799/ 2ED :                            ;
  800/ 2ED :                            ; STMT: RESTORE
  801/ 2ED :                            ;
  802/ 2ED : CD 75 1A                   RESTO:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
  803/ 2F0 : 21 95 82                           LXI     H,BEGPR-1       ;POINT 1 BEFORE START OF PROGRAM
  804/ 2F3 : 22 8F 82                           SHLD    DATAP   ;FORCE NEXT DATA TO BE AT START
  805/ 2F6 : C3 E9 01                           JMP     RUN     ;GO NEXT STMT
  806/ 2F9 :                            ;
  807/ 2F9 :                            ;
  808/ 2F9 :                            ; STMT:  RETURN
  809/ 2F9 :                            ;
  810/ 2F9 : CD 75 1A                   RETUR:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
  811/ 2FC : F1                                 POP     PSW     ;POP THE STACK
  812/ 2FD : FE FF                              CPI     0FFH    ;TEST IF GOSUB IN EFFECT
  813/ 2FF : C2 F4 1B                           JNZ     RTERR   ;BRIF ERROR
  814/ 302 : E1                                 POP     H       ;GET RETURNED STATMENT ADDRESS
  815/ 303 : 22 70 82                           SHLD    STMT    ;RESTORE
  816/ 306 : E1                                 POP     H       ;GET ENDLINE VALUE
  817/ 307 : 22 72 82                           SHLD    ENDLI   ;RESTORE
  818/ 30A : F1                                 POP     PSW     ;GET MULTI SW VALUE
  819/ 30B : 32 74 82                           STA     MULTI   ;RESTORE
  820/ 30E : C3 E9 01                           JMP     RUN     ;CONTINUE (AT STMT FOLLOWING GOSUB)
  821/ 311 :                            ;
  822/ 311 :                            ;
  823/ 311 :                            ; STMT:  GOSUB NNNN
  824/ 311 :                            ;
  825/ 311 : CD 8E 1A                   GOSUB:  CALL    NOTEO   ;ERROR IF END-OF-LINE
  826/ 314 : CD 96 1A                           CALL    PACK    ;GET LINE NUMBER
  827/ 317 : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
  828/ 31A : 3A 74 82                   GOSU1:  LDA     MULTI   ;GET SW SETTING
  829/ 31D : F5                                 PUSH    PSW     ;SAVE ON STACK
  830/ 31E : 2A 72 82                           LHLD    ENDLI   ;GET ADDR OF END OF STMT
  831/ 321 : E5                                 PUSH    H       ;SAVE ONE STACK
  832/ 322 : 2A 70 82                           LHLD    STMT    ;GET STATEMENT ADDRESS
  833/ 325 : E5                                 PUSH    H       ;SAVE RETURN ADDRESS IN STACK
  834/ 326 : 3E FF                              MVI     A,0FFH  ;MARK AS GOSUB
  835/ 328 : F5                                 PUSH    PSW     ;SAVE STATUS
  836/ 329 : C3 DD 02                           JMP     GOTO2   ;GO LOOKUP LINE AND BRANCH
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 15 - 9/26/2024 16:17:21


  837/ 32C :                            ;
  838/ 32C : =32CH                      PRINT   EQU     $
  839/ 32C :                            ;
  840/ 32C :                            ;
  841/ 32C :                            ; STMT: PRINT ....
  842/ 32C :                            ;
  843/ 32C :                            ;
  844/ 32C : AF                                 XRA     A       ;CLEAR REG A
  845/ 32D : 32 8D 82                   PRIN4:  STA     PRSW    ;SET SW TO SAY CRLF AT END OF LINE
  846/ 330 : 11 CE 80                           LXI     D,IOBUF ;POINT BUFFER
  847/ 333 : =>TRUE                     	IF ROMSTRT = 0
  848/ 333 : CF                                 RST     1       ;SKIP TO NEXT FIELD
  849/ 334 : =>FALSE                    	ELSE
  850/ 334 :                            		CALL	RST1	;CALL TO RAM ADDRESS
  851/ 334 : [847]                      	ENDIF
  852/ 334 : CD 89 1A                           CALL    TSTEL   ;TEST IF END OF STMT
  853/ 337 : CA AA 03                           JZ      PRINC   ;BRIF IT IS
  854/ 33A : FE 2C                              CPI     ','     ;TEST IF COMMA
  855/ 33C : CA 81 03                           JZ      PRIN8   ;BRIF IT IS
  856/ 33F : FE 3B                              CPI     ';'     ;TEST IF SEMI-COLON
  857/ 341 : CA 84 03                           JZ      PRIN9   ;BRIF IT IS
  858/ 344 : D5                                 PUSH    D       ;SAVE D,E
  859/ 345 : E5                                 PUSH    H       ;SAVE H,L
  860/ 346 : 11 8B 1D                           LXI     D,TABLI ;POINT LITERAL
  861/ 349 : =>TRUE                     	IF ROMSTRT = 0
  862/ 349 : D7                                 RST     2       ;GO SEE IF TAB(XX)
  863/ 34A : =>FALSE                    	ELSE
  864/ 34A :                            		CALL	RST2	;CALL TO RAM ADDRESS
  865/ 34A : [861]                      	ENDIF
  866/ 34A : CA 8A 03                           JZ      PRINA   ;BRIF IS
  867/ 34D : E1                                 POP     H       ;ELSE, RESTORE H,L
  868/ 34E : CD 57 0F                           CALL    EXPR    ;GO EVALUATE EXPRESSION
  869/ 351 : D1                                 POP     D       ;RESTORE D,E
  870/ 352 : E5                                 PUSH    H       ;SAVE H,L
  871/ 353 : EB                                 XCHG            ;FLIP/FLOP
  872/ 354 : 3A 8E 82                           LDA     NS      ;GET TYPE OF RESULT
  873/ 357 : FE E7                              CPI     0E7H    ;TEST IF STRING
  874/ 359 : CA 6D 03                           JZ      PRIN5   ;BRIF IS
  875/ 35C : CD C7 14                           CALL    FOUT    ;GO CONVERT OUTPUT
  876/ 35F : 23                                 INX     H       ;POINT NEXT
  877/ 360 : EB                         PRIN7:  XCHG            ;FLIP/FLOP: END ADDR TO DE
  878/ 361 : E1                                 POP     H       ;RESTORE H,L
  879/ 362 :                            ;HERE AFTER SETTING UP VALUE TO PRINT IN BUFFER
  880/ 362 : 3E FE                      PRIN2:  MVI A,0FEH      ;SET END CODE=NO CRLF
  881/ 364 : 12                                 STAX D          ;PUT TO BUFFER
  882/ 365 : E5                                 PUSH H          ;SAVE H,L
  883/ 366 : CD 96 19                           CALL TERMO      ;GO PRINT BUFFER
  884/ 369 : E1                                 POP H           ;RESTORE HL
  885/ 36A : C3 2C 03                           JMP PRINT       ;REPEAT FOR NEXT FIELD
  886/ 36D :                            ;
  887/ 36D : 11 20 81                   PRIN5:  LXI     D,STRIN ;POINT STRING
  888/ 370 : 1A                                 LDAX    D       ;GET LEN
  889/ 371 : B7                                 ORA     A       ;TEST IT
  890/ 372 : CA 60 03                           JZ      PRIN7   ;BRIF NULL
  891/ 375 : 47                                 MOV     B,A     ;SAVE LEN
  892/ 376 : 13                         PRIN6:  INX     D       ;POINT NEXT
  893/ 377 : 1A                                 LDAX    D       ;GET A BYTE
  894/ 378 : 77                                 MOV     M,A     ;STORE IT
  895/ 379 : 23                                 INX     H       ;POINT NEXT
  896/ 37A : 05                                 DCR     B       ;DECR CTR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 16 - 9/26/2024 16:17:21


  897/ 37B : C2 76 03                           JNZ     PRIN6   ;LOOP
  898/ 37E : C3 60 03                           JMP PRIN7       ;DIDDLE DE, HL AND CONTINUE
  899/ 381 :                            ;
  900/ 381 : CD C0 19                   PRIN8:  CALL    TABST   ;GO POSITION NEXT TAB
  901/ 384 : 23                         PRIN9:  INX     H       ;PRINT NEXT
  902/ 385 : 3E 01                              MVI     A,1     ;GET SETTTING FOR SW
  903/ 387 : C3 2D 03                           JMP     PRIN4   ;GO STORE A IN PRSW & DO NEXT FIELD
  904/ 38A : D1                         PRINA:  POP     D       ;GET RID OF STACK ENTRY
  905/ 38B : CD 57 0F                           CALL    EXPR    ;GO EVALUATE
  906/ 38E : E5                                 PUSH    H       ;SAVE H,L
  907/ 38F : CD 47 1C                           CALL    FBIN    ;CONVERT TO BINARY
  908/ 392 : F5                                 PUSH    PSW     ;SAVE SPECIFIED COLUMN
  909/ 393 : 21 76 82                           LXI     H,COLUM ;POINT CURRENT POSITION
  910/ 396 : 96                                 SUB     M       ;SUBTRACT (LEAVES NUMBER OF FILLS)
  911/ 397 : FC 35 19                           CM      CRLF    ;NEXT LINE IF ALREADY PAST
  912/ 39A : F1                                 POP     PSW     ;RESTORE COL
  913/ 39B : 96                                 SUB     M       ;GET NUMBER FILLS
  914/ 39C : E1                                 POP     H
  915/ 39D : D1                                 POP     D
  916/ 39E : 47                                 MOV     B,A     ;SAVE COUNT
  917/ 39F : 3E 20                              MVI     A,' '   ;GET FILL
  918/ 3A1 : CA 62 03                   PRINB:  JZ      PRIN2   ;BRIF COUNT ZERO
  919/ 3A4 : 12                                 STAX    D       ;PUT ONE SPACE
  920/ 3A5 : 13                                 INX     D       ;POINT NEXT
  921/ 3A6 : 05                                 DCR     B       ;DECR CTR
  922/ 3A7 : C3 A1 03                           JMP     PRINB   ;LOOP
  923/ 3AA :                            ;
  924/ 3AA : CD 75 1A                   PRINC:  CALL EOL        ;SAVE EOL POSITION
  925/ 3AD :                            ;HERE TO PRINT FINAL CR/LF (OR NOT) AND GO TO NEXT STATEMENT
  926/ 3AD : 3A 8D 82                           LDA     PRSW    ;GET SWITCH
  927/ 3B0 : 47                                 MOV     B,A     ;SAVE ,; SWITCH
  928/ 3B1 : 3A 73 80                           LDA     OUTSW   ;GET CONTROL-O SWITCH
  929/ 3B4 : B7                                 ORA     A       ;TEST IF ^O IN EFFECT
  930/ 3B5 : B0                                 ORA     B       ;AND IF STATEMENT ENDED IN , OR ;
  931/ 3B6 : CC 35 19                           CZ      CRLF    ;CRLF IF NEITHER
  932/ 3B9 : C3 E9 01                           JMP     RUN     ;CONTINUE NEXT STATEMENT
  933/ 3BC :                            ;
  934/ 3BC : =3BCH                      FOR     EQU     $
  935/ 3BC :                            ;
  936/ 3BC :                            ;
  937/ 3BC :                            ;  STMT:  FOR VAR = EXPR TO EXPR [STEP EXPR]
  938/ 3BC :                            ;
  939/ 3BC :                            ;
  940/ 3BC :                            ;  FIRST EVALUATE ARGUMENTS AND STORE POINTERS AND VALUES,
  941/ 3BC :                            ;  BUT DO NOT MAKE TABLE ENTRY YET
  942/ 3BC : CD AA 1B                           CALL    VAR     ;NEXT WORD MUST BE VARIABLE
  943/ 3BF : EB                                 XCHG            ;FLIP/FLOP
  944/ 3C0 : 22 23 82                           SHLD    INDX    ;SAVE VARIABLE NAME
  945/ 3C3 : EB                                 XCHG            ;FLIP/FLOP AGAIN
  946/ 3C4 : FE 3D                              CPI     '='     ;TEST FOR EQUAL SIGN
  947/ 3C6 : C2 F0 1B                           JNZ     SNERR   ;BRIF NO EQUAL
  948/ 3C9 : 23                                 INX     H       ;POINT NEXT
  949/ 3CA : CD 57 0F                           CALL    EXPR    ;GO EVALUATE EXPR, IF ANY
  950/ 3CD : EB                                 XCHG            ;FLIP/FLOP AGAIN
  951/ 3CE : 2A 23 82                           LHLD    INDX    ;GET INDEX NAME
  952/ 3D1 : EB                                 XCHG            ;FLIP/FLOP
  953/ 3D2 : E5                                 PUSH    H       ;SAVE H,L
  954/ 3D3 : CD 15 1B                           CALL    SEARC   ;GO LOCATE NAME
  955/ 3D6 : EB                                 XCHG            ;PUT ADDR IN H,L
  956/ 3D7 : 22 52 82                           SHLD    ADDR1   ;SAVE ADDR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 17 - 9/26/2024 16:17:21


  957/ 3DA : =>TRUE                     	IF ROMSTRT = 0
  958/ 3DA : DF                                 RST     3       ;GO STORE THE VALUE
  959/ 3DB : =>FALSE                    	ELSE
  960/ 3DB :                            		CALL	RST3	;GO STORE THE VALUE
  961/ 3DB : [957]                      	ENDIF
  962/ 3DB : E1                                 POP     H       ;RESTORE POINTER TO STMT
  963/ 3DC : 11 C0 1E                           LXI     D,TOLIT ;GET LIT ADDR
  964/ 3DF : =>TRUE                     	IF ROMSTRT = 0
  965/ 3DF : D7                                 RST     2       ;GO COMPARE
  966/ 3E0 : =>FALSE                    	ELSE
  967/ 3E0 :                            		CALL	RST2	;GO COMPARE
  968/ 3E0 : [964]                      	ENDIF
  969/ 3E0 : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
  970/ 3E3 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE TO-EXPR
  971/ 3E6 : E5                                 PUSH    H       ;SAVE H,L
  972/ 3E7 : 21 27 82                           LXI     H,TVAR1 ;POINT 'TO' VALUE
  973/ 3EA : =>TRUE                     	IF ROMSTRT = 0
  974/ 3EA : DF                                 RST     3       ;GO STORE THE VALUE
  975/ 3EB : =>FALSE                    	ELSE
  976/ 3EB :                            		CALL	RST3	;GO STORE THE VALUE
  977/ 3EB : [973]                      	ENDIF
  978/ 3EB : 21 EC 1D                           LXI     H,ONE   ;POINT CONSTANT: 1
  979/ 3EE : =>TRUE                     	IF ROMSTRT = 0
  980/ 3EE : EF                                 RST     5       ;LOAD IT
  981/ 3EF : =>FALSE                    	ELSE
  982/ 3EF :                            		CALL	RST5	;LOAD IT
  983/ 3EF : [979]                      	ENDIF
  984/ 3EF : E1                                 POP     H       ;GET H,L
  985/ 3F0 : 7E                                 MOV     A,M     ;GET THE CHAR
  986/ 3F1 : B7                                 ORA     A       ;TEST FOR END OF STATEMENT
  987/ 3F2 : CA 05 04                           JZ      FOR2    ;BRIF NO STEP
  988/ 3F5 : E5                                 PUSH    H       ;RE-SAVE
  989/ 3F6 : 11 8F 1D                           LXI     D,STEPL ;TEST FOR LIT 'STEP'
  990/ 3F9 : =>TRUE                     	IF ROMSTRT = 0
  991/ 3F9 : D7                                 RST     2       ;GO COMPARE
  992/ 3FA : =>FALSE                    	ELSE
  993/ 3FA :                            		CALL	RST2	;GO COMPARE
  994/ 3FA : [990]                      	ENDIF
  995/ 3FA : CA 01 04                           JZ      FOR1    ;BRIF STEP
  996/ 3FD : E1                                 POP     H       ;RESTORE H,L
  997/ 3FE : C3 05 04                           JMP     FOR2    ;GO NO STEP VALUE
  998/ 401 : D1                         FOR1:   POP     D       ;POP OFF THE STACK
  999/ 402 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE EXPRESSION
 1000/ 405 : E5                         FOR2:   PUSH    H       ;SAVE H,L TO END OF STATEMENT
 1001/ 406 : 21 2B 82                           LXI     H,TVAR2 ;POINT STEP VALUE
 1002/ 409 : =>TRUE                     	IF ROMSTRT = 0
 1003/ 409 : DF                                 RST     3       ;GO STORE THE VALUE
 1004/ 40A : =>FALSE                    	ELSE
 1005/ 40A :                            		CALL	RST3	;GO STORE THE VALUE
 1006/ 40A : [1002]                     	ENDIF
 1007/ 40A : E1                                 POP     H       ;RESTORE H,L
 1008/ 40B : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
 1009/ 40E :                            ; DETERMINE WHETHER LOOP IS TO BE EXECUTED AT ALL
 1010/ 40E :                            ; (IF VALUE > "TO" VALUE AND STEP POSITIVE,
 1011/ 40E :                            ;    JUST SKIP TO NEXT, ETC)
 1012/ 40E : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 1013/ 411 : F5                                 PUSH    PSW     ;SAVE A,STATUS
 1014/ 412 : 21 27 82                           LXI     H,TVAR1 ;GET END VALUE
 1015/ 415 : =>TRUE                     	IF ROMSTRT = 0
 1016/ 415 : EF                                 RST     5       ;LOAD IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 18 - 9/26/2024 16:17:21


 1017/ 416 : =>FALSE                    	ELSE
 1018/ 416 :                            		CALL	RST5	;LOAD IT
 1019/ 416 : [1015]                     	ENDIF
 1020/ 416 : F1                                 POP     PSW     ;RESTORE STATUS
 1021/ 417 : F2 29 04                           JP      FOR4    ;BRIF FOR IS POSITIVE
 1022/ 41A : 2A 52 82                           LHLD    ADDR1   ;GET ADDRESS OF INDEX
 1023/ 41D : CD E3 16                           CALL    FSUB    ;COMPARE THIS AGAINST END VALUE
 1024/ 420 : CA 35 04                           JZ      FOR5    ;BRIF START = END
 1025/ 423 : FA 35 04                           JM      FOR5    ;BRIF START > END
 1026/ 426 : C3 89 04                           JMP     FOR9    ;GO LOCATE MATCHING NEXT
 1027/ 429 : 2A 52 82                   FOR4:   LHLD    ADDR1   ;GET ADDRESS OF INDEX
 1028/ 42C : CD E3 16                           CALL    FSUB    ;COMPARE
 1029/ 42F : CA 35 04                           JZ      FOR5    ;BRIF START = END
 1030/ 432 : FA 89 04                           JM      FOR9    ;BRIF START > END: SKIP TO "NEXT"
 1031/ 435 :                            ; LOOP IS TO BE EXECUTED AT LEAST ONCE:
 1032/ 435 :                            ; NEED AN ENTRY IN FOR-NEXT TABLE.
 1033/ 435 :                            ; SEE IF THERE IS ALREADY ENTRY FOR THIS VARIABLE
 1034/ 435 :                            ; (IE PROGRAM JUMPED OUT OF LOOP EARLIER)
 1035/ 435 : 11 00 80                   FOR5:   LXI     D,FORNE ;POINT TABLE
 1036/ 438 : 2A 23 82                           LHLD    INDX    ;GET INDEX VARIABLE NAME
 1037/ 43B : EB                                 XCHG            ;FLIP/FLOP
 1038/ 43C : 7E                                 MOV     A,M     ;GET COUNT OF ENTRIES NOW IN TABLE
 1039/ 43D : 47                                 MOV     B,A     ;STORE IT
 1040/ 43E : 0E 01                              MVI     C,1     ;NEW CTR
 1041/ 440 : B7                                 ORA     A       ;TEST IF ZERO
 1042/ 441 : 23                                 INX     H       ;POINT
 1043/ 442 : CA 58 04                           JZ      FOR8    ;BRIF TABLE EMPTY
 1044/ 445 : 7E                         FOR6:   MOV     A,M     ;GET 1ST BYTE OF TABLE VARIABLE
 1045/ 446 : BA                                 CMP     D       ;TEST IF EQUAL TO THIS FOR'S INDEX
 1046/ 447 : C2 51 04                           JNZ     FOR7    ;BRIF NOT
 1047/ 44A : 23                                 INX     H       ;POINT NEXT
 1048/ 44B : 7E                                 MOV     A,M     ;GET NEXT BYTE
 1049/ 44C : 2B                                 DCX     H       ;POINT BACK
 1050/ 44D : BB                                 CMP     E       ;TEST IF EQUAL
 1051/ 44E : CA 58 04                           JZ      FOR8    ;BRIF EQUAL
 1052/ 451 :                            FOR7:
 1053/ 451 : =>TRUE                     	IF ROMSTRT = 0
 1054/ 451 : E7                         		RST     4       ;ADJUST H,L
 1055/ 452 : =>FALSE                    	ELSE
 1056/ 452 :                            		CALL	RST4	;ADJUST H,L
 1057/ 452 : [1053]                     	ENDIF
 1058/ 452 : 0E                                 DB      14
 1059/ 453 : 0C                                 INR     C       ;COUNT IT
 1060/ 454 : 05                                 DCR     B       ;DECR CTR
 1061/ 455 : C2 45 04                           JNZ     FOR6    ;LOOP
 1062/ 458 :                            ; ENTER THIS FOR IN TABLE (WHERE HL POINTS)
 1063/ 458 : 79                         FOR8:   MOV     A,C     ;GET UDPATE COUNT
 1064/ 459 : FE 09                              CPI     9       ;TEST IF TBL EXCEEDED
 1065/ 45B : D2 FC 1B                           JNC     NXERR   ;ERROR IF MORE THAN 8 OPEN FOR/NEXT
 1066/ 45E : 32 00 80                           STA     FORNE   ;PUT IN TABLE
 1067/ 461 : 72                                 MOV     M,D     ;HI BYTE INDEX VARIABLE NAME
 1068/ 462 : 23                                 INX     H       ;POINT NEXT
 1069/ 463 : 73                                 MOV     M,E     ;STORE LO BYTE
 1070/ 464 : 23                                 INX     H       ;POINT NEXT
 1071/ 465 : E5                                 PUSH    H       ;SAVE H,L
 1072/ 466 : 21 2B 82                           LXI     H,TVAR2 ;POINT STEP VALUE
 1073/ 469 : =>TRUE                     	IF ROMSTRT = 0
 1074/ 469 : EF                                 RST     5       ;LOAD IT
 1075/ 46A : =>FALSE                    	ELSE
 1076/ 46A :                            		CALL	RST5	;LOAD IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 19 - 9/26/2024 16:17:21


 1077/ 46A : [1073]                     	ENDIF
 1078/ 46A : E1                                 POP     H       ;RESTORE H,L
 1079/ 46B : =>TRUE                     	IF ROMSTRT = 0
 1080/ 46B : DF                                 RST     3       ;GO STORE THE VALUE
 1081/ 46C : =>FALSE                    	ELSE
 1082/ 46C :                            		CALL	RST3	;GO STORE THE VALUE
 1083/ 46C : [1079]                     	ENDIF
 1084/ 46C : E5                                 PUSH    H       ;SAVE H,L
 1085/ 46D : 21 27 82                           LXI     H,TVAR1 ;POINT 'TO' VALUE
 1086/ 470 : =>TRUE                     	IF ROMSTRT = 0
 1087/ 470 : EF                                 RST     5       ;LOAD IT
 1088/ 471 : =>FALSE                    	ELSE
 1089/ 471 :                            		CALL	RST5	;LOAD IT
 1090/ 471 : [1086]                     	ENDIF
 1091/ 471 : E1                                 POP     H       ;RESTORE H,L
 1092/ 472 : =>TRUE                     	IF ROMSTRT = 0
 1093/ 472 : DF                                 RST     3       ;GO STORE THE VALUE
 1094/ 473 : =>FALSE                    	ELSE
 1095/ 473 :                            		CALL	RST3	;GO STORE THE VALUE
 1096/ 473 : [1092]                     	ENDIF
 1097/ 473 : EB                                 XCHG            ;FLIP/FLOP
 1098/ 474 : 2A 72 82                           LHLD    ENDLI   ;GET END ADDR
 1099/ 477 : 2B                                 DCX     H       ;POINT ONE PRIOR
 1100/ 478 : EB                                 XCHG            ;FLIP BACK
 1101/ 479 : 72                                 MOV     M,D     ;STORE IT
 1102/ 47A : 23                                 INX     H       ;POINT NEXT
 1103/ 47B : 73                                 MOV     M,E     ;STORE IT
 1104/ 47C : 23                                 INX     H       ;POINT NEXT
 1105/ 47D : 3A 71 82                           LDA     STMT+1  ;GET HIGH STMT ADDR
 1106/ 480 : 77                                 MOV     M,A     ;PUT IT
 1107/ 481 : 23                                 INX     H       ;POINT NEXT
 1108/ 482 : 3A 70 82                           LDA     STMT    ;GET LOW STMT ADDR
 1109/ 485 : 77                                 MOV     M,A     ;PUT IT
 1110/ 486 : C3 E9 01                           JMP     RUN     ;CONTINUE
 1111/ 489 :                            ;
 1112/ 489 :                            ; IF HERE, THIS LOOP IS TO BE EXECUTED ZERO TIMES:
 1113/ 489 :                            ; SCAN THRU PROGRAM TO FIND MATCHING "NEXT".
 1114/ 489 :                            ; THIS CODE WILL FAIL IF USER'S PROGRAM IS TOO
 1115/ 489 :                            ; COMPLEX SINCE IT WON'T FOLLOW GOTO'S, IF'S, ETC.
 1116/ 489 : 2A 70 82                   FOR9:   LHLD    STMT    ;GET ADDRESS OF STATMENT
 1117/ 48C : 5E                                 MOV     E,M     ;GET LENGTH CODE
 1118/ 48D : 16 00                              MVI     D,0     ;INIT INCREMENT
 1119/ 48F : 19                                 DAD     D       ;COMPUTE ADDR OF NEXT STATEMENT
 1120/ 490 : 7E                                 MOV     A,M     ;GET NEW LEN CODE
 1121/ 491 : B7                                 ORA     A       ;SEE IF END OF PGM
 1122/ 492 : CA FC 1B                           JZ      NXERR   ;BRIF IT IS
 1123/ 495 : 22 70 82                           SHLD    STMT    ;SAVE ADDRESS
 1124/ 498 : =>TRUE                     	IF ROMSTRT = 0
 1125/ 498 : E7                         		RST     4       ;ADJUST H,L
 1126/ 499 : =>FALSE                    	ELSE
 1127/ 499 :                            		CALL	RST4	;ADJUST H,L
 1128/ 499 : [1124]                     	ENDIF
 1129/ 499 : 03                                 DB      3
 1130/ 49A : =>TRUE                     	IF ROMSTRT = 0
 1131/ 49A : CF                                 RST     1       ;SKIP SPACES
 1132/ 49B : =>FALSE                    	ELSE
 1133/ 49B :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1134/ 49B : [1130]                     	ENDIF
 1135/ 49B : 11 96 1E                           LXI     D,NEXTL ;POINT 'NEXT'
 1136/ 49E : =>TRUE                     	IF ROMSTRT = 0
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 20 - 9/26/2024 16:17:21


 1137/ 49E : D7                                 RST     2       ;GO COMPARE
 1138/ 49F : =>FALSE                    	ELSE
 1139/ 49F :                            		CALL	RST2	;GO COMPARE
 1140/ 49F : [1136]                     	ENDIF
 1141/ 49F : C2 89 04                           JNZ     FOR9    ;LOOP IF NOT
 1142/ 4A2 : =>TRUE                     	IF ROMSTRT = 0
 1143/ 4A2 : CF                                 RST     1       ;SKIP SPACES
 1144/ 4A3 : =>FALSE                    	ELSE
 1145/ 4A3 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1146/ 4A3 : [1142]                     	ENDIF
 1147/ 4A3 : 3A 24 82                           LDA     INDX+1  ;GET FIRST CHAR
 1148/ 4A6 : BE                                 CMP     M       ;COMPARE
 1149/ 4A7 : C2 89 04                           JNZ     FOR9    ;BRIF NOT MATCH NEXT
 1150/ 4AA : 3A 23 82                           LDA     INDX    ;GET 2ND CHAR
 1151/ 4AD : 23                                 INX     H       ;DITTO
 1152/ 4AE : FE 20                              CPI     ' '     ;SEE IF SINGLE CHAR
 1153/ 4B0 : CA B7 04                           JZ      FORA    ;BRIF IT IS
 1154/ 4B3 : BE                                 CMP     M       ;COMPARE THE TWO
 1155/ 4B4 : C2 89 04                           JNZ     FOR9    ;BRIF NOT EQUAL
 1156/ 4B7 : =>TRUE                     	IF ROMSTRT = 0
 1157/ 4B7 : CF                         FORA:   RST     1       ;SKIP TO END (HOPEFULLY)
 1158/ 4B8 : =>FALSE                    	ELSE
 1159/ 4B8 :                            FORA:	CALL	RST1	;CALL TO RAM ADDRESS
 1160/ 4B8 : [1156]                     	ENDIF
 1161/ 4B8 : 7E                                 MOV     A,M     ;GET THE NON BLANK
 1162/ 4B9 : B7                                 ORA     A       ;SEE IF END
 1163/ 4BA : C2 89 04                           JNZ     FOR9    ;BRIF END
 1164/ 4BD : C3 E9 01                           JMP     RUN     ;ELSE, GO NEXT STMT
 1165/ 4C0 :                            ;
 1166/ 4C0 : =4C0H                      IFSTM   EQU     $
 1167/ 4C0 :                            ;
 1168/ 4C0 :                            ;
 1169/ 4C0 :                            ; STMT: IF EXPR RELATION EXPR THEN STMT#
 1170/ 4C0 :                            ;
 1171/ 4C0 :                            ;
 1172/ 4C0 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE LEFT EXPR
 1173/ 4C3 : E5                                 PUSH    H       ;SAVE H,L
 1174/ 4C4 : 3A 8E 82                           LDA     NS      ;GET TYPE CODE
 1175/ 4C7 : 32 26 82                           STA     IFTYP   ;SAVE IT
 1176/ 4CA : FE E7                              CPI     0E7H    ;TEST IF STRING
 1177/ 4CC : C2 DE 04                           JNZ     IF1     ;BRIF NOT
 1178/ 4CF : 21 CE 80                           LXI     H,IOBUF ;POINT BUFFER
 1179/ 4D2 : 11 20 81                           LXI     D,STRIN ;POINT RESULT
 1180/ 4D5 : 1A                                 LDAX    D       ;GET LEN
 1181/ 4D6 : 3C                                 INR     A       ;PLUS ONE
 1182/ 4D7 : 47                                 MOV     B,A     ;SAVE IT
 1183/ 4D8 : CD 2E 1C                           CALL    COPYD   ;GO MOVE IT
 1184/ 4DB : C3 E2 04                           JMP     IF2     ;GO AROUND
 1185/ 4DE : 21 27 82                   IF1:    LXI     H,TVAR1 ;GET ADDR OF TEMP STORAGE
 1186/ 4E1 : =>TRUE                     	IF ROMSTRT = 0
 1187/ 4E1 : DF                                 RST     3       ;GO STORE THE VALUE
 1188/ 4E2 : =>FALSE                    	ELSE
 1189/ 4E2 :                            		CALL	RST3	;GO STORE THE VALUE
 1190/ 4E2 : [1186]                     	ENDIF
 1191/ 4E2 : E1                         IF2:    POP     H       ;RESTORE H,L
 1192/ 4E3 : AF                                 XRA     A       ;CLEAR A
 1193/ 4E4 : 4F                                 MOV     C,A     ;SAVE IN REG C
 1194/ 4E5 : 47                                 MOV     B,A     ;INIT REG
 1195/ 4E6 : 7E                         IF3:    MOV     A,M     ;GET OPERATOR
 1196/ 4E7 : 04                                 INR     B       ;COUNT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 21 - 9/26/2024 16:17:21


 1197/ 4E8 : FE 3D                              CPI     '='     ;TEST FOR EQUAL
 1198/ 4EA : C2 EF 04                           JNZ     IF4     ;BRIF IT IS NOT
 1199/ 4ED : 0C                                 INR     C       ;ADD 1 TO C
 1200/ 4EE : 23                                 INX     H       ;POINT NEXT
 1201/ 4EF : FE 3E                      IF4:    CPI     '>'     ;TEST FOR GREATER THAN
 1202/ 4F1 : C2 F7 04                           JNZ     IF5     ;BRIF IT IS NOT
 1203/ 4F4 : 0C                                 INR     C       ;ADD TWO
 1204/ 4F5 : 0C                                 INR     C       ;TO REL CODE
 1205/ 4F6 : 23                                 INX     H       ;POINT NEXT
 1206/ 4F7 : FE 3C                      IF5:    CPI     '<'     ;TEST FOR LESS THAN
 1207/ 4F9 : C2 01 05                           JNZ     IF6     ;BRIF IT IS NOT
 1208/ 4FC : 79                                 MOV     A,C     ;GET REL CODE
 1209/ 4FD : C6 04                              ADI     4       ;PLUS FOUR
 1210/ 4FF : 4F                                 MOV     C,A     ;PUT BACK
 1211/ 500 : 23                                 INX     H       ;POINT NEXT
 1212/ 501 : 79                         IF6:    MOV     A,C     ;GET REL CODE
 1213/ 502 : B7                                 ORA     A       ;TEST IT
 1214/ 503 : C5                                 PUSH    B       ;SAVE B,C
 1215/ 504 : CA F0 1B                           JZ      SNERR   ;BRIF SOME ERROR
 1216/ 507 : C1                                 POP     B       ;RESTORE B,C
 1217/ 508 : 32 25 82                           STA     REL     ;SAVE CODE
 1218/ 50B : 78                                 MOV     A,B     ;GET COUNT
 1219/ 50C : FE 02                              CPI     2       ;TEST FOR TWO
 1220/ 50E : C2 E6 04                           JNZ     IF3     ;SEE IF MULTIPLE RELATION
 1221/ 511 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE RIGHT SIDE
 1222/ 514 : 22 52 82                           SHLD    ADDR1   ;SAVE LOCATION OF THEN (IF ANY)
 1223/ 517 : 3A 8E 82                           LDA     NS      ;GET TYPE CODE
 1224/ 51A : 21 26 82                           LXI     H,IFTYP ;POINT LEFT TYPE
 1225/ 51D : BE                                 CMP     M       ;COMPARE
 1226/ 51E : C2 F0 1B                           JNZ     SNERR   ;BRIF MIXED
 1227/ 521 : FE E7                              CPI     0E7H    ;TEST IF STRING
 1228/ 523 : CA 7F 05                           JZ      IFF     ;BRIF IS
 1229/ 526 : 21 27 82                           LXI     H,TVAR1 ;POINT LEFT
 1230/ 529 : CD E3 16                           CALL    FSUB    ;SUBTRACT LEFT FROM RIGHT
 1231/ 52C : 3A 25 82                           LDA     REL     ;GET RELATION
 1232/ 52F : 1F                                 RAR             ;TEST BIT D0
 1233/ 530 : D2 39 05                           JNC     IF8     ;BRIF NO EQUAL TEST
 1234/ 533 : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 1235/ 536 : CA 58 05                           JZ      TRU     ;BRIF LEFT=RIGHT
 1236/ 539 : 3A 25 82                   IF8:    LDA     REL     ;LOAD RELATION
 1237/ 53C : E6 02                              ANI     02H     ;MASK IT
 1238/ 53E : CA 47 05                           JZ      IF9     ;BRIF NO >
 1239/ 541 : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 1240/ 544 : FA 58 05                           JM      TRU     ;BRIF GT
 1241/ 547 : 3A 25 82                   IF9:    LDA     REL     ;LOAD RELATION
 1242/ 54A : E6 04                              ANI     04H     ;MASK IT
 1243/ 54C : CA E9 01                           JZ      FALS    ;BRIF NO <
 1244/ 54F : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 1245/ 552 : FA E9 01                           JM      FALS    ;BRIF GT
 1246/ 555 : CA E9 01                           JZ      FALS    ;BRIF ZERO (NOT EQUAL)
 1247/ 558 : 2A 52 82                   TRU:    LHLD    ADDR1   ;GET POINTER TO STATEMENT
 1248/ 55B : 11 BE 1E                           LXI     D,GOTOL ;POINT 'GO TO'
 1249/ 55E : =>TRUE                     	IF ROMSTRT = 0
 1250/ 55E : D7                                 RST     2       ;GO COMPARE
 1251/ 55F : =>FALSE                    	ELSE
 1252/ 55F :                            		CALL	RST2	;GO COMPARE
 1253/ 55F : [1249]                     	ENDIF
 1254/ 55F : CA CD 02                           JZ      GOTO    ;BRIF IF ... GOTO NN
 1255/ 562 : 2A 52 82                           LHLD    ADDR1   ;GET POINTER TO STATEMENT
 1256/ 565 : 11 9D 1E                           LXI     D,GOSBL ;POINT LITERAL
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 22 - 9/26/2024 16:17:21


 1257/ 568 : =>TRUE                     	IF ROMSTRT = 0
 1258/ 568 : D7                                 RST     2       ;GO COMPARE
 1259/ 569 : =>FALSE                    	ELSE
 1260/ 569 :                            		CALL	RST2	;GO COMPARE
 1261/ 569 : [1257]                     	ENDIF
 1262/ 569 : CA 11 03                           JZ      GOSUB   ;BRIF IF ... GOSUB NN
 1263/ 56C : 2A 52 82                           LHLD    ADDR1   ;GET POINTER TO STATEMENT
 1264/ 56F : 11 94 1D                           LXI     D,THENL ;GET ADDR 'THEN'
 1265/ 572 : =>TRUE                     	IF ROMSTRT = 0
 1266/ 572 : D7                                 RST     2       ;GO COMPARE
 1267/ 573 : =>FALSE                    	ELSE
 1268/ 573 :                            		CALL	RST2	;GO COMPARE
 1269/ 573 : [1265]                     	ENDIF
 1270/ 573 : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
 1271/ 576 : CD 0B 1B                           CALL    NUMER   ;TEST IF NUMERIC
 1272/ 579 : CA CD 02                           JZ      GOTO    ;BRIF IT IS
 1273/ 57C : C3 16 02                           JMP     RUN4    ;ELSE, MAY BE ANY STMT
 1274/ 57F : =1E9H                      FALS    EQU     RUN
 1275/ 57F : 21 CE 80                   IFF:    LXI     H,IOBUF ;POINT PRIOR
 1276/ 582 : 46                                 MOV     B,M     ;GET LEN
 1277/ 583 : 11 20 81                           LXI     D,STRIN ;POINT THIS
 1278/ 586 : 1A                                 LDAX    D       ;GET LEN
 1279/ 587 : 4F                                 MOV     C,A     ;SAVE IT
 1280/ 588 : 13                         IFG:    INX     D       ;POINT NEXT
 1281/ 589 : 23                                 INX     H       ;DITTO
 1282/ 58A : 78                                 MOV     A,B     ;GET LEFT LEN
 1283/ 58B : B7                                 ORA     A       ;TEST IT
 1284/ 58C : C2 91 05                           JNZ     IFH     ;BRIF NOT ZERO
 1285/ 58F : 36 20                              MVI     M,' '   ;EXTEND WITH SPACE
 1286/ 591 : 79                         IFH:    MOV     A,C     ;GET RIGHT LEN
 1287/ 592 : B7                                 ORA     A       ;TEST IT
 1288/ 593 : C2 99 05                           JNZ     IFI     ;BRIF NOT ZERO
 1289/ 596 : 3E 20                              MVI     A,' '   ;GET SPACE
 1290/ 598 : 12                                 STAX    D       ;EXTEND
 1291/ 599 : 1A                         IFI:    LDAX    D       ;GET RIGHT CHAR
 1292/ 59A : BE                                 CMP     M       ;TEST WITH LEFT
 1293/ 59B : DA BE 05                           JC      IFM     ;BRIF LEFT>RIGHT
 1294/ 59E : C2 C3 05                           JNZ     IFN     ;BRIF LEFT<RIGHT
 1295/ 5A1 : 78                                 MOV     A,B     ;GET LEFT COUNT
 1296/ 5A2 : 3D                                 DCR     A       ;SUBT ONE
 1297/ 5A3 : FA A7 05                           JM      IFJ     ;BRIF WAS ZERO
 1298/ 5A6 : 47                                 MOV     B,A     ;UPDATE CTR
 1299/ 5A7 : 79                         IFJ:    MOV     A,C     ;GET RIGHT LEN
 1300/ 5A8 : 3D                                 DCR     A       ;SUBT ONE
 1301/ 5A9 : FA AD 05                           JM      IFK     ;BRIF WAS ZERO
 1302/ 5AC : 4F                                 MOV     C,A     ;UPDT CTR
 1303/ 5AD : 78                         IFK:    MOV     A,B     ;GET LEFT LEN
 1304/ 5AE : B1                                 ORA     C       ;COMPARE TO RIGHT
 1305/ 5AF : C2 88 05                           JNZ     IFG     ;BRIF BOTH NOT ZERO
 1306/ 5B2 : 06 01                              MVI     B,1     ;SET SW= EQUAL
 1307/ 5B4 : 3A 25 82                   IFL:    LDA     REL     ;GET RELATION
 1308/ 5B7 : A0                                 ANA     B       ;AND WITH RESULT
 1309/ 5B8 : CA E9 01                           JZ      FALS    ;BRIF FALSE
 1310/ 5BB : C3 58 05                           JMP     TRU     ;ELSE, TRUE
 1311/ 5BE : 06 02                      IFM:    MVI     B,2     ;SET CODE
 1312/ 5C0 : C3 B4 05                           JMP     IFL     ;JUMP
 1313/ 5C3 : 06 04                      IFN:    MVI     B,4     ;SET CODE
 1314/ 5C5 : C3 B4 05                           JMP     IFL     ;JUMP
 1315/ 5C8 :                            ;
 1316/ 5C8 : =5C8H                      LET     EQU     $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 23 - 9/26/2024 16:17:21


 1317/ 5C8 :                            ;
 1318/ 5C8 :                            ; STMT: [LET] VAR = EXPR
 1319/ 5C8 :                            ;
 1320/ 5C8 : CD 26 18                           CALL    GETS8   ;GO GET ADDRESS OF VARIABLE
 1321/ 5CB : C5                                 PUSH    B       ;SAVE NAME
 1322/ 5CC : D5                                 PUSH    D       ;SAVE ADDRESS
 1323/ 5CD : =>TRUE                     	IF ROMSTRT = 0
 1324/ 5CD : CF                                 RST     1       ;GET NEXT NON-BLANK CHAR
 1325/ 5CE : =>FALSE                    	ELSE
 1326/ 5CE :                            		CALL	RST1	;GET NEXT NON-BLANK CHAR
 1327/ 5CE : [1323]                     	ENDIF
 1328/ 5CE : FE 3D                              CPI     '='     ;TEST FOR EQUAL SIGN
 1329/ 5D0 : CA E3 05                           JZ      LET1    ;BRIF IS
 1330/ 5D3 : 3A 76 80                           LDA     EDSW    ;GET MODE SW
 1331/ 5D6 : B7                                 ORA     A       ;TEST IT
 1332/ 5D7 : CA F0 1B                           JZ      SNERR   ;BRIF LET ERROR
 1333/ 5DA : 21 5C 1D                           LXI     H,WHATL ;POINT LITERAL
 1334/ 5DD : CD 9E 19                           CALL    TERMM   ;GO PRINT IT
 1335/ 5E0 : C3 D7 00                           JMP     GETCM   ;GO TO COMMAND
 1336/ 5E3 : 23                         LET1:   INX     H       ;POINT NEXT
 1337/ 5E4 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE EXPRESSION
 1338/ 5E7 : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
 1339/ 5EA : E1                                 POP     H       ;RESTORE ADDRESSS
 1340/ 5EB : D1                                 POP     D       ;RESTORE NAME
 1341/ 5EC : 7B                                 MOV     A,E     ;GET TYPE
 1342/ 5ED : B7                                 ORA     A       ;TEST IT
 1343/ 5EE : 3A 8E 82                           LDA     NS      ;GET RESULT TYPE
 1344/ 5F1 : FA FD 05                           JM      LET2    ;BRIF STRING
 1345/ 5F4 : FE E3                              CPI     0E3H    ;TEST IF NUMERIC
 1346/ 5F6 : C2 F0 1B                           JNZ     SNERR   ;BRIF MIXED MODE
 1347/ 5F9 : =>TRUE                     	IF ROMSTRT = 0
 1348/ 5F9 : DF                                 RST     3       ;GO STORE THE VALUE
 1349/ 5FA : =>FALSE                    	ELSE
 1350/ 5FA :                            		CALL	RST3	;GO STORE THE VALUE
 1351/ 5FA : [1347]                     	ENDIF
 1352/ 5FA : C3 E9 01                           JMP     RUN     ;CONTINUE
 1353/ 5FD : FE E7                      LET2:   CPI     0E7H    ;TEST IF STRING
 1354/ 5FF : C2 F0 1B                           JNZ     SNERR   ;BRIF MIXED MODE
 1355/ 602 : CD 08 06                           CALL    LET2A   ;GO STORE IT
 1356/ 605 : C3 E9 01                           JMP     RUN     ;CONTINUE
 1357/ 608 :                            ;
 1358/ 608 : 11 20 81                   LET2A:  LXI     D,STRIN ;POINT STRING BUFFER
 1359/ 60B : 1A                                 LDAX    D       ;GET NEW LEN
 1360/ 60C : 96                                 SUB     M       ;MINUS OLD LEN
 1361/ 60D : CA 5D 06                           JZ      LET8    ;BRIF SAME LENGTH
 1362/ 610 : 54                                 MOV     D,H     ;COPY H,L
 1363/ 611 : 5D                                 MOV     E,L     ;TO D,E
 1364/ 612 : 7E                                 MOV     A,M     ;GET LEN
 1365/ 613 : 3C                                 INR     A       ;TRUE LEN
 1366/ 614 : 13                         LET3:   INX     D       ;POINT NEXT
 1367/ 615 : 3D                                 DCR     A       ;DECR CTR
 1368/ 616 : C2 14 06                           JNZ     LET3    ;LOOP
 1369/ 619 : 13                                 INX     D       ;SKIP
 1370/ 61A : 13                                 INX     D       ;AGAIN
 1371/ 61B : 1A                                 LDAX    D       ;GET LO NAM
 1372/ 61C : 4F                                 MOV     C,A     ;SAVE
 1373/ 61D : 13                                 INX     D       ;GET HI NAME
 1374/ 61E : 1A                                 LDAX    D       ;LOAD IT
 1375/ 61F : 47                                 MOV     B,A     ;SAVE
 1376/ 620 : C5                                 PUSH    B       ;SAVE NAME
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 24 - 9/26/2024 16:17:21


 1377/ 621 : 2B                                 DCX     H       ;POINT NEXT ENTRY
 1378/ 622 : 7E                         LET4:   MOV     A,M     ;GET NEXT
 1379/ 623 : B7                                 ORA     A       ;TEST IF END
 1380/ 624 : CA 3B 06                           JZ      LET6    ;BRIF IS
 1381/ 627 : E5                                 PUSH    H       ;SAVE H,L
 1382/ 628 : 2B                                 DCX     H       ;SKIP NEXT
 1383/ 629 : 2B                                 DCX     H       ;POINT LEN
 1384/ 62A : 46                                 MOV     B,M     ;GET HI LEN
 1385/ 62B : 2B                                 DCX     H       ;POINT LO
 1386/ 62C : 4E                                 MOV     C,M     ;GET LO LEN
 1387/ 62D : E1                                 POP     H       ;RESTORE H,L
 1388/ 62E : 7E                         LET5:   MOV     A,M     ;GET A BYTE
 1389/ 62F : 12                                 STAX    D       ;COPY
 1390/ 630 : 2B                                 DCX     H       ;POINT NEXT
 1391/ 631 : 1B                                 DCX     D       ;DITTO
 1392/ 632 : 03                                 INX     B       ;ADD TO CTR
 1393/ 633 : 78                                 MOV     A,B     ;GET HI
 1394/ 634 : B1                                 ORA     C       ;TEST IF ZERO
 1395/ 635 : C2 2E 06                           JNZ     LET5    ;LOOP
 1396/ 638 : C3 22 06                           JMP     LET4    ;CONTINUE
 1397/ 63B : EB                         LET6:   XCHG            ;PUT NEW ADDR TO H,L
 1398/ 63C : C1                                 POP     B       ;GET NAME
 1399/ 63D : 70                                 MOV     M,B     ;STORE HI BYTE
 1400/ 63E : 2B                                 DCX     H       ;POINT NEXT
 1401/ 63F : 71                                 MOV     M,C     ;STORE LO
 1402/ 640 : 11 20 81                           LXI     D,STRIN ;GET NEW LEN
 1403/ 643 : 1A                                 LDAX    D       ;LOAD IT
 1404/ 644 : 06 FF                              MVI     B,0FFH  ;INIT HI COMPLEMENT
 1405/ 646 : C6 05                              ADI     5       ;COMPUTE ENTRY LENGTH
 1406/ 648 : CA 50 06                           JZ      LET7    ;BRIF 256 BYTES
 1407/ 64B : D2 50 06                           JNC     LET7    ;BRIF LESS 256
 1408/ 64E : 06 FE                              MVI     B,0FEH  ;SET BIT OFF
 1409/ 650 : 2F                         LET7:   CMA             ;1'S COMPLEMENT
 1410/ 651 : 3C                                 INR     A       ;THEN 2'S
 1411/ 652 : 4F                                 MOV     C,A     ;SAVE LO LEN
 1412/ 653 : 2B                                 DCX     H       ;POINT NEXT
 1413/ 654 : 70                                 MOV     M,B     ;STORE HI LEN
 1414/ 655 : 2B                                 DCX     H       ;POINT NEXT
 1415/ 656 : 71                                 MOV     M,C     ;STORE LO LEN
 1416/ 657 : =>TRUE                     	IF ROMSTRT = 0
 1417/ 657 : E7                         		RST     4       ;ADJUST H,L
 1418/ 658 : =>FALSE                    	ELSE
 1419/ 658 :                            		CALL	RST4	;ADJUST H,L
 1420/ 658 : [1416]                     	ENDIF
 1421/ 658 : 03                                 DB      3
 1422/ 659 : 09                                 DAD     B       ;COMPUTE END OF ENTRY
 1423/ 65A : 36 00                              MVI     M,0     ;MARK NEW END
 1424/ 65C : 23                                 INX     H       ;POINT 1ST BYTE
 1425/ 65D : 1A                         LET8:   LDAX    D       ;GET LEN
 1426/ 65E : 3C                                 INR     A       ;TRUE LEN
 1427/ 65F : 47                                 MOV     B,A     ;SAVE LEN
 1428/ 660 : 1A                         LET9:   LDAX    D       ;GET A BYTE
 1429/ 661 : 77                                 MOV     M,A     ;COPY IT
 1430/ 662 : 23                                 INX     H       ;POINT NEXT
 1431/ 663 : 13                                 INX     D       ;DITTO
 1432/ 664 : 05                                 DCR     B       ;SUBT CTR
 1433/ 665 : C2 60 06                           JNZ     LET9    ;LOOP
 1434/ 668 : C9                                 RET             ;RETURN
 1435/ 669 :                            ;
 1436/ 669 :                            ;NEXT   EQQU    $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 25 - 9/26/2024 16:17:21


 1437/ 669 :                            ;
 1438/ 669 :                            ;
 1439/ 669 :                            ; STMT:  NEXT VAR
 1440/ 669 :                            ;
 1441/ 669 :                            ;
 1442/ 669 : CD AA 1B                   NEXT:   CALL    VAR     ;GET VARIABLE NAME
 1443/ 66C : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LNE
 1444/ 66F : EB                                 XCHG            ;FLIP/FLOP
 1445/ 670 : 22 23 82                           SHLD    INDX    ;SAVE VAR NAME
 1446/ 673 : E5                                 PUSH    H       ;SAVE VAR NAME
 1447/ 674 : 21 00 80                           LXI     H,FORNE ;POINT FOR/NEXT TABLE
 1448/ 677 : 46                                 MOV     B,M     ;GET SIZE
 1449/ 678 : 78                                 MOV     A,B     ;LOAD IT
 1450/ 679 : B7                                 ORA     A       ;TEST IT
 1451/ 67A : CA FC 1B                           JZ      NXERR   ;BRIF TABLE EMPTY
 1452/ 67D : 23                                 INX     H       ;POINT NEXT
 1453/ 67E : D1                                 POP     D       ;RESTORE VAR NAME
 1454/ 67F : 7E                         NEXT1:  MOV     A,M     ;GET 1ST BYTE
 1455/ 680 : 23                                 INX     H       ;POINT NEXT
 1456/ 681 : BA                                 CMP     D       ;COMPARE
 1457/ 682 : C2 8A 06                           JNZ     NEXT2   ;BRIF NOT EQUAL
 1458/ 685 : 7E                                 MOV     A,M     ;GET 2ND BYTE
 1459/ 686 : BB                                 CMP     E       ;COMPARE
 1460/ 687 : CA 93 06                           JZ      NEXT3   ;BRIF EQUAL
 1461/ 68A :                            NEXT2:
 1462/ 68A : =>TRUE                     	IF ROMSTRT = 0
 1463/ 68A : E7                         		RST     4       ;ADJUST H,L
 1464/ 68B : =>FALSE                    	ELSE
 1465/ 68B :                            		CALL	RST4	;ADJUST H,L
 1466/ 68B : [1462]                     	ENDIF
 1467/ 68B : 0D                                 DB      13
 1468/ 68C : 05                                 DCR     B       ;DECR COUNT
 1469/ 68D : C2 7F 06                           JNZ     NEXT1   ;LOOP
 1470/ 690 : C3 FC 1B                           JMP     NXERR   ;GO PUT ERROR MSG
 1471/ 693 : 3A 00 80                   NEXT3:  LDA     FORNE   ;GET ORIG COUNT
 1472/ 696 : 90                                 SUB     B       ;MINUS REMAIN
 1473/ 697 : 3C                                 INR     A       ;PLUS ONE
 1474/ 698 : 32 00 80                           STA     FORNE   ;STORE NEW COUNT
 1475/ 69B : 23                                 INX     H       ;POINT ADDR
 1476/ 69C : E5                                 PUSH    H       ;SAVE H,L ADDR
 1477/ 69D : CD 15 1B                           CALL    SEARC   ;GO GET ADDR OF INDEX
 1478/ 6A0 : EB                                 XCHG            ;PUT TO H,L
 1479/ 6A1 : 22 52 82                           SHLD    ADDR1   ;SAVR IT
 1480/ 6A4 : =>TRUE                     	IF ROMSTRT = 0
 1481/ 6A4 : EF                                 RST     5       ;LOAD IT
 1482/ 6A5 : =>FALSE                    	ELSE
 1483/ 6A5 :                            		CALL	RST5	;LOAD IT
 1484/ 6A5 : [1480]                     	ENDIF
 1485/ 6A5 : E1                                 POP     H       ;GET H,L (TBL)
 1486/ 6A6 : E5                                 PUSH    H       ;RE-SAVE
 1487/ 6A7 : CD 0E 16                           CALL    FADD    ;ADD STEP VALUE
 1488/ 6AA : 21 27 82                           LXI     H,TVAR1 ;POINT TEMP AREA
 1489/ 6AD : =>TRUE                     	IF ROMSTRT = 0
 1490/ 6AD : DF                                 RST     3       ;GO STORE THE VALUE
 1491/ 6AE : =>FALSE                    	ELSE
 1492/ 6AE :                            		CALL	RST3	;GO STORE THE VALUE
 1493/ 6AE : [1489]                     	ENDIF
 1494/ 6AE : E1                                 POP     H       ;GET H,L (TBL)
 1495/ 6AF : E5                                 PUSH    H       ;RE-SAVE
 1496/ 6B0 : =>TRUE                     	IF ROMSTRT = 0
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 26 - 9/26/2024 16:17:21


 1497/ 6B0 : E7                         		RST     4       ;ADJUST H,L
 1498/ 6B1 : =>FALSE                    	ELSE
 1499/ 6B1 :                            		CALL	RST4	;ADJUST H,L
 1500/ 6B1 : [1496]                     	ENDIF
 1501/ 6B1 : 04                                 DB      4
 1502/ 6B2 : CD E3 16                           CALL    FSUB    ;SUBTRACT TO VALUE
 1503/ 6B5 : CA D2 06                           JZ      NEXT6   ;BRIF ZERO
 1504/ 6B8 : E1                                 POP     H       ;GET H,L (PTR TO STEP)
 1505/ 6B9 : E5                                 PUSH    H       ;RE-SAVE
 1506/ 6BA : 7E                                 MOV     A,M     ;GET SIGN&EXPONENT OF STEP
 1507/ 6BB : B7                                 ORA     A       ;TEST IT
 1508/ 6BC : 3A 58 82                           LDA     FACC    ;GET SIGN & EXPON OF DIFF
 1509/ 6BF : FA CE 06                           JM      NEXT5   ;BRIF NEGATIVE
 1510/ 6C2 : B7                                 ORA     A       ;TEST SIGN OF DIFF
 1511/ 6C3 : FA D2 06                           JM      NEXT6   ;BRIF LESS THAN TO-EXPR
 1512/ 6C6 : 21 00 80                   NEXT7:  LXI     H,FORNE ;GET ADDR TABLE
 1513/ 6C9 : 35                                 DCR     M       ;SUBTRACT ONE FROM COUNT
 1514/ 6CA : D1                                 POP     D       ;ADJUST STACK
 1515/ 6CB : C3 E9 01                           JMP     RUN     ;GO STMT AFTER NEXT
 1516/ 6CE : B7                         NEXT5:  ORA     A       ;TEST SIGN OF DIFFERENCE
 1517/ 6CF : FA C6 06                           JM      NEXT7   ;BRIF END OF LOOP
 1518/ 6D2 : E1                         NEXT6:  POP     H       ;GET PTR TO TBL
 1519/ 6D3 : =>TRUE                     	IF ROMSTRT = 0
 1520/ 6D3 : E7                         		RST     4       ;ADJUST H,L
 1521/ 6D4 : =>FALSE                    	ELSE
 1522/ 6D4 :                            		CALL	RST4	;ADJUST H,L
 1523/ 6D4 : [1519]                     	ENDIF
 1524/ 6D4 : 08                                 DB      8
 1525/ 6D5 : 56                                 MOV     D,M     ;GET HI BYTE
 1526/ 6D6 : 23                                 INX     H       ;POINT NEXT
 1527/ 6D7 : 5E                                 MOV     E,M     ;GET LOW BYTE
 1528/ 6D8 : 23                                 INX     H       ;POINT NEXT
 1529/ 6D9 : 7E                                 MOV     A,M     ;GET HI BYTE
 1530/ 6DA : 32 71 82                           STA     STMT+1  ;SAVE
 1531/ 6DD : 23                                 INX     H       ;POINT NEXT
 1532/ 6DE : 7E                                 MOV     A,M     ;GET LOW BYTE
 1533/ 6DF : 32 70 82                           STA     STMT    ;SAVE
 1534/ 6E2 : EB                                 XCHG            ;H,L = ADDR OF STMT AFTR FOR
 1535/ 6E3 : CD 75 1A                           CALL    EOL     ;SETUP MULTI PTP
 1536/ 6E6 : 2A 70 82                           LHLD    STMT    ;GET ADDR OF FOR STMT
 1537/ 6E9 : 23                                 INX     H       ;POINT LINE NUM
 1538/ 6EA : 22 89 82                           SHLD    LINE    ;SAVE ADDR LINE
 1539/ 6ED : 21 27 82                           LXI     H,TVAR1 ;POINT UPDTED VALUE
 1540/ 6F0 : =>TRUE                     	IF ROMSTRT = 0
 1541/ 6F0 : EF                                 RST     5       ;LOAD IT
 1542/ 6F1 : =>FALSE                    	ELSE
 1543/ 6F1 :                            		CALL	RST5	;LOAD IT
 1544/ 6F1 : [1540]                     	ENDIF
 1545/ 6F1 : 2A 52 82                           LHLD    ADDR1   ;GET ADDR OF INDEX
 1546/ 6F4 : =>TRUE                     	IF ROMSTRT = 0
 1547/ 6F4 : DF                                 RST     3       ;GO STORE THE VALUE
 1548/ 6F5 : =>FALSE                    	ELSE
 1549/ 6F5 :                            		CALL	RST3	;GO STORE THE VALUE
 1550/ 6F5 : [1546]                     	ENDIF
 1551/ 6F5 : C3 E9 01                           JMP     RUN     ;CONTINUE WITH STMT AFTER FOR
 1552/ 6F8 : =6F8H                      INPUT   EQU     $
 1553/ 6F8 :                            ;
 1554/ 6F8 :                            ;
 1555/ 6F8 :                            ; STMT:  INPUT VAR [, VAR, VAR]
 1556/ 6F8 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 27 - 9/26/2024 16:17:21


 1557/ 6F8 :                            ;
 1558/ 6F8 : 11 86 1D                           LXI     D,LLINE ;POINT 'LINE'
 1559/ 6FB : E5                                 PUSH    H       ;SAVE H,L ADDR
 1560/ 6FC : =>TRUE                     	IF ROMSTRT = 0
 1561/ 6FC : D7                                 RST     2       ;GO COMPARE
 1562/ 6FD : =>FALSE                    	ELSE
 1563/ 6FD :                            		CALL	RST2	;GO COMPARE
 1564/ 6FD : [1560]                     	ENDIF
 1565/ 6FD : CA 7C 07                           JZ      INPL    ;BRIF EQUAL
 1566/ 700 : D1                                 POP     D       ;ELSE, RESTORE H,L ADDR
 1567/ 701 : 21 CE 80                           LXI     H,IOBUF ;GET ADDR OF BUFFER
 1568/ 704 : 22 52 82                           SHLD    ADDR1   ;SAVE ADDR
 1569/ 707 : 36 00                              MVI     M,0     ;MARK BUFFER EMPTY
 1570/ 709 : EB                                 XCHG            ;FLIP/BACK
 1571/ 70A : =>TRUE                     	IF ROMSTRT = 0
 1572/ 70A : CF                         INPU1:  RST     1       ;SKIP SPACES
 1573/ 70B : =>FALSE                    	ELSE
 1574/ 70B :                            INPU1:	CALL	RST1	;CALL TO RAM ADDRESS
 1575/ 70B : [1571]                     	ENDIF
 1576/ 70B : FE 27                              CPI     27H     ;TEST IF QUOTE
 1577/ 70D : CA 15 07                           JZ      INPU2   ;BRIF IS
 1578/ 710 : FE 22                              CPI     '"'     ;TEST IF INPUT LITERAL
 1579/ 712 : C2 38 07                           JNZ     INPU6   ;BRIF NOT
 1580/ 715 : 4F                         INPU2:  MOV     C,A     ;SAVE DELIM
 1581/ 716 : 11 CE 80                           LXI     D,IOBUF ;POINT BUFFER
 1582/ 719 : 23                         INPU3:  INX     H       ;POINT NEXT
 1583/ 71A : 7E                                 MOV     A,M     ;LOAD IT
 1584/ 71B : B9                                 CMP     C       ;TEST IF END
 1585/ 71C : CA 24 07                           JZ      INPU4   ;BRIF IS
 1586/ 71F : 12                                 STAX    D       ;PUT TO BUFF
 1587/ 720 : 13                                 INX     D       ;POINT NEXT
 1588/ 721 : C3 19 07                           JMP     INPU3   ;LOOP
 1589/ 724 : 23                         INPU4:  INX     H       ;SKIP TRAILING QUOTE
 1590/ 725 : EB                                 XCHG            ;PUT ADDR TO H,L
 1591/ 726 : 36 FE                              MVI     M,0FEH  ;MARK END
 1592/ 728 : CD 96 19                           CALL    TERMO   ;GO PRINT PROMPT
 1593/ 72B : EB                                 XCHG            ;GET H,L
 1594/ 72C : =>TRUE                     	IF ROMSTRT = 0
 1595/ 72C : CF                                 RST     1       ;SKIP TO NON BLANK
 1596/ 72D : =>FALSE                    	ELSE
 1597/ 72D :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1598/ 72D : [1594]                     	ENDIF
 1599/ 72D : FE 2C                              CPI     ','     ;TEST IF COMMA
 1600/ 72F : CA 37 07                           JZ      INPU5   ;BRIF IS
 1601/ 732 : FE 3B                              CPI     ';'     ;TEST IF COMMA
 1602/ 734 : C2 38 07                           JNZ     INPU6   ;BRIF NOT
 1603/ 737 : 23                         INPU5:  INX     H       ;SKIP IT
 1604/ 738 : CD 26 18                   INPU6:  CALL    GETS8   ;GO GET VAR ADDR
 1605/ 73B : E5                                 PUSH    H       ;SAVE H ADDR
 1606/ 73C : D5                                 PUSH    D       ;SAVE VAR ADDR
 1607/ 73D : 2A 52 82                           LHLD    ADDR1   ;GET ADDR PREV BUFFER
 1608/ 740 : 7E                                 MOV     A,M     ;LOAD CHAR
 1609/ 741 : FE 2C                              CPI     ','     ;TEST IF COMMA
 1610/ 743 : 23                                 INX     H       ;POINT NEXT
 1611/ 744 : CA 4C 07                           JZ      INPU7   ;BRIF CONTINUE FROM PREV
 1612/ 747 : 3E 3F                              MVI     A,'?'   ;LOAD PROMPT
 1613/ 749 : CD DB 18                           CALL    TERMI   ;GO READ FROM TTY
 1614/ 74C : =>TRUE                     	IF ROMSTRT = 0
 1615/ 74C : CF                         INPU7:  RST     1       ;SKIP SPACES
 1616/ 74D : =>FALSE                    	ELSE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 28 - 9/26/2024 16:17:21


 1617/ 74D :                            INPU7:	CALL	RST1	;CALL TO RAM ADDRESS
 1618/ 74D : [1614]                     	ENDIF
 1619/ 74D : 79                                 MOV     A,C     ;GET LO NAME
 1620/ 74E : B7                                 ORA     A       ;TEST IT
 1621/ 74F : FA 73 07                           JM      INPUA   ;BRIF STRING
 1622/ 752 : CD 05 14                           CALL    FIN     ;GO CONVERT TO FLOATING
 1623/ 755 : =>TRUE                     	IF ROMSTRT = 0
 1624/ 755 : CF                                 RST     1       ;SKIP SPACES
 1625/ 756 : =>FALSE                    	ELSE
 1626/ 756 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1627/ 756 : [1623]                     	ENDIF
 1628/ 756 : FE 2C                              CPI     ','     ;TEST IF COMMA
 1629/ 758 : CA 5F 07                           JZ      INPU8   ;BRIF IS
 1630/ 75B : B7                                 ORA     A       ;TEST IF END OF LINE
 1631/ 75C : C2 00 1C                           JNZ     CVERR   ;BRIF ERROR
 1632/ 75F : 22 52 82                   INPU8:  SHLD    ADDR1   ;SAVE ADDRESS
 1633/ 762 : E1                                 POP     H       ;GET VAR ADDR
 1634/ 763 : =>TRUE                     	IF ROMSTRT = 0
 1635/ 763 : DF                                 RST     3       ;GO STORE THE VALUE
 1636/ 764 : =>FALSE                    	ELSE
 1637/ 764 :                            		CALL	RST3	;GO STORE THE VALUE
 1638/ 764 : [1634]                     	ENDIF
 1639/ 764 : E1                         INPU9:  POP     H       ;RESTORE STMT POINTER
 1640/ 765 : 7E                                 MOV     A,M     ;GET CHAR
 1641/ 766 : FE 2C                              CPI     ','     ;TEST FOR COMMA
 1642/ 768 : 23                                 INX     H       ;POINT NEXT
 1643/ 769 : CA 0A 07                           JZ      INPU1   ;RECDURSIVE IF COMMA
 1644/ 76C : 2B                                 DCX     H       ;POINT BACK
 1645/ 76D : CD 75 1A                   INPUB:  CALL    EOL     ;ERROR IF NOT END OF LINE
 1646/ 770 : C3 E9 01                           JMP     RUN     ;CONTINUE NEXT STMT
 1647/ 773 : CD E4 17                   INPUA:  CALL    GETST   ;GO GET THE STRING
 1648/ 776 : 22 52 82                           SHLD    ADDR1   ;SAVE ADDRESS
 1649/ 779 : C3 64 07                           JMP     INPU9   ;CONTINUE
 1650/ 77C :                            ;
 1651/ 77C : =77CH                      INPL    EQU     $
 1652/ 77C :                            ;
 1653/ 77C :                            ;
 1654/ 77C :                            ; STMT: INPUT LINE A$
 1655/ 77C :                            ;
 1656/ 77C :                            ;
 1657/ 77C : D1                                 POP     D       ;DUMMY POP TO ADJUST STACK
 1658/ 77D : CD AA 1B                           CALL    VAR     ;GET STRING NAME
 1659/ 780 : 7B                                 MOV     A,E     ;LOAD LO BYTE
 1660/ 781 : B7                                 ORA     A       ;TEST IT
 1661/ 782 : F2 F0 1B                           JP      SNERR   ;BRIF NOT STRING VARIABLE
 1662/ 785 : CD 15 1B                           CALL    SEARC   ;ELSE, GET ADDRESS
 1663/ 788 : D5                                 PUSH    D       ;SAVE ON STACK
 1664/ 789 : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
 1665/ 78C : 3E 01                              MVI     A,1     ;GET ON SETTING
 1666/ 78E : 32 74 80                           STA     ILSW    ;SET INPUT LINE SWITCH
 1667/ 791 : 3E 3F                              MVI     A,'?'   ;LOAD PROMPT
 1668/ 793 : CD DB 18                           CALL    TERMI   ;GO READ A LINE
 1669/ 796 : 06 00                              MVI     B,0     ;INIT COUNT
 1670/ 798 : 11 21 81                           LXI     D,STRIN+1       ;POINT STRING BUFFER
 1671/ 79B : 21 CF 80                           LXI     H,IOBUF+1       ;POINT INPUT BUFFER
 1672/ 79E : 7E                         INPL1:  MOV     A,M     ;GET NEXT BYTE
 1673/ 79F : B7                                 ORA     A       ;TEST IT
 1674/ 7A0 : CA AA 07                           JZ      INPL2   ;BRIF END
 1675/ 7A3 : 04                                 INR     B       ;ADD TO COUNT
 1676/ 7A4 : 12                                 STAX    D       ;PUT TO STRING BUFF
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 29 - 9/26/2024 16:17:21


 1677/ 7A5 : 13                                 INX     D       ;POINT NEXT
 1678/ 7A6 : 23                                 INX     H       ;DITTO
 1679/ 7A7 : C3 9E 07                           JMP     INPL1   ;LOOP
 1680/ 7AA : 32 74 80                   INPL2:  STA     ILSW    ;RESET SWITCH
 1681/ 7AD : 78                                 MOV     A,B     ;GET COUNT
 1682/ 7AE : 32 20 81                           STA     STRIN   ;SET STRING LENGTH
 1683/ 7B1 : E1                                 POP     H       ;GET ADDRESS OF VARIABLE
 1684/ 7B2 : CD 08 06                           CALL    LET2A   ;GO STORE THE STRING
 1685/ 7B5 : C3 E9 01                           JMP     RUN     ;GO NEXT STMT
 1686/ 7B8 :                            ;
 1687/ 7B8 : =7B8H                      READ    EQU     $
 1688/ 7B8 :                            ;
 1689/ 7B8 :                            ; STMT: READ VAR [,VAR ...]
 1690/ 7B8 :                            ;
 1691/ 7B8 : =>TRUE                     	IF ROMSTRT = 0
 1692/ 7B8 : CF                                 RST     1       ;SKIP BLANKS
 1693/ 7B9 : =>FALSE                    	ELSE
 1694/ 7B9 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1695/ 7B9 : [1691]                     	ENDIF
 1696/ 7B9 : CD 26 18                           CALL    GETS8   ;GET VAR ADDR
 1697/ 7BC : E5                                 PUSH    H       ;SAVE H,L
 1698/ 7BD : D5                                 PUSH    D       ;SAVE D,E
 1699/ 7BE : 2A 8F 82                           LHLD    DATAP   ;GET DATA STMT POINTER
 1700/ 7C1 : 7E                                 MOV     A,M     ;LOAD THE CHAR
 1701/ 7C2 : B7                                 ORA     A       ;TEST IF END OF STMT
 1702/ 7C3 : C2 E2 07                           JNZ     READ2   ;BRIF NOT END OF STMT
 1703/ 7C6 : 23                                 INX     H       ;POINT START NEXT STMT
 1704/ 7C7 : 7E                         READ1:  MOV     A,M     ;LOAD LEN
 1705/ 7C8 : 22 8F 82                           SHLD    DATAP   ;SAVE ADDR
 1706/ 7CB : B7                                 ORA     A       ;TEST IF END OF PGM
 1707/ 7CC : CA F8 1B                           JZ      DAERR   ;BRIF OUT OF DATA
 1708/ 7CF : =>TRUE                     	IF ROMSTRT = 0
 1709/ 7CF : E7                         		RST     4       ;ADJUST H,L
 1710/ 7D0 : =>FALSE                    	ELSE
 1711/ 7D0 :                            		CALL	RST4	;ADJUST H,L
 1712/ 7D0 : [1708]                     	ENDIF
 1713/ 7D0 : 03                                 DB      3
 1714/ 7D1 : 11 89 1E                           LXI     D,DATAL ;POINT 'DATA'
 1715/ 7D4 : =>TRUE                     	IF ROMSTRT = 0
 1716/ 7D4 : D7                                 RST     2       ;GO COMPARE
 1717/ 7D5 : =>FALSE                    	ELSE
 1718/ 7D5 :                            		CALL	RST2	;GO COMPARE
 1719/ 7D5 : [1715]                     	ENDIF
 1720/ 7D5 : CA E2 07                           JZ      READ2   ;BRIF IT IS DATA STMT
 1721/ 7D8 : 2A 8F 82                           LHLD    DATAP   ;GET ADDR START
 1722/ 7DB : 5E                                 MOV     E,M     ;GET LEN CODE
 1723/ 7DC : 16 00                              MVI     D,0     ;CLEAR D
 1724/ 7DE : 19                                 DAD     D       ;POINT NEXT STMT
 1725/ 7DF : C3 C7 07                           JMP     READ1   ;LOOP NEXT STMT
 1726/ 7E2 : =>TRUE                     	IF ROMSTRT = 0
 1727/ 7E2 : CF                         READ2:  RST     1       ;SKIP SPACES
 1728/ 7E3 : =>FALSE                    	ELSE
 1729/ 7E3 :                            READ2:	CALL	RST1	;CALL TO RAM ADDRESS
 1730/ 7E3 : [1726]                     	ENDIF
 1731/ 7E3 : 79                                 MOV     A,C     ;LOAD LO NAME
 1732/ 7E4 : B7                                 ORA     A       ;TEST IT
 1733/ 7E5 : FA 0A 08                           JM      READ6   ;BRIF STRING
 1734/ 7E8 : CD 05 14                           CALL    FIN     ;GO CONVERT VALUE
 1735/ 7EB : 7E                                 MOV     A,M     ;GET CHAR WHICH STOPPED US
 1736/ 7EC : FE 2C                              CPI     ','     ;TEST IF COMMA
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 30 - 9/26/2024 16:17:21


 1737/ 7EE : C2 03 08                           JNZ     READ5   ;BRIF NOT
 1738/ 7F1 : 23                                 INX     H       ;POINT NEXT
 1739/ 7F2 : 22 8F 82                   READ3:  SHLD    DATAP   ;SAVE ADDRESS
 1740/ 7F5 : E1                                 POP     H       ;RESTORE ADDR OF VAR
 1741/ 7F6 : =>TRUE                     	IF ROMSTRT = 0
 1742/ 7F6 : DF                                 RST     3       ;GO STORE THE VALUE
 1743/ 7F7 : =>FALSE                    	ELSE
 1744/ 7F7 :                            		CALL	RST3	;GO STORE THE VALUE
 1745/ 7F7 : [1741]                     	ENDIF
 1746/ 7F7 : E1                         READ4:  POP     H       ;RESTORE POINTER TO STM
 1747/ 7F8 : 7E                                 MOV     A,M     ;GET THE CHAR
 1748/ 7F9 : FE 2C                              CPI     ','     ;TEST IF COMMA
 1749/ 7FB : 23                                 INX     H       ;POINT NEXT
 1750/ 7FC : CA B8 07                           JZ      READ    ;RECURSIVE IF IT IS
 1751/ 7FF : 2B                                 DCX     H       ;RESET
 1752/ 800 : C3 6D 07                           JMP     INPUB   ;CONTINUE
 1753/ 803 : B7                         READ5:  ORA     A       ;TEST IF END OF STMT
 1754/ 804 : CA F2 07                           JZ      READ3   ;BRIF OK
 1755/ 807 : C3 00 1C                           JMP     CVERR   ;GO PROCESS ERROR
 1756/ 80A : CD E4 17                   READ6:  CALL    GETST   ;GO GET STRING
 1757/ 80D : 7E                                 MOV     A,M     ;GET CHAR
 1758/ 80E : FE 2C                              CPI     ','     ;TEST IF COMMA
 1759/ 810 : CA 1A 08                           JZ      READ7   ;BRIF IS
 1760/ 813 : B7                                 ORA     A       ;TEST IF END
 1761/ 814 : C2 03 08                           JNZ     READ5   ;BRIF NOT
 1762/ 817 : C3 1B 08                           JMP     READ8   ;GO AROUND
 1763/ 81A : 23                         READ7:  INX     H       ;POINT PAST
 1764/ 81B : 22 8F 82                   READ8:  SHLD    DATAP   ;SAVE ADDRESS
 1765/ 81E : C3 F7 07                           JMP     READ4   ;CONTINUE
 1766/ 821 :                            ;
 1767/ 821 : =821H                      OUTP    EQU     $
 1768/ 821 :                            ;
 1769/ 821 :                            ; STMT; OUT ADDR,VALUE
 1770/ 821 :                            ;
 1771/ 821 :                            ;
 1772/ 821 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE ADDRESS
 1773/ 824 : 7E                                 MOV     A,M     ;GET DELIM
 1774/ 825 : FE 2C                              CPI     ','     ;TEST IF COMMA
 1775/ 827 : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 1776/ 82A : 23                                 INX     H       ;SKIP OVER COMMA
 1777/ 82B : CD 47 1C                           CALL    FBIN    ;CONVERT TO BINARY IN A-REG
 1778/ 82E : 11 20 82                           LXI     D,OUTA  ;POINT INSTR
 1779/ 831 : EB                                 XCHG            ;PUT TO H,L
 1780/ 832 : 36 D3                              MVI     M,0D3H  ;OUT INSTR
 1781/ 834 : 23                                 INX     H       ;POINT NEXT
 1782/ 835 : 77                                 MOV     M,A     ;PUT ADDR
 1783/ 836 : 23                                 INX     H       ;POINT NEXT
 1784/ 837 : 36 C9                              MVI     M,0C9H  ;RET INSTR
 1785/ 839 : EB                                 XCHG            ;RESTORE ORIG H,L
 1786/ 83A : CD 57 0F                           CALL    EXPR    ;GO EVAL DATA BYTE
 1787/ 83D : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END OF STATEMENT
 1788/ 840 : CD 47 1C                           CALL    FBIN    ;CONVERT TO BINARY
 1789/ 843 : CD 20 82                           CALL    OUTA    ;GO PUT THE BYTE
 1790/ 846 : C3 E9 01                           JMP     RUN     ;GO NEXT STMT
 1791/ 849 :                            ;
 1792/ 849 : =849H                      STOP    EQU     $
 1793/ 849 :                            ;
 1794/ 849 :                            ; STMT: STOP
 1795/ 849 :                            ;
 1796/ 849 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 31 - 9/26/2024 16:17:21


 1797/ 849 : CD 75 1A                           CALL    EOL     ;POINT END OF LINE
 1798/ 84C : 21 2F 1E                           LXI     H,STOPM ;POINT MESSAGE: "STOP AT LINE "
 1799/ 84F : CD 9E 19                           CALL    TERMM   ;GO WRITE IT
 1800/ 852 : CD D2 1B                           CALL    PRLIN   ;GO PRINT LINE NUMBER
 1801/ 855 : 3A 75 80                           LDA     RUNSW   ;GET RUN TYPE
 1802/ 858 : B7                                 ORA     A       ;TEST IT
 1803/ 859 : C2 D1 00                           JNZ     RDY     ;BRIF IMMED
 1804/ 85C : 32 74 82                           STA     MULTI   ;CLEAR MULTI SW
 1805/ 85F : 2A 70 82                           LHLD    STMT    ;GET ADDR OF PREV STMT
 1806/ 862 : 5E                                 MOV     E,M     ;GET LEN
 1807/ 863 : 16 00                              MVI     D,0     ;CLEAR HI BYTE
 1808/ 865 : 19                                 DAD     D       ;POINT NEXT
 1809/ 866 : 23                                 INX     H       ;POINT LINE NUMBER
 1810/ 867 : 22 89 82                           SHLD    LINE    ;SAVE ADDR
 1811/ 86A : 11 77 80                           LXI     D,LINEN ;POINT AREA
 1812/ 86D : CD EA 19                           CALL    LINEO   ;GO CONVERT LINE NUMBER
 1813/ 870 : EB                                 XCHG            ;FLIP TO H,L
 1814/ 871 : 36 00                              MVI     M,0     ;MARK END
 1815/ 873 : C3 D1 00                           JMP     RDY     ;GO TO READY MSG
 1816/ 876 :                            ;
 1817/ 876 : =876H                      RANDO   EQU     $
 1818/ 876 :                            ;
 1819/ 876 :                            ;
 1820/ 876 :                            ; STMT: RANDOMIZE
 1821/ 876 :                            ;
 1822/ 876 :                            ;
 1823/ 876 : CD 75 1A                           CALL    EOL     ;ERROR IF NOT END-OF-LINE
 1824/ 879 : 3E 01                              MVI     A,1     ;LOAD A ONE
 1825/ 87B : 32 87 82                           STA     RNDSW   ;SET SWITCH = TRUE RANDOM
 1826/ 87E : 11 7F 82                           LXI     D,TRNDX ;POINT 'TRUE' RANDOM NUMBERS
 1827/ 881 : 21 77 82                           LXI     H,RNDX  ;POINT RECEIVE
 1828/ 884 : 06 08                              MVI     B,8     ;LOOP CTR
 1829/ 886 : CD 2E 1C                           CALL    COPYD   ;GO MOVE IT
 1830/ 889 : C3 E9 01                           JMP     RUN     ;CONTINUE
 1831/ 88C :                            ;
 1832/ 88C : =88CH                      ON      EQU     $
 1833/ 88C :                            ;
 1834/ 88C :                            ;
 1835/ 88C :                            ; STMT: ON EXPR GOTO NNN NNNN NNNN
 1836/ 88C :                            ;               GOSUB
 1837/ 88C :                            ;
 1838/ 88C :                            ;
 1839/ 88C : CD 57 0F                           CALL    EXPR    ;GO EVALUATE EXPRESSION
 1840/ 88F : CD 47 1C                           CALL    FBIN    ;GET BINARY NUMBER IN ACC
 1841/ 892 : B7                                 ORA     A       ;TEST RESULT
 1842/ 893 : CA F0 1B                           JZ      SNERR   ;BRIF ZERO (ERROR)
 1843/ 896 : 4F                                 MOV     C,A     ;SAVE VALUE
 1844/ 897 : 0D                                 DCR     C       ;LESS ONE
 1845/ 898 : AF                                 XRA     A       ;GET A ZERO
 1846/ 899 : 32 25 82                           STA     REL     ;TURN OFF SWITCH
 1847/ 89C : 11 BE 1E                           LXI     D,GOTOL ;POINT LITERAL
 1848/ 89F : E5                                 PUSH    H       ;SAVE H,L ADDRESS
 1849/ 8A0 : =>TRUE                     	IF ROMSTRT = 0
 1850/ 8A0 : D7                                 RST     2       ;GO COMPARE
 1851/ 8A1 : =>FALSE                    	ELSE
 1852/ 8A1 :                            		CALL	RST2	;GO COMPARE
 1853/ 8A1 : [1849]                     	ENDIF
 1854/ 8A1 : CA B2 08                           JZ      ON3     ;BRIF ON...GOTO
 1855/ 8A4 : E1                                 POP     H       ;ELSE, RESTORE H,L
 1856/ 8A5 : 11 9D 1E                           LXI     D,GOSBL ;POINT LITERAL
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 32 - 9/26/2024 16:17:21


 1857/ 8A8 : =>TRUE                     	IF ROMSTRT = 0
 1858/ 8A8 : D7                                 RST     2       ;GO COMPARE
 1859/ 8A9 : =>FALSE                    	ELSE
 1860/ 8A9 :                            		CALL	RST2	;GO COMPARE
 1861/ 8A9 : [1857]                     	ENDIF
 1862/ 8A9 : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
 1863/ 8AC : 3E 01                              MVI     A,1     ;GET ON SETTING
 1864/ 8AE : 32 25 82                           STA     REL     ;SET SWITCH
 1865/ 8B1 : E5                                 PUSH    H       ;DUMMY PUSH
 1866/ 8B2 : D1                         ON3:    POP     D       ;ADJUST STACK
 1867/ 8B3 : 79                         ON3A:   MOV     A,C     ;GET COUNT
 1868/ 8B4 : B7                                 ORA     A       ;TEST IT
 1869/ 8B5 : CA D4 08                           JZ      ON6     ;BRIF VALUE 1
 1870/ 8B8 : =>TRUE                     	IF ROMSTRT = 0
 1871/ 8B8 : CF                                 RST     1       ;ELSE, SKIP BLANKS
 1872/ 8B9 : =>FALSE                    	ELSE
 1873/ 8B9 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 1874/ 8B9 : [1870]                     	ENDIF
 1875/ 8B9 : B7                                 ORA     A       ;TEST IF END OF LINE
 1876/ 8BA : CA F0 1B                           JZ      SNERR   ;BRIF IS
 1877/ 8BD : FE 2C                              CPI     ','     ;TEST IS COMMA
 1878/ 8BF : C2 C6 08                           JNZ     ON4     ;BRIF NOT
 1879/ 8C2 : 23                                 INX     H       ;SKIP COMMA
 1880/ 8C3 : C3 B3 08                           JMP     ON3A    ;CONTINUE
 1881/ 8C6 : CD 0B 1B                   ON4:    CALL    NUMER   ;GO TEST IF NUMERIC
 1882/ 8C9 : C2 D0 08                           JNZ     ON5     ;BRIF NOT
 1883/ 8CC : 23                                 INX     H       ;POINT NEXT
 1884/ 8CD : C3 C6 08                           JMP     ON4     ;LOOP
 1885/ 8D0 : 0D                         ON5:    DCR     C       ;SUB ONE FROM COUNT
 1886/ 8D1 : C2 B3 08                           JNZ     ON3A    ;LOOP TILL JUST BEFORE STMT#
 1887/ 8D4 : CD 8E 1A                   ON6:    CALL    NOTEO   ;ERROR IF NOT END-OF-LINE
 1888/ 8D7 : FE 2C                              CPI     ','     ;TEST IF COMMA
 1889/ 8D9 : C2 E0 08                           JNZ     ON7     ;BRIF NOT
 1890/ 8DC : 23                                 INX     H       ;POINT NEXT
 1891/ 8DD : C3 D4 08                           JMP     ON6     ;LOOP
 1892/ 8E0 : CD 0B 1B                   ON7:    CALL    NUMER   ;TEST IF NUMERIC
 1893/ 8E3 : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 1894/ 8E6 : CD 96 1A                           CALL    PACK    ;GET THE LINE NUMBER
 1895/ 8E9 : 7E                         ON8:    MOV     A,M     ;GET NEXT CHAR
 1896/ 8EA : CD 89 1A                           CALL    TSTEL   ;TEST IF END STMT
 1897/ 8ED : CA F4 08                           JZ      ON9     ;BRIF END
 1898/ 8F0 : 23                                 INX     H       ;POINT NEXT
 1899/ 8F1 : C3 E9 08                           JMP     ON8     ;LOOP
 1900/ 8F4 : CD 75 1A                   ON9:    CALL    EOL     ;SET END OF LINE POINTERS
 1901/ 8F7 : 3A 25 82                           LDA     REL     ;GET TYPE (GOTO OR GOSUB)
 1902/ 8FA : B7                                 ORA     A       ;TEST IT
 1903/ 8FB : C2 1A 03                           JNZ     GOSU1   ;BRIF GOSUB
 1904/ 8FE : C3 DD 02                           JMP     GOTO2   ;BR TO GOTO LOOKUP
 1905/ 901 :                            ;
 1906/ 901 : =901H                      CHANG   EQU     $
 1907/ 901 :                            ;
 1908/ 901 :                            ; STATEMENT: CHANGE A$ TO X     - OR -
 1909/ 901 :                            ;
 1910/ 901 :                            ;            CHANGE X TO A$
 1911/ 901 :                            ;
 1912/ 901 : CD AA 1B                           CALL    VAR     ;NEXT WORD MUST BE VAR
 1913/ 904 : 7B                                 MOV     A,E     ;TEST TYPE
 1914/ 905 : B7                                 ORA     A       ;SET FLAGS
 1915/ 906 : F2 3F 09                           JP      CHA2    ;BRIF NOT-STRING
 1916/ 909 : CD 15 1B                           CALL    SEARC   ;GET ADDR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 33 - 9/26/2024 16:17:21


 1917/ 90C : D5                                 PUSH    D       ;SAVE IT
 1918/ 90D : 11 C0 1E                           LXI     D,TOLIT ;POINT 'TO'
 1919/ 910 : =>TRUE                     	IF ROMSTRT = 0
 1920/ 910 : D7                                 RST     2       ;GO COMPARE
 1921/ 911 : =>FALSE                    	ELSE
 1922/ 911 :                            		CALL	RST2	;GO COMPARE
 1923/ 911 : [1919]                     	ENDIF
 1924/ 911 : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
 1925/ 914 : CD AA 1B                           CALL    VAR     ;GET NEXT VARIABLE
 1926/ 917 : 7A                                 MOV     A,D     ;GET HI NAME
 1927/ 918 : F6 80                              ORI     80H     ;SET MASK FOR ARRAY
 1928/ 91A : 57                                 MOV     D,A     ;REPLACE
 1929/ 91B : CD 15 1B                           CALL    SEARC   ;GET ADDRESS
 1930/ 91E : =>TRUE                     	IF ROMSTRT = 0
 1931/ 91E : E7                         		RST     4       ;ADJUST H,L
 1932/ 91F : =>FALSE                    	ELSE
 1933/ 91F :                            		CALL	RST4	;ADJUST H,L
 1934/ 91F : [1930]                     	ENDIF
 1935/ 91F : F5                                 DB      -11
 1936/ 920 : D1                                 POP     D       ;GET PTR TO STMT
 1937/ 921 : EB                                 XCHG            ;FLIP
 1938/ 922 : CD 75 1A                           CALL    EOL     ;NEXT MUST BE E-O-L
 1939/ 925 : EB                                 XCHG            ;FLIP AGAIN
 1940/ 926 : D1                                 POP     D       ;GET ADDR STRING
 1941/ 927 : 1A                                 LDAX    D       ;GET COUNT
 1942/ 928 : 47                                 MOV     B,A     ;SAVE IT
 1943/ 929 : 04                                 INR     B       ;BUMP
 1944/ 92A : C5                         CHA1:   PUSH    B       ;SAVE CTR
 1945/ 92B : D5                                 PUSH    D       ;SAVE ADDR STRING
 1946/ 92C : E5                                 PUSH    H       ;SAVE ADDR NUM
 1947/ 92D : CD F1 0C                           CALL    FDEC    ;CONVERT TO F.P.
 1948/ 930 : E1                                 POP     H       ;GET ADDR
 1949/ 931 : =>TRUE                     	IF ROMSTRT = 0
 1950/ 931 : DF                                 RST     3       ;GO STORE THE VALUE
 1951/ 932 : =>FALSE                    	ELSE
 1952/ 932 :                            		CALL	RST3	;GO STORE THE VALUE
 1953/ 932 : [1949]                     	ENDIF
 1954/ 932 : =>TRUE                     	IF ROMSTRT = 0
 1955/ 932 : E7                         		RST     4       ;ADJUST H,L
 1956/ 933 : =>FALSE                    	ELSE
 1957/ 933 :                            		CALL	RST4	;ADJUST H,L
 1958/ 933 : [1954]                     	ENDIF
 1959/ 933 : F8                                 DB      -8
 1960/ 934 : D1                                 POP     D       ;RESTORE STRING
 1961/ 935 : C1                                 POP     B       ;AND CTR
 1962/ 936 : 13                                 INX     D       ;POINT NEXT CHAR
 1963/ 937 : 1A                                 LDAX    D       ;LOAD IT
 1964/ 938 : 05                                 DCR     B       ;DECR CTR
 1965/ 939 : C2 2A 09                           JNZ     CHA1    ;LOOP
 1966/ 93C : C3 E9 01                           JMP     RUN
 1967/ 93F :                            ;
 1968/ 93F :                            ;
 1969/ 93F : 7A                         CHA2:   MOV     A,D     ;GET HI NAME
 1970/ 940 : F6 80                              ORI     80H     ;MAKE ARRAY NAME
 1971/ 942 : 57                                 MOV     D,A     ;SAVE
 1972/ 943 : CD 15 1B                           CALL    SEARC   ;GET ADDR
 1973/ 946 : =>TRUE                     	IF ROMSTRT = 0
 1974/ 946 : E7                         		RST     4       ;ADJUST H,L
 1975/ 947 : =>FALSE                    	ELSE
 1976/ 947 :                            		CALL	RST4	;ADJUST H,L
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 34 - 9/26/2024 16:17:21


 1977/ 947 : [1973]                     	ENDIF
 1978/ 947 : F5                                 DB      -11
 1979/ 948 : E3                                 XTHL            ;SAVE ON STACK
 1980/ 949 : 11 C0 1E                           LXI     D,TOLIT ;POINT 'TO'
 1981/ 94C : =>TRUE                     	IF ROMSTRT = 0
 1982/ 94C : D7                                 RST     2       ;GO COMPARE
 1983/ 94D : =>FALSE                    	ELSE
 1984/ 94D :                            		CALL	RST2	;GO COMPARE
 1985/ 94D : [1981]                     	ENDIF
 1986/ 94D : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
 1987/ 950 : CD AA 1B                           CALL    VAR     ;GET NAME
 1988/ 953 : 7B                                 MOV     A,E     ;GET TYPE
 1989/ 954 : B7                                 ORA     A       ;SET FLAGS
 1990/ 955 : F2 F0 1B                           JP      SNERR   ;BRIF NOT STRING
 1991/ 958 : CD 75 1A                           CALL    EOL     ;BRIF NOT E-O-L
 1992/ 95B : CD 15 1B                           CALL    SEARC   ;GET ADDR
 1993/ 95E : E1                                 POP     H       ;GET ADDR VAR
 1994/ 95F : D5                                 PUSH    D       ;SAVE D,E
 1995/ 960 : 11 20 81                           LXI     D,STRIN ;POINT STRING BUFFER
 1996/ 963 : D5                                 PUSH    D       ;SAVE IT
 1997/ 964 : =>TRUE                     	IF ROMSTRT = 0
 1998/ 964 : EF                                 RST     5       ;LOAD IT
 1999/ 965 : =>FALSE                    	ELSE
 2000/ 965 :                            		CALL	RST5	;LOAD IT
 2001/ 965 : [1997]                     	ENDIF
 2002/ 965 : =>TRUE                     	IF ROMSTRT = 0
 2003/ 965 : E7                         		RST     4       ;ADJUST H,L
 2004/ 966 : =>FALSE                    	ELSE
 2005/ 966 :                            		CALL	RST4	;ADJUST H,L
 2006/ 966 : [2002]                     	ENDIF
 2007/ 966 : F8                                 DB      -8
 2008/ 967 : E5                                 PUSH    H       ;SAVE H,L
 2009/ 968 : CD 47 1C                           CALL    FBIN    ;CONVERT
 2010/ 96B : E1                                 POP     H       ;RESTORE
 2011/ 96C : D1                                 POP     D       ;DITTO
 2012/ 96D : 47                                 MOV     B,A     ;SAVE COUNT
 2013/ 96E : 04                                 INR     B       ;BUMP IT
 2014/ 96F : 12                         CHA3:   STAX    D       ;PUT TO STRING
 2015/ 970 : 13                                 INX     D       ;POINT NEXT STR LOC.
 2016/ 971 : C5                                 PUSH    B       ;SAVE CTRS
 2017/ 972 : D5                                 PUSH    D       ;AND AD^DR
 2018/ 973 : =>TRUE                     	IF ROMSTRT = 0
 2019/ 973 : EF                                 RST     5       ;LOAD IT
 2020/ 974 : =>FALSE                    	ELSE
 2021/ 974 :                            		CALL	RST5	;LOAD IT
 2022/ 974 : [2018]                     	ENDIF
 2023/ 974 : =>TRUE                     	IF ROMSTRT = 0
 2024/ 974 : E7                         		RST     4       ;ADJUST H,L
 2025/ 975 : =>FALSE                    	ELSE
 2026/ 975 :                            		CALL	RST4	;ADJUST H,L
 2027/ 975 : [2023]                     	ENDIF
 2028/ 975 : F8                                 DB      -8
 2029/ 976 : E5                                 PUSH    H       ;AND H ADDR
 2030/ 977 : CD 47 1C                           CALL    FBIN    ;CONVERT
 2031/ 97A : E1                                 POP     H       ;RESTORE H,L
 2032/ 97B : D1                                 POP     D       ;AND D,E
 2033/ 97C : C1                                 POP     B       ;AND CTRS
 2034/ 97D : 05                                 DCR     B       ;DECR CTR
 2035/ 97E : C2 6F 09                           JNZ     CHA3    ;LOOP
 2036/ 981 : E1                                 POP     H       ;GET ADDR OF VAR (STRING)
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 35 - 9/26/2024 16:17:21


 2037/ 982 : CD 08 06                           CALL    LET2A   ;GO STORE IT
 2038/ 985 : C3 E9 01                           JMP     RUN     ;CONTINUE
 2039/ 988 :                            ;
 2040/ 988 : =988H                      DIM     EQU     $
 2041/ 988 :                            ;
 2042/ 988 :                            ; STMT: DIM VAR(A,B),...
 2043/ 988 :                            ;
 2044/ 988 :                            ;
 2045/ 988 : CD AA 1B                           CALL    VAR     ;GO GET VAR NAME
 2046/ 98B : F2 F0 1B                           JP      SNERR   ;BRIF NO (
 2047/ 98E : CD 15 1B                           CALL    SEARC   ;GO LOCATE THE VAR
 2048/ 991 : E3                                 XTHL            ;PUT ADDR IN STACK, GET PTR TO (
 2049/ 992 : F5                                 PUSH    PSW     ;SAVE STATUS
 2050/ 993 : 3E FF                              MVI     A,0FFH  ;TURN ON SW
 2051/ 995 : 32 72 80                           STA     DIMSW   ;SET IT
 2052/ 998 : CD 57 0F                           CALL    EXPR    ;GO EVALUATE
 2053/ 99B : F1                                 POP     PSW     ;GET STATUS
 2054/ 99C : E3                                 XTHL            ;SWAP PTRS
 2055/ 99D : D5                                 PUSH    D       ;SAVE ROW NUMBER
 2056/ 99E : C5                                 PUSH    B       ;SAVE COL NUMBER
 2057/ 99F : 03                                 INX     B       ;INCREMENT COLUMNS
 2058/ 9A0 : 13                                 INX     D       ;AND ROWS
 2059/ 9A1 : E5                                 PUSH    H       ;SAVE H,L
 2060/ 9A2 : F5                                 PUSH    PSW     ;RESAVE STATUS
 2061/ 9A3 : 21 00 00                           LXI     H,0     ;GET A ZERO
 2062/ 9A6 : 19                         DIM1:   DAD     D       ;TIMES ONE
 2063/ 9A7 : 0B                                 DCX     B       ;DCR COLS
 2064/ 9A8 : 78                                 MOV     A,B     ;GET HI
 2065/ 9A9 : B1                                 ORA     C       ;PLUS LO
 2066/ 9AA : C2 A6 09                           JNZ     DIM1    ;LOOP
 2067/ 9AD : F1                                 POP     PSW     ;GET STATUS
 2068/ 9AE : D1                                 POP     D       ;GET ADDRESS
 2069/ 9AF : 29                                 DAD     H       ;TIMES TWO
 2070/ 9B0 : 29                                 DAD     H       ;TIMES FOUR
 2071/ 9B1 : 01 08 00                           LXI     B,8     ;PLUS 2 (NAME AND DISP)
 2072/ 9B4 : FA F4 09                           JM      REDIM   ;GO RE-DIMENSION
 2073/ 9B7 : E5                                 PUSH    H       ;SAVE PRODUCT
 2074/ 9B8 : 09                                 DAD     B       ;ADD IT
 2075/ 9B9 : EB                                 XCHG            ;FLIP/FLOP
 2076/ 9BA : 2B                                 DCX     H       ;POINT LO NAME
 2077/ 9BB : 2B                                 DCX     H       ;POINT HI DISP
 2078/ 9BC : 7B                                 MOV     A,E     ;GET LO
 2079/ 9BD : 2F                                 CMA             ;COMPLEMENT
 2080/ 9BE : C6 01                              ADI     1       ;PLUS ONE
 2081/ 9C0 : 5F                                 MOV     E,A     ;RESTORE
 2082/ 9C1 : 7A                                 MOV     A,D     ;GET HI
 2083/ 9C2 : 2F                                 CMA             ;COMPLEMENT
 2084/ 9C3 : CE 00                              ACI     0       ;PLUS CARRY
 2085/ 9C5 : 77                                 MOV     M,A     ;STORE IT
 2086/ 9C6 : 2B                                 DCX     H       ;POINT NEXT
 2087/ 9C7 : 73                                 MOV     M,E     ;STORE LO
 2088/ 9C8 : EB                                 XCHG            ;SAVE IN D,E
 2089/ 9C9 : E1                                 POP     H       ;GET PRODUCT
 2090/ 9CA : 44                                 MOV     B,H     ;COPY H,L
 2091/ 9CB : 4D                                 MOV     C,L     ;TO B,C
 2092/ 9CC : EB                                 XCHG            ;GET LOCAT
 2093/ 9CD : D1                                 POP     D       ;GET COLUMNS
 2094/ 9CE : 2B                                 DCX     H       ;POINT NEXT
 2095/ 9CF : 72                                 MOV     M,D     ;MOVE LO COL
 2096/ 9D0 : 2B                                 DCX     H       ;POINT NEXT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 36 - 9/26/2024 16:17:21


 2097/ 9D1 : 73                                 MOV     M,E     ;MOVE HI COL
 2098/ 9D2 : D1                                 POP     D       ;GET ROWS
 2099/ 9D3 : 2B                                 DCX     H       ;POINT NEXT
 2100/ 9D4 : 72                                 MOV     M,D     ;MOVE HI ROW
 2101/ 9D5 : 2B                                 DCX     H       ;POINT NEXT
 2102/ 9D6 : 73                                 MOV     M,E     ;MOVE LO ROW
 2103/ 9D7 : 2B                                 DCX     H       ;POINT NEXT
 2104/ 9D8 : 36 00                      DIM2:   MVI     M,0     ;CLEAR ONE BYTE
 2105/ 9DA : 2B                                 DCX     H       ;POINT NEXT
 2106/ 9DB : 0B                                 DCX     B       ;DECR CTR
 2107/ 9DC : 78                                 MOV     A,B     ;GET HI
 2108/ 9DD : B1                                 ORA     C       ;PLUS LO
 2109/ 9DE : C2 D8 09                           JNZ     DIM2    ;LOOP
 2110/ 9E1 : 36 00                              MVI     M,0     ;MARK END
 2111/ 9E3 : E1                         DIM3:   POP     H       ;GET PTR TO STMT
 2112/ 9E4 : 7E                                 MOV     A,M     ;LOAD CHAR
 2113/ 9E5 : FE 2C                              CPI     ','     ;TEST IF COMMA
 2114/ 9E7 : C2 EE 09                           JNZ     DIM4    ;BRIF NOT
 2115/ 9EA : 23                                 INX     H       ;SKIP IT
 2116/ 9EB : C3 88 09                           JMP     DIM     ;CONTINUE
 2117/ 9EE : CD 75 1A                   DIM4:   CALL    EOL     ;TEST END OF LINE
 2118/ 9F1 : C3 E9 01                           JMP     RUN     ;CONTINUE WITH PROGRAM
 2119/ 9F4 : 09                         REDIM:  DAD     B       ;COMPUTE LEN TO NEXT
 2120/ 9F5 : 1B                                 DCX     D       ;POINT LO NAME
 2121/ 9F6 : 1B                                 DCX     D       ;POINT HI DISP
 2122/ 9F7 : 1A                                 LDAX    D       ;GET IT
 2123/ 9F8 : 47                                 MOV     B,A     ;SAVE
 2124/ 9F9 : 1B                                 DCX     D       ;POINT LO DISP
 2125/ 9FA : 1A                                 LDAX    D       ;GET IT
 2126/ 9FB : 4F                                 MOV     C,A     ;SAVE
 2127/ 9FC : 09                                 DAD     B       ;COMPUTE DIFF OR PRIOR DIM AND THIS
 2128/ 9FD : 7C                                 MOV     A,H     ;GET HI DIFF
 2129/ 9FE : B7                                 ORA     A       ;TEST IT
 2130/ 9FF : FA 0A 0A                           JM      REDM1   ;BRIF PREV > NEW
 2131/ A02 : C2 F0 1B                           JNZ     SNERR   ;BRIF PREV < NEW
 2132/ A05 : 7D                                 MOV     A,L     ;GET LO DIFF
 2133/ A06 : B7                                 ORA     A       ;TEST IT
 2134/ A07 : C2 F0 1B                           JNZ     SNERR   ;BRIF PREV < NEW
 2135/ A0A : EB                         REDM1:  XCHG            ;PUT ADDR IN H,L
 2136/ A0B : 2B                                 DCX     H       ;POINT HI COL
 2137/ A0C : D1                                 POP     D       ;GET COL
 2138/ A0D : 72                                 MOV     M,D     ;MOVE HI
 2139/ A0E : 2B                                 DCX     H       ;POINT LO COL
 2140/ A0F : 73                                 MOV     M,E     ;MOVE LO
 2141/ A10 : D1                                 POP     D       ;GET ROW
 2142/ A11 : 2B                                 DCX     H       ;POINT HI ROW
 2143/ A12 : 72                                 MOV     M,D     ;MOVE HI
 2144/ A13 : 2B                                 DCX     H       ;POINT LO ROW
 2145/ A14 : 73                                 MOV     M,E     ;MOVE LO
 2146/ A15 : C3 E3 09                           JMP     DIM3    ;CONTINUE
 2147/ A18 :                            ;
 2148/ A18 : =0A18H                     SIN     EQU     $
 2149/ A18 :                            ;
 2150/ A18 :                            ; COMPUTE SINE OF X, (X IN RADIANS)
 2151/ A18 :                            ;
 2152/ A18 :                            ; USES 4TH DEGREE POLYNOMIAL APPROXIMATION
 2153/ A18 :                            ;
 2154/ A18 :                            ;
 2155/ A18 :                            ; FIRST, REDUCE ANGLE TO RANGE: (-PI/2,PI/2)
 2156/ A18 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 37 - 9/26/2024 16:17:21


 2157/ A18 : CD A5 18                           CALL    FTEST   ;GET STATUS OF ANGLE
 2158/ A1B : C8                                 RZ              ;SIN(0)=0
 2159/ A1C : F5                                 PUSH    PSW     ;SAVE SIGN OF ANGLE
 2160/ A1D : CD 9E 0B                           CALL    ABS
 2161/ A20 : F1                         SIN1:   POP     PSW     ;COMPLEMENT SIGN FOR EACH PI SUB'D
 2162/ A21 : 2F                                 CMA             ;..
 2163/ A22 : F5                                 PUSH    PSW     ;..
 2164/ A23 : 21 A4 1D                           LXI     H,PI    ;REDUCE TO -PI<X<0
 2165/ A26 : CD E3 16                           CALL    FSUB
 2166/ A29 : F2 20 0A                           JP      SIN1
 2167/ A2C : 21 D8 1D                           LXI     H,HALFP ;NOW ADD PI FOR -PI<X<-PI/2
 2168/ A2F : E5                                 PUSH    H
 2169/ A30 : CD 0E 16                           CALL    FADD
 2170/ A33 : F4 51 0C                           CP      NEG     ;AND JUST NEGATE FOR -PI/2<X<0
 2171/ A36 : E1                                 POP     H
 2172/ A37 : CD 0E 16                           CALL    FADD
 2173/ A3A : F1                                 POP     PSW     ;RESTORE SIGN
 2174/ A3B : B7                                 ORA     A
 2175/ A3C : F4 51 0C                           CP      NEG
 2176/ A3F :                            ;
 2177/ A3F :                            ; INIT REGISTERS
 2178/ A3F :                            ;
 2179/ A3F : 21 2F 82                           LXI     H,TEMP1 ;POINT IT
 2180/ A42 : =>TRUE                     	IF ROMSTRT = 0
 2181/ A42 : DF                                 RST     3       ;GO STORE THE VALUE
 2182/ A43 : =>FALSE                    	ELSE
 2183/ A43 :                            		CALL	RST3	;GO STORE THE VALUE
 2184/ A43 : [2180]                     	ENDIF
 2185/ A43 : 3A 58 82                           LDA     FACC    ;GET SIGN&EXPONENT
 2186/ A46 : CD B3 18                           CALL    FEXP    ;EXPAND EXPON.
 2187/ A49 : F2 4F 0A                           JP      SIN3A   ;BRIF POSITIVE
 2188/ A4C : FE FD                              CPI     0FDH    ;TEST EXPONENT
 2189/ A4E : D8                                 RC              ;RETURN IF VERY SMALL RADIAN
 2190/ A4F :                            ;
 2191/ A4F :                            ; ABOVE ROUTINE WILL APPROX SIN(X) == X FOR X: (-.06,.06)
 2192/ A4F :                            ;
 2193/ A4F : 21 D8 1D                   SIN3A:  LXI     H,HALFP ;POINT PI/2
 2194/ A52 : CD 72 17                           CALL    FDIV    ;COMPUTE X/PI/2
 2195/ A55 : 21 33 82                           LXI     H,TEMP2 ;POINT T2
 2196/ A58 : =>TRUE                     	IF ROMSTRT = 0
 2197/ A58 : DF                                 RST     3       ;GO STORE THE VALUE
 2198/ A59 : =>FALSE                    	ELSE
 2199/ A59 :                            		CALL	RST3	;GO STORE THE VALUE
 2200/ A59 : [2196]                     	ENDIF
 2201/ A59 : 21 33 82                           LXI     H,TEMP2 ;POINT BACK
 2202/ A5C : CD EF 16                           CALL    FMUL    ;COMPUTE SQUARE
 2203/ A5F : 21 E8 1D                           LXI     H,SINCO ;POINT CONSTANTS
 2204/ A62 :                            ;
 2205/ A62 :                            ; EVALUATE POWER SERIES
 2206/ A62 :                            ;
 2207/ A62 :                            ; EVALUATE STARTING FROM HIGH ORDER COEFFICIENT:
 2208/ A62 :                            ;  F(X)=(...(CN*FACC+C(N-1))*FACC+...+C1)*FACC*TEMP2+TEMP1
 2209/ A62 :                            ;
 2210/ A62 :                            ;ON ENTRY:
 2211/ A62 :                            ;       TEMP1=CONSTANT TERM
 2212/ A62 :                            ;       TEMP2=X OR 1
 2213/ A62 :                            ;       FACC=X^2 OR X
 2214/ A62 :                            ;       (HL)=COEFFICIENT OF LAST TERM
 2215/ A62 :                            ;
 2216/ A62 : E5                         EVPS:   PUSH    H       ;SAVE POINTER TO COEFFICIENTS
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 38 - 9/26/2024 16:17:21


 2217/ A63 : 21 37 82                           LXI     H,TEMP3 ;SAVE FACC
 2218/ A66 : =>TRUE                     	IF ROMSTRT = 0
 2219/ A66 : DF                                 RST     3       ;GO STORE THE VALUE
 2220/ A67 : =>FALSE                    	ELSE
 2221/ A67 :                            		CALL	RST3	;GO STORE THE VALUE
 2222/ A67 : [2218]                     	ENDIF
 2223/ A67 : E1                                 POP     H       ;RESTORE H
 2224/ A68 : E5                                 PUSH    H
 2225/ A69 : C3 73 0A                           JMP     EVPS2
 2226/ A6C : E5                         EVPS1:  PUSH    H       ;SAVE PTR TO NEXT COEFFICIENT
 2227/ A6D : CD 0E 16                           CALL    FADD    ;FACC+CN->FACC
 2228/ A70 : 21 37 82                           LXI     H,TEMP3 ;POINTER TO X^N
 2229/ A73 : CD EF 16                   EVPS2:  CALL    FMUL    ;FACC*X^N->FACC
 2230/ A76 : E1                                 POP     H       ;COEFFICENT PTR
 2231/ A77 : =>TRUE                     	IF ROMSTRT = 0
 2232/ A77 : E7                         		RST     4       ;ADJUST H,L
 2233/ A78 : =>FALSE                    	ELSE
 2234/ A78 :                            		CALL	RST4	;ADJUST H,L
 2235/ A78 : [2231]                     	ENDIF
 2236/ A78 : FC                                 DB      -4
 2237/ A79 : 7E                                 MOV     A,M     ;GET EXPONENT
 2238/ A7A : 3D                                 DCR     A       ;TEST FOR 1
 2239/ A7B : C2 6C 0A                           JNZ     EVPS1   ;BRIF NOT 1
 2240/ A7E : 21 33 82                           LXI     H,TEMP2 ;MUL BY TEMP2
 2241/ A81 : CD EF 16                           CALL    FMUL
 2242/ A84 : 21 2F 82                           LXI     H,TEMP1 ;POINT TO CONSTANT TERM
 2243/ A87 : C3 0E 16                           JMP     FADD    ;ADD IT AND RETURN TO CALLER
 2244/ A8A :                            ;
 2245/ A8A : =0A8AH                     COS     EQU     $
 2246/ A8A :                            ;
 2247/ A8A :                            ;
 2248/ A8A :                            ; COMPUTE COSINE OF ANGLE, X EXPRESSED IN RADIANS
 2249/ A8A :                            ; USES THE TRANSFORMATION: Y = PI/2 +- X
 2250/ A8A :                            ;     AND THEN COMPUTES SIN(Y).
 2251/ A8A :                            ;
 2252/ A8A :                            ;
 2253/ A8A : 21 D8 1D                           LXI     H,HALFP ;COMPUTE PI/2 + X
 2254/ A8D : CD 0E 16                           CALL    FADD    ;GO ADD
 2255/ A90 : C3 18 0A                           JMP     SIN     ;GO COMPUTE SINE
 2256/ A93 :                            ;
 2257/ A93 : =0A93H                     TAN     EQU     $
 2258/ A93 :                            ;
 2259/ A93 :                            ; COMPUTE TANGENT OF X, IN RADIANS
 2260/ A93 :                            ; USES THE RELATION:
 2261/ A93 :                            ;
 2262/ A93 :                            ;          SIN(X)
 2263/ A93 :                            ; TAN(X) = ------
 2264/ A93 :                            ;          COS(X)
 2265/ A93 :                            ;
 2266/ A93 : 21 3B 82                           LXI     H,TEMP4 ;POINT SAVE AREA
 2267/ A96 : =>TRUE                     	IF ROMSTRT = 0
 2268/ A96 : DF                                 RST     3       ;GO STORE THE VALUE
 2269/ A97 : =>FALSE                    	ELSE
 2270/ A97 :                            		CALL	RST3	;GO STORE THE VALUE
 2271/ A97 : [2267]                     	ENDIF
 2272/ A97 : CD 8A 0A                           CALL    COS     ;COMPUTE COS(X)
 2273/ A9A : 21 47 82                           LXI     H,TEMP7 ;SAVE COS(X)->TEMP7
 2274/ A9D : =>TRUE                     	IF ROMSTRT = 0
 2275/ A9D : DF                                 RST     3       ;GO STORE THE VALUE
 2276/ A9E : =>FALSE                    	ELSE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 39 - 9/26/2024 16:17:21


 2277/ A9E :                            		CALL	RST3	;GO STORE THE VALUE
 2278/ A9E : [2274]                     	ENDIF
 2279/ A9E : 21 3B 82                           LXI     H,TEMP4 ;MOVE X->FACC
 2280/ AA1 : =>TRUE                     	IF ROMSTRT = 0
 2281/ AA1 : EF                                 RST     5       ;LOAD IT
 2282/ AA2 : =>FALSE                    	ELSE
 2283/ AA2 :                            		CALL	RST5	;LOAD IT
 2284/ AA2 : [2280]                     	ENDIF
 2285/ AA2 :                            
 2286/ AA2 : CD 18 0A                           CALL    SIN     ;COMPUTE SINE
 2287/ AA5 : 21 47 82                           LXI     H,TEMP7 ;POINT COS
 2288/ AA8 : C3 72 17                           JMP     FDIV    ;DIVIDE AND RETURN TO CALLER
 2289/ AAB :                            ;
 2290/ AAB : =0AABH                     ATN     EQU     $
 2291/ AAB :                            ;
 2292/ AAB :                            ; COMPUTES THE ARCTANGENT OF X
 2293/ AAB :                            ; USES A SEVENTH DEGREE POLYNOMIAL APPROXIMATION
 2294/ AAB :                            ;
 2295/ AAB : CD A5 18                           CALL    FTEST   ;CHECK SIGN OF ARGUMENT
 2296/ AAE : F2 BA 0A                           JP      ATN1    ;BRIF POSITIVE
 2297/ AB1 : CD 51 0C                           CALL    NEG     ;REVERSE SIGN
 2298/ AB4 : CD BA 0A                           CALL    ATN1    ;GET POSITIVE ATN
 2299/ AB7 : C3 51 0C                           JMP     NEG     ;MAKE NEG & RETURN
 2300/ ABA :                            ;
 2301/ ABA : 21 EC 1D                   ATN1:   LXI     H,ONE   ;POINT: 1
 2302/ ABD : CD 0E 16                           CALL    FADD    ;GO ADD
 2303/ AC0 : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE
 2304/ AC3 : =>TRUE                     	IF ROMSTRT = 0
 2305/ AC3 : DF                                 RST     3       ;GO STORE THE VALUE
 2306/ AC4 : =>FALSE                    	ELSE
 2307/ AC4 :                            		CALL	RST3	;GO STORE THE VALUE
 2308/ AC4 : [2304]                     	ENDIF
 2309/ AC4 : 21 9C 1D                           LXI     H,TWO   ;POINT: 2
 2310/ AC7 : CD E3 16                           CALL    FSUB    ;GO SUBTRACT
 2311/ ACA : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVED
 2312/ ACD : CD 72 17                           CALL    FDIV    ;DIVIDE
 2313/ AD0 : 21 33 82                           LXI     H,TEMP2 ;POINT SAVE
 2314/ AD3 : =>TRUE                     	IF ROMSTRT = 0
 2315/ AD3 : DF                                 RST     3       ;SAVE X'=(X-1)/(X+1)
 2316/ AD4 : =>FALSE                    	ELSE
 2317/ AD4 :                            		CALL	RST3	;SAVE X'=(X-1)/(X+1)
 2318/ AD4 : [2314]                     	ENDIF
 2319/ AD4 : 21 A8 1D                           LXI     H,QTRPI ;X'+PI/4 -> TEMP1
 2320/ AD7 : CD 0E 16                           CALL    FADD
 2321/ ADA : 21 2F 82                           LXI     H,TEMP1
 2322/ ADD : =>TRUE                     	IF ROMSTRT = 0
 2323/ ADD : DF                                 RST     3       ;GO STORE THE VALUE
 2324/ ADE : =>FALSE                    	ELSE
 2325/ ADE :                            		CALL	RST3	;GO STORE THE VALUE
 2326/ ADE : [2322]                     	ENDIF
 2327/ ADE : E5                                 PUSH    H       ;SAVE PTR TO TEMP2
 2328/ ADF : =>TRUE                     	IF ROMSTRT = 0
 2329/ ADF : EF                                 RST     5       ;LOAD IT
 2330/ AE0 : =>FALSE                    	ELSE
 2331/ AE0 :                            		CALL	RST5	;LOAD IT
 2332/ AE0 : [2328]                     	ENDIF
 2333/ AE0 : E1                                 POP     H
 2334/ AE1 : CD EF 16                           CALL    FMUL    ;FACC=X'*X'
 2335/ AE4 : 21 D4 1D                           LXI     H,ATNCO ;POINT LIST COEFFICIENTS
 2336/ AE7 : C3 62 0A                           JMP     EVPS    ;GO COMPUTE & RETURN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 40 - 9/26/2024 16:17:21


 2337/ AEA :                            ;
 2338/ AEA : =0AEAH                     LN      EQU     $
 2339/ AEA :                            ;
 2340/ AEA :                            ;
 2341/ AEA :                            ; COMPUTES THE NATRUAL LOGRITHM, LN(X)
 2342/ AEA :                            ; USES A 7TH DEGREE POLYNOMIAL APPROXIMATION
 2343/ AEA :                            ;
 2344/ AEA : CD A5 18                           CALL    FTEST   ;TEST THE ARGUMENT
 2345/ AED : FA E8 1B                           JM      ZMERR   ;LN(-X)=NO NO
 2346/ AF0 : CA E8 1B                           JZ      ZMERR   ;LN(0)=NO NO ALSO
 2347/ AF3 : 21 33 82                           LXI     H,TEMP2 ;POINT SAVE AREA
 2348/ AF6 : =>TRUE                     	IF ROMSTRT = 0
 2349/ AF6 : DF                                 RST     3       ;GO STORE THE VALUE
 2350/ AF7 : =>FALSE                    	ELSE
 2351/ AF7 :                            		CALL	RST3	;GO STORE THE VALUE
 2352/ AF7 : [2348]                     	ENDIF
 2353/ AF7 : 3A 58 82                           LDA     FACC    ;GET EXPON
 2354/ AFA : CD B3 18                           CALL    FEXP    ;EXPAND TO 8 BITS
 2355/ AFD : CA 03 0B                           JZ      LN0     ;BRIF 0.5 < X < 1.0
 2356/ B00 : F2 0F 0B                           JP      LN1     ;BRIF POSITIVE EXPONENT
 2357/ B03 : 2F                         LN0:    CMA             ;ELSE COMPLIMENT
 2358/ B04 : C6 02                              ADI     2       ;PLUS TWO
 2359/ B06 : CD F1 0C                           CALL    FDEC    ;CONVERT TO FLOAT POINT
 2360/ B09 : CD 51 0C                           CALL    NEG     ;THEN NEGATE
 2361/ B0C : C3 14 0B                           JMP     LN2     ;GO AROUND
 2362/ B0F : DE 01                      LN1:    SBI     1       ;MINUS ONE
 2363/ B11 : CD F1 0C                           CALL    FDEC    ;CONVERT TO FLOATING POINT
 2364/ B14 : 21 B0 1D                   LN2:    LXI     H,LN2C  ;POINT LN(2)
 2365/ B17 : CD EF 16                           CALL    FMUL    ;MULTIPLY
 2366/ B1A : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE AREA
 2367/ B1D : =>TRUE                     	IF ROMSTRT = 0
 2368/ B1D : DF                                 RST     3       ;GO STORE THE VALUE
 2369/ B1E : =>FALSE                    	ELSE
 2370/ B1E :                            		CALL	RST3	;GO STORE THE VALUE
 2371/ B1E : [2367]                     	ENDIF
 2372/ B1E : =>TRUE                     	IF ROMSTRT = 0
 2373/ B1E : EF                                 RST     5       ;LOAD IT
 2374/ B1F : =>FALSE                    	ELSE
 2375/ B1F :                            		CALL	RST5	;LOAD IT
 2376/ B1F : [2372]                     	ENDIF
 2377/ B1F : 3E 01                              MVI     A,1     ;GET EXPONENT: 1
 2378/ B21 : 32 58 82                           STA     FACC    ;ADJUST TO RANGE (1,2)
 2379/ B24 : 21 EC 1D                           LXI     H,ONE   ;POINT 1
 2380/ B27 : E5                                 PUSH    H       ;SAVE PTR TO ONE
 2381/ B28 : CD E3 16                           CALL    FSUB    ;SUBTRACT ONE
 2382/ B2B : D1                                 POP     D       ;SET TEMP2=1
 2383/ B2C : 21 33 82                           LXI     H,TEMP2
 2384/ B2F : CD 2C 1C                           CALL    CPY4D
 2385/ B32 : 21 08 1E                           LXI     H,LNCO  ;POINT COEFFICIENTS
 2386/ B35 : C3 62 0A                           JMP     EVPS    ;APPROXIMATE & RETURN
 2387/ B38 :                            ;
 2388/ B38 :                            ; X=LOG(X) --- THIS IS LOG BASE 10.
 2389/ B38 :                            ;
 2390/ B38 : =0B38H                     LOG     EQU     $
 2391/ B38 : CD EA 0A                           CALL    LN      ;COMPUTE NATURAL LOG
 2392/ B3B : 21 24 1E                           LXI     H,LNC   ;POINT LOG(E)
 2393/ B3E : C3 EF 16                           JMP     FMUL    ;MULTIPLY AND RETURN
 2394/ B41 :                            ;
 2395/ B41 : =0B41H                     EXP     EQU     $
 2396/ B41 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 41 - 9/26/2024 16:17:21


 2397/ B41 :                            ;  COMPUTES EXP(X) USING ALGORITHM EXP(X)=(2^I)*(2^FP) WHERE
 2398/ B41 :                            ;  2^I=INT(X*LN BASE 2 OF E) AND,
 2399/ B41 :                            ;  2^FP=5TH DEGREE POLY. APPROXIMATION
 2400/ B41 :                            ;  FP=FRACTIONAL PART OF INT(X*LN2E)
 2401/ B41 :                            ;
 2402/ B41 : CD A5 18                           CALL    FTEST   ;CHECK SIGN
 2403/ B44 : F2 5B 0B                           JP      EXP1    ;BRIF POSITIVE
 2404/ B47 : CD 51 0C                           CALL    NEG     ;ELSE, REVERSE SIGN
 2405/ B4A : CD 5B 0B                           CALL    EXP1    ;COMPUTE POSITIVE EXP
 2406/ B4D : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE AREA
 2407/ B50 : =>TRUE                     	IF ROMSTRT = 0
 2408/ B50 : DF                                 RST     3       ;GO STORE THE VALUE
 2409/ B51 : =>FALSE                    	ELSE
 2410/ B51 :                            		CALL	RST3	;GO STORE THE VALUE
 2411/ B51 : [2407]                     	ENDIF
 2412/ B51 : 21 EC 1D                           LXI     H,ONE   ;POINT 1
 2413/ B54 : =>TRUE                     	IF ROMSTRT = 0
 2414/ B54 : EF                                 RST     5       ;LOAD IT
 2415/ B55 : =>FALSE                    	ELSE
 2416/ B55 :                            		CALL	RST5	;LOAD IT
 2417/ B55 : [2413]                     	ENDIF
 2418/ B55 :                            
 2419/ B55 : 21 2F 82                           LXI     H,TEMP1 ;POINT PREV
 2420/ B58 : C3 72 17                           JMP     FDIV    ;RECIPRICAL AND RETURN
 2421/ B5B :                            ;
 2422/ B5B : 21 0C 1E                   EXP1:   LXI     H,LN2E  ;POINT LN BASE 2 OF E
 2423/ B5E : CD EF 16                           CALL    FMUL    ;FACC=X*(LN2E)
 2424/ B61 : 21 37 82                           LXI     H,TEMP3 ;POINT SAVE AREA
 2425/ B64 : =>TRUE                     	IF ROMSTRT = 0
 2426/ B64 : DF                                 RST     3       ;GO STORE THE VALUE
 2427/ B65 : =>FALSE                    	ELSE
 2428/ B65 :                            		CALL	RST3	;GO STORE THE VALUE
 2429/ B65 : [2425]                     	ENDIF
 2430/ B65 : CD B9 0B                           CALL    INT     ;FACC=INT(X*LN2E)
 2431/ B68 : 21 3B 82                           LXI     H,TEMP4 ;POINT SAVE AREA
 2432/ B6B : =>TRUE                     	IF ROMSTRT = 0
 2433/ B6B : DF                                 RST     3       ;GO STORE THE VALUE
 2434/ B6C : =>FALSE                    	ELSE
 2435/ B6C :                            		CALL	RST3	;GO STORE THE VALUE
 2436/ B6C : [2432]                     	ENDIF
 2437/ B6C : =>TRUE                     	IF ROMSTRT = 0
 2438/ B6C : DF                                 RST     3       ;GO STORE THE VALUE
 2439/ B6D : =>FALSE                    	ELSE
 2440/ B6D :                            		CALL	RST3	;GO STORE THE VALUE
 2441/ B6D : [2437]                     	ENDIF
 2442/ B6D : 3A 58 82                           LDA     FACC    ;GET THE EXPONENT COUNT
 2443/ B70 : 47                                 MOV     B,A     ;SAVE COUNT IN B
 2444/ B71 : 3A 59 82                           LDA     FACC+1  ;GET MANTISSA
 2445/ B74 : 07                         ELOOP:  RLC             ;ROTATE LEFT
 2446/ B75 : 05                                 DCR     B       ;REDUCE COUNT
 2447/ B76 : C2 74 0B                           JNZ     ELOOP   ;CONTINUE SHIFTING
 2448/ B79 : 3C                                 INR     A       ;ADJUST EXPONENT
 2449/ B7A : 32 3B 82                           STA     TEMP4   ;STORE EXPONENT
 2450/ B7D : 3E 80                              MVI     A,80H   ;LOAD CONSTANT
 2451/ B7F : 32 3C 82                           STA     TEMP4+1 ;STORE AS MANTISSA
 2452/ B82 : 21 EC 1D                           LXI     H,ONE   ;1 -> TEMP1, TEMP2
 2453/ B85 : =>TRUE                     	IF ROMSTRT = 0
 2454/ B85 : EF                                 RST     5       ;LOAD IT
 2455/ B86 : =>FALSE                    	ELSE
 2456/ B86 :                            		CALL	RST5	;LOAD IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 42 - 9/26/2024 16:17:21


 2457/ B86 : [2453]                     	ENDIF
 2458/ B86 :                            
 2459/ B86 : 21 2F 82                           LXI     H,TEMP1
 2460/ B89 : =>TRUE                     	IF ROMSTRT = 0
 2461/ B89 : DF                                 RST     3       ;GO STORE THE VALUE
 2462/ B8A : =>FALSE                    	ELSE
 2463/ B8A :                            		CALL	RST3	;GO STORE THE VALUE
 2464/ B8A : [2460]                     	ENDIF
 2465/ B8A : =>TRUE                     	IF ROMSTRT = 0
 2466/ B8A : DF                                 RST     3       ;GO STORE THE VALUE
 2467/ B8B : =>FALSE                    	ELSE
 2468/ B8B :                            		CALL	RST3	;GO STORE THE VALUE
 2469/ B8B : [2465]                     	ENDIF
 2470/ B8B : =>TRUE                     	IF ROMSTRT = 0
 2471/ B8B : EF                                 RST     5       ;LOAD TEMP3=INT(X*LN2E)
 2472/ B8C : =>FALSE                    	ELSE
 2473/ B8C :                            		CALL	RST5	;LOAD TEMP3=INT(X*LN2E)
 2474/ B8C : [2470]                     	ENDIF
 2475/ B8C : 21 3F 82                           LXI     H,TEMP5 ;GET FACC=FP(X*LN2E)
 2476/ B8F : CD E3 16                           CALL    FSUB
 2477/ B92 : 21 20 1E                           LXI     H,EXPCO ;POINT CONSTANTS
 2478/ B95 : CD 62 0A                           CALL    EVPS    ;COMPUTE POLYNOMIAL
 2479/ B98 : 21 3B 82                           LXI     H,TEMP4 ;POINT 2^(INT(X*LN2E))
 2480/ B9B : C3 EF 16                           JMP     FMUL    ;MULTIPLY,NORMALIZE AND RETURN
 2481/ B9E :                            ;
 2482/ B9E :                            ;
 2483/ B9E : =0B9EH                     ABS     EQU     $
 2484/ B9E :                            ;
 2485/ B9E :                            ;
 2486/ B9E :                            ; RETURN THE ABSOLUTE VALUE OF THE FLOATING ACCUMULATOR
 2487/ B9E :                            ;
 2488/ B9E :                            ;
 2489/ B9E : 3A 58 82                           LDA     FACC    ;GET EXPONENT
 2490/ BA1 : E6 7F                              ANI     7FH     ;STRIP NEGATIVE SIGN
 2491/ BA3 : 32 58 82                           STA     FACC    ;REPLACE
 2492/ BA6 : C9                                 RET             ;RETURN
 2493/ BA7 :                            ;
 2494/ BA7 : =0BA7H                     SGN     EQU     $
 2495/ BA7 :                            ;
 2496/ BA7 :                            ;
 2497/ BA7 :                            ; RETURNS THE SIGN OF THE FLOATING ACCUMULATOR
 2498/ BA7 :                            ; THAT IS:
 2499/ BA7 :                            ;  1 IF FACC > 0
 2500/ BA7 :                            ;  0 IF FACC = 0
 2501/ BA7 :                            ; -1 IF FACC < 0
 2502/ BA7 :                            ;
 2503/ BA7 : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 2504/ BAA : C8                                 RZ              ;RETURN IF ZERO
 2505/ BAB : E6 80                              ANI     80H     ;ISOLATE SIGN
 2506/ BAD : F6 01                      SGN1:   ORI     1       ;CREATE EXPONENT
 2507/ BAF : F5                                 PUSH    PSW     ;SAVE IT
 2508/ BB0 : 21 EC 1D                           LXI     H,ONE   ;GET ADDRESS OF CONSTANT 1
 2509/ BB3 : =>TRUE                     	IF ROMSTRT = 0
 2510/ BB3 : EF                                 RST     5       ;LOAD IT
 2511/ BB4 : =>FALSE                    	ELSE
 2512/ BB4 :                            		CALL	RST5	;LOAD IT
 2513/ BB4 : [2509]                     	ENDIF
 2514/ BB4 : F1                                 POP     PSW     ;RESTORE SIGN
 2515/ BB5 : 32 58 82                           STA     FACC    ;SET THE SIGN
 2516/ BB8 : C9                                 RET             ;RETURN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 43 - 9/26/2024 16:17:21


 2517/ BB9 :                            ;
 2518/ BB9 : =0BB9H                     INT     EQU     $
 2519/ BB9 :                            ;
 2520/ BB9 :                            ;
 2521/ BB9 :                            ; RETURNS THE GREATEST INTEGER NOT LARGER THAN VALUE IN FACC
 2522/ BB9 :                            ; E.G.:
 2523/ BB9 :                            ;    INT(3.14159) =  3
 2524/ BB9 :                            ;    INT(0)       =  0
 2525/ BB9 :                            ;    INT(-3.1415) = -4
 2526/ BB9 :                            ;
 2527/ BB9 :                            ;
 2528/ BB9 : 21 58 82                           LXI     H,FACC  ;POINT FLOAT ACC
 2529/ BBC : 7E                                 MOV     A,M     ;GET EXPONENT
 2530/ BBD : E6 40                              ANI     40H     ;GET SIGN OF CHARACTERISTIC
 2531/ BBF : CA C7 0B                           JZ      INT2    ;BRIF GE ZERO
 2532/ BC2 : 06 04                              MVI     B,4     ;LOOP CTR
 2533/ BC4 : C3 3F 1C                           JMP     ZEROM   ;GO ZERO THE FACC
 2534/ BC7 : 7E                         INT2:   MOV     A,M     ;GET EXPONENT AGAIN
 2535/ BC8 : B7                                 ORA     A       ;TEST SIGN
 2536/ BC9 : F2 D6 0B                           JP      INT3    ;BRIF POSITIVE OR ZERO
 2537/ BCC : 21 AC 1D                           LXI     H,NEGON ;POINT CONSTANT: -.9999999
 2538/ BCF : CD 0E 16                           CALL    FADD    ;ADD TO FACC
 2539/ BD2 : 21 58 82                           LXI     H,FACC  ;POINT EXPONTENT AGAIN
 2540/ BD5 : 7E                                 MOV     A,M     ;LOAD IT
 2541/ BD6 : E6 3F                      INT3:   ANI     3FH     ;ISOLATE CHARACTERISTIC
 2542/ BD8 : FE 18                              CPI     24      ;TEST IF ANY FRACTION
 2543/ BDA : F0                                 RP              ;RETURN IF NOT
 2544/ BDB : 47                                 MOV     B,A     ;SAVE EXPONENT
 2545/ BDC : 3E 18                              MVI     A,24    ;GET CONSTANT
 2546/ BDE : 90                                 SUB     B       ;MINUS EXPONENT = LOOP CTR
 2547/ BDF : 4F                                 MOV     C,A     ;SAVE IT
 2548/ BE0 : 21 59 82                   INT4:   LXI     H,FACC+1        ;POINT MSB
 2549/ BE3 : AF                                 XRA     A       ;CLEAR CY FLAG
 2550/ BE4 : 06 03                              MVI     B,3     ;BYTE COUNT
 2551/ BE6 : 7E                         INT5:   MOV     A,M     ;LOAD A BYTE
 2552/ BE7 : 1F                                 RAR             ;SHIFT RIGHT
 2553/ BE8 : 77                                 MOV     M,A     ;REPLACE
 2554/ BE9 : 23                                 INX     H       ;POINT NEXT
 2555/ BEA : 05                                 DCR     B       ;DECR BYTE CTR
 2556/ BEB : C2 E6 0B                           JNZ     INT5    ;LOOP
 2557/ BEE : 0D                                 DCR     C       ;DECR BIT CTR
 2558/ BEF : C2 E0 0B                           JNZ     INT4    ;LOOP
 2559/ BF2 : 21 58 82                           LXI     H,FACC  ;POINT SIGN & EXP
 2560/ BF5 : 7E                                 MOV     A,M     ;LOAD IT
 2561/ BF6 : E6 80                              ANI     80H     ;ISOLATE SIGN
 2562/ BF8 : C6 18                              ADI     24      ;PLUS INTEGER
 2563/ BFA : 77                                 MOV     M,A     ;REPLACE IT
 2564/ BFB : C3 B4 16                           JMP     FNORM   ;GO NORMALIZE & RETURN
 2565/ BFE :                            ;
 2566/ BFE : =0BFEH                     SQR     EQU     $
 2567/ BFE :                            ;
 2568/ BFE :                            ; COMPUTE SQAURE ROOT OF ARG IN FACC, PUT RESULT IN FACC
 2569/ BFE :                            ;
 2570/ BFE :                            ; USE HERON'S ITERATIVE PROCESS
 2571/ BFE :                            ;
 2572/ BFE : CD A5 18                           CALL    FTEST   ;TEST THE ARGUMENT
 2573/ C01 : C8                                 RZ              ;RETURN IF ZERO
 2574/ C02 : FA E8 1B                           JM      ZMERR   ;ERROR IF NEGATIVE
 2575/ C05 : 32 75 82                           STA     DEXP    ;SAVE ORIG EXPONENT
 2576/ C08 : AF                                 XRA     A       ;GET A ZERO
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 44 - 9/26/2024 16:17:21


 2577/ C09 : 32 58 82                           STA     FACC    ;PUT ARG IN RANGE [.5, 1]
 2578/ C0C : 21 33 82                           LXI     H,TEMP2 ;POINT SAVE AREA
 2579/ C0F : =>TRUE                     	IF ROMSTRT = 0
 2580/ C0F : DF                                 RST     3       ;GO STORE THE VALUE
 2581/ C10 : =>FALSE                    	ELSE
 2582/ C10 :                            		CALL	RST3	;GO STORE THE VALUE
 2583/ C10 : [2579]                     	ENDIF
 2584/ C10 :                            ;
 2585/ C10 :                            ; INITIAL APPROXIMATION 0.41730759 + 0.59016206 * MANTISSA
 2586/ C10 :                            ;
 2587/ C10 : 21 B4 1D                           LXI     H,SQC1  ;POINT .59016
 2588/ C13 : CD EF 16                           CALL    FMUL    ;GO MULTIPLY
 2589/ C16 : 21 B8 1D                           LXI     H,SQC2  ;PINT .4173
 2590/ C19 : CD 0E 16                           CALL    FADD    ;GO ADD
 2591/ C1C : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE AREA
 2592/ C1F : =>TRUE                     	IF ROMSTRT = 0
 2593/ C1F : DF                                 RST     3       ;GO STORE THE VALUE
 2594/ C20 : =>FALSE                    	ELSE
 2595/ C20 :                            		CALL	RST3	;GO STORE THE VALUE
 2596/ C20 : [2592]                     	ENDIF
 2597/ C20 :                            ;
 2598/ C20 :                            ; NEWTON'S METHOD OF ITERATION TO THE APPROXIMATE
 2599/ C20 :                            ; VALUE OF THE SQR OF MANTISSA
 2600/ C20 :                            ;
 2601/ C20 : CD 3B 0C                           CALL    SQR1    ;FIRST ITERATION
 2602/ C23 : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE AREA
 2603/ C26 : =>TRUE                     	IF ROMSTRT = 0
 2604/ C26 : DF                                 RST     3       ;GO STORE THE VALUE
 2605/ C27 : =>FALSE                    	ELSE
 2606/ C27 :                            		CALL	RST3	;GO STORE THE VALUE
 2607/ C27 : [2603]                     	ENDIF
 2608/ C27 : CD 3B 0C                           CALL    SQR1    ;SECOND ITERATION
 2609/ C2A :                            ;
 2610/ C2A :                            ; RESTORE RANGE TO OBTAIN THE FINAL RESULT
 2611/ C2A :                            ;
 2612/ C2A : 3A 75 82                           LDA     DEXP    ;GET SAVE EXPONENT
 2613/ C2D : CD B3 18                           CALL    FEXP    ;EXPAND IT
 2614/ C30 : 1F                                 RAR             ;DIVIDE BY 2
 2615/ C31 : 32 58 82                           STA     FACC    ;STORE IT
 2616/ C34 : D0                                 RNC             ;RETURN IF EXPON EVEN
 2617/ C35 : 21 BC 1D                           LXI     H,SQC3  ;ELSE, POINT SQR(2)
 2618/ C38 : C3 EF 16                           JMP     FMUL    ;GO MULTIPLY AND RETURN
 2619/ C3B :                            ;
 2620/ C3B :                            ; THIS ROUTINE PERFORMS ONE NEWTON ITERATION
 2621/ C3B :                            ; TO THE SQUARE ROOT FUNCTION
 2622/ C3B :                            ;
 2623/ C3B : 21 33 82                   SQR1:   LXI     H,TEMP2 ;POINT MANTISSA
 2624/ C3E : =>TRUE                     	IF ROMSTRT = 0
 2625/ C3E : EF                                 RST     5       ;LOAD IT
 2626/ C3F : =>FALSE                    	ELSE
 2627/ C3F :                            		CALL	RST5	;LOAD IT
 2628/ C3F : [2624]                     	ENDIF
 2629/ C3F : 21 2F 82                           LXI     H,TEMP1 ;POINT PREV GUESS
 2630/ C42 : CD 72 17                           CALL    FDIV    ;FORM MANT/TEMP1
 2631/ C45 : 21 2F 82                           LXI     H,TEMP1 ;POINT PREV
 2632/ C48 : CD 0E 16                           CALL    FADD    ;FORM TEMP1 + MANT/TEMP1
 2633/ C4B : D6 01                              SUI     1       ;DIVIDE BY 2
 2634/ C4D : 32 58 82                           STA     FACC    ;FORM (TEMP1 + MANT/TEMP1)/2
 2635/ C50 : C9                                 RET             ;RETURN
 2636/ C51 :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 45 - 9/26/2024 16:17:21


 2637/ C51 : =0C51H                     NEG     EQU     $
 2638/ C51 :                            ;
 2639/ C51 :                            ;
 2640/ C51 :                            ; REVERSES THE SIGN OF THE FLOATING ACC
 2641/ C51 :                            ;
 2642/ C51 :                            ;
 2643/ C51 : CD A5 18                           CALL    FTEST   ;GET STATUS OF FACC
 2644/ C54 : C8                                 RZ              ;RETURN IF ZERO
 2645/ C55 : EE 80                              XRI     80H     ;REVERSE SIGN
 2646/ C57 : 32 58 82                           STA     FACC    ;RESTORE EXPONENT
 2647/ C5A : C9                                 RET             ;CONTINUE EVALUATION
 2648/ C5B :                            ;
 2649/ C5B : =0C5BH                     RND     EQU     $
 2650/ C5B :                            ;
 2651/ C5B :                            ;
 2652/ C5B :                            ; PSEUDO RANDOM NUMBER GENERATOR
 2653/ C5B :                            ;
 2654/ C5B :                            ;
 2655/ C5B : 21 47 82                           LXI     H,TEMP7 ;SAVE ARG
 2656/ C5E : =>TRUE                     	IF ROMSTRT = 0
 2657/ C5E : DF                                 RST     3       ;GO STORE THE VALUE
 2658/ C5F : =>FALSE                    	ELSE
 2659/ C5F :                            		CALL	RST3	;GO STORE THE VALUE
 2660/ C5F : [2656]                     	ENDIF
 2661/ C5F : 06 04                              MVI     B,4     ;LOOP CTR
 2662/ C61 : 21 58 82                           LXI     H,FACC  ;POINT FLOAT ACCUM
 2663/ C64 : CD 3F 1C                           CALL    ZEROM   ;GO ZERO THE FACC
 2664/ C67 : 0E 03                              MVI     C,3     ;OUTTER LOP CTR
 2665/ C69 : 21 59 82                           LXI     H,FACC+1        ;POINT MSB
 2666/ C6C : E5                                 PUSH    H       ;SAVE H,L
 2667/ C6D : 21 7C 82                   RND1:   LXI     H,RNDZ+1        ;POINT X,Y,Z
 2668/ C70 : 06 06                              MVI     B,6     ;LOOP CTR
 2669/ C72 : B7                                 ORA     A       ;TURN OFF CY
 2670/ C73 : 7E                         RND2:   MOV     A,M     ;GET A BYTE
 2671/ C74 : 17                                 RAL             ;SHIFT LEFT (MULT BY 2)
 2672/ C75 : 77                                 MOV     M,A     ;REPLACE THE BYTE
 2673/ C76 : 2B                                 DCX     H       ;POINT NEXT
 2674/ C77 : 05                                 DCR     B       ;DECR CTR
 2675/ C78 : C2 73 0C                           JNZ     RND2    ;LOOP
 2676/ C7B : 23                                 INX     H       ;POINT MSD X,Y,Z
 2677/ C7C : 11 4E 1D                           LXI     D,RNDP  ;POINT TO MODULO
 2678/ C7F : 06 03                              MVI     B,3     ;LOOP CTR
 2679/ C81 : 1A                         FND3:   LDAX    D       ;GET BYTE OF P,Q,R
 2680/ C82 : BE                                 CMP     M       ;COMPARE WITH X,Y,Z
 2681/ C83 : 13                                 INX     D       ;POINT NEXT
 2682/ C84 : 23                                 INX     H       ;DITTO
 2683/ C85 : DA 90 0C                           JC      RND4    ;BRIF P<X
 2684/ C88 : C2 9C 0C                           JNZ     RND5    ;BRIF P>X
 2685/ C8B : 1A                                 LDAX    D       ;GET LOW BYTE
 2686/ C8C : BE                                 CMP     M       ;CMPARE
 2687/ C8D : D2 9C 0C                           JNC     RND5    ;BRIF P>=X
 2688/ C90 : EB                         RND4:   XCHG            ;FLIP D,E TO H,L
 2689/ C91 : 1A                                 LDAX    D       ;GET LOW X BYTE
 2690/ C92 : 96                                 SUB     M       ;SUBTRACT LOW P BYTE
 2691/ C93 : 12                                 STAX    D       ;STORE IT
 2692/ C94 : 1B                                 DCX     D       ;POINT HIGH
 2693/ C95 : 2B                                 DCX     H       ;DITTO
 2694/ C96 : 1A                                 LDAX    D       ;GET HIGH X BYTE
 2695/ C97 : 9E                                 SBB     M       ;SUB HIGH P BYTE
 2696/ C98 : 12                                 STAX    D       ;STORE IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 46 - 9/26/2024 16:17:21


 2697/ C99 : 13                                 INX     D       ;POINT LOW
 2698/ C9A : 23                                 INX     H       ;DITTO
 2699/ C9B : EB                                 XCHG            ;RESTORE ADDRS
 2700/ C9C : 13                         RND5:   INX     D       ;POINT NEXT
 2701/ C9D : 23                                 INX     H       ;DITTO
 2702/ C9E : 05                                 DCR     B       ;DECR CTR
 2703/ C9F : C2 81 0C                           JNZ     FND3    ;LOOP
 2704/ CA2 : 06 03                              MVI     B,3     ;LOOP CTR
 2705/ CA4 : 11 7E 82                   RND6:   LXI     D,RNDS+1        ;POINT LOW S
 2706/ CA7 : 1A                                 LDAX    D       ;GET LOW S
 2707/ CA8 : 86                                 ADD     M       ;ADD LOW X,Y,Z
 2708/ CA9 : 12                                 STAX    D       ;PUT S
 2709/ CAA : 1B                                 DCX     D       ;POINT HIGH
 2710/ CAB : 2B                                 DCX     H       ;DITTO
 2711/ CAC : 1A                                 LDAX    D       ;GET HIGH S
 2712/ CAD : 8E                                 ADC     M       ;ADD HIGH X,Y,Z
 2713/ CAE : E6 3F                              ANI     3FH     ;TURN OFF HIGH BITS
 2714/ CB0 : 12                                 STAX    D       ;STORE IT
 2715/ CB1 : 2B                                 DCX     H       ;POINT NEXT X,Y,Z
 2716/ CB2 : 05                                 DCR     B       ;DECR CTR
 2717/ CB3 : C2 A4 0C                           JNZ     RND6    ;LOOP
 2718/ CB6 : 3E 08                              MVI     A,8     ;CONSTANT
 2719/ CB8 : 91                                 SUB     C       ;LESS CTR
 2720/ CB9 : 1F                                 RAR             ;DIVIDE BY TWO
 2721/ CBA : E1                                 POP     H       ;GET H,L ADDR
 2722/ CBB : 3A 7E 82                           LDA     RNDS+1  ;GET LSB OF S
 2723/ CBE : 77                                 MOV     M,A     ;STORE IT
 2724/ CBF : 23                                 INX     H       ;POINT NEXT
 2725/ CC0 : E5                                 PUSH    H       ;SAVE H,L
 2726/ CC1 : 0D                                 DCR     C       ;DECR CTR
 2727/ CC2 : C2 6D 0C                           JNZ     RND1    ;LOOP
 2728/ CC5 : E1                                 POP     H       ;RESTORE SP PTR
 2729/ CC6 : 3A 87 82                           LDA     RNDSW   ;GET SWITCH
 2730/ CC9 : B7                                 ORA     A       ;TEST IT
 2731/ CCA : CA D8 0C                           JZ      RND7    ;BRIF NO RANDOMIZE
 2732/ CCD : 11 7F 82                           LXI     D,TRNDX ;POINT SAVED VALUES
 2733/ CD0 : 21 77 82                           LXI     H,RNDX  ;POINT NEXT VALUES
 2734/ CD3 : 06 08                              MVI     B,8     ;LOOP CTR
 2735/ CD5 : CD 39 1C                           CALL    COPYH   ;GO COPY
 2736/ CD8 : CD B4 16                   RND7:   CALL    FNORM
 2737/ CDB : 21 47 82                           LXI     H,TEMP7 ;MULTIPLY BY RANGE
 2738/ CDE : C3 EF 16                           JMP     FMUL
 2739/ CE1 :                            ;
 2740/ CE1 : =0CE1H                     INP     EQU     $
 2741/ CE1 :                            ;
 2742/ CE1 :                            ;
 2743/ CE1 :                            ; INPUT A BYTE FROM THE DEVICE IN FACC
 2744/ CE1 :                            ;
 2745/ CE1 :                            ; PUT THE RESULT IN THE FACC
 2746/ CE1 :                            ;
 2747/ CE1 : CD 47 1C                           CALL    FBIN    ;CONVERT FACC TO BINARY
 2748/ CE4 : 21 20 82                           LXI     H,OUTA  ;POINT INSTR BUFFER
 2749/ CE7 : 36 DB                              MVI     M,0DBH  ;IN INSTR
 2750/ CE9 : 23                                 INX     H       ;POINT NEXT
 2751/ CEA : 77                                 MOV     M,A     ;MOVE ADDR
 2752/ CEB : 23                                 INX     H       ;POINT NEXT
 2753/ CEC : 36 C9                              MVI     M,0C9H  ;RET INSTR
 2754/ CEE : CD 20 82                           CALL    OUTA    ;GO INPUT A BYTE
 2755/ CF1 : 5F                         FDEC:   MOV     E,A     ;MOVE BYTE TO LO D,E
 2756/ CF2 : 16 00                              MVI     D,0     ;ZERO HI D,E
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 47 - 9/26/2024 16:17:21


 2757/ CF4 : C3 6A 1C                           JMP     BINFL   ;GO CONVERT TO DEC & RET
 2758/ CF7 :                            ;
 2759/ CF7 : =0CF7H                     POS     EQU     $
 2760/ CF7 :                            ;
 2761/ CF7 :                            ;
 2762/ CF7 :                            ; RETURNS THE CURRENT POSITION OF THE TTY CURSOR
 2763/ CF7 :                            ;
 2764/ CF7 :                            ;
 2765/ CF7 : 3A 76 82                           LDA     COLUM   ;GET POSITION
 2766/ CFA : C3 F1 0C                           JMP     FDEC    ;CONVERT TO FLOAT AND RETURN
 2767/ CFD :                            ;
 2768/ CFD : =0CFDH                     CONCA   EQU     $
 2769/ CFD :                            ;
 2770/ CFD :                            ;
 2771/ CFD :                            ; CONCATONATE TWO STRING TOGETHER
 2772/ CFD :                            ; COMBINE LENGTH <= 255
 2773/ CFD :                            ;
 2774/ CFD : D1                                 POP     D       ;ADJUST STACK
 2775/ CFE : 11 20 81                           LXI     D,STRIN ;POINT STRING BUFFER
 2776/ D01 : 1A                                 LDAX    D       ;GET CURRENT LENGTH
 2777/ D02 : 4F                                 MOV     C,A     ;STORE IT
 2778/ D03 : 06 00                              MVI     B,0     ;CLEAR HI
 2779/ D05 : EB                                 XCHG            ;FLIP FLOP
 2780/ D06 : 09                                 DAD     B       ;COMPUTE NEXT
 2781/ D07 : EB                                 XCHG            ;FLIP BACK
 2782/ D08 : 86                                 ADD     M       ;COMPUTE COMBINE LENGTH
 2783/ D09 : 46                                 MOV     B,M     ;SAVE LEN2
 2784/ D0A : D2 13 0D                           JNC     CONC2   ;BRIF NO OVFLW
 2785/ D0D : 3E FF                              MVI     A,255   ;MAX LEN
 2786/ D0F : 91                                 SUB     C       ;MINUS 1ST PART
 2787/ D10 : 47                                 MOV     B,A     ;SAVE LEN
 2788/ D11 : 3E FF                              MVI     A,255   ;UPDATED LENGTH
 2789/ D13 : 32 20 81                   CONC2:  STA     STRIN   ;STORE IT
 2790/ D16 : 78                                 MOV     A,B     ;GET LEN TO MOVE
 2791/ D17 : B7                                 ORA     A       ;TEST IT
 2792/ D18 : CA 23 0D                           JZ      CONC4   ;BRIF NULL
 2793/ D1B : 23                         CONC3:  INX     H       ;POINT NEXT
 2794/ D1C : 13                                 INX     D       ;DITTO
 2795/ D1D : 7E                                 MOV     A,M     ;GET NEXT CHAR
 2796/ D1E : 12                                 STAX    D       ;PUT IT
 2797/ D1F : 05                                 DCR     B       ;DECR COUNT
 2798/ D20 : C2 1B 0D                           JNZ     CONC3   ;LOOP
 2799/ D23 : E1                         CONC4:  POP     H       ;GET H,L
 2800/ D24 : 2B                                 DCX     H       ;POINT BACK
 2801/ D25 : 3A 20 81                           LDA     STRIN   ;GET LEN
 2802/ D28 : 1F                                 RAR             ;DIVIDE BY TWO
 2803/ D29 : 3C                                 INR     A       ;PLUS ONE
 2804/ D2A : EB                                 XCHG            ;SAVE H,L
 2805/ D2B : 2A 69 82                           LHLD    SPCTR   ;GET CTR
 2806/ D2E : 4F                                 MOV     C,A     ;SAVE CTR
 2807/ D2F : 06 00                              MVI     B,0     ;ZERO HI BYTE
 2808/ D31 : 09                                 DAD     B       ;ADD LEN THIS STRING
 2809/ D32 : 22 69 82                           SHLD    SPCTR   ;SAVE CTR
 2810/ D35 : C1                                 POP     B
 2811/ D36 : 21 00 00                           LXI     H,0     ;GET ADDR ZERO
 2812/ D39 : E5                         CONC5:  PUSH    H       ;2 BYTE WORD
 2813/ D3A : 3D                                 DCR     A       ;DECR CTR
 2814/ D3B : C2 39 0D                           JNZ     CONC5   ;CONTINUE
 2815/ D3E : 39                                 DAD     SP      ;GET ADDRESS IN H,L
 2816/ D3F : EB                                 XCHG            ;PUT STACK PTR IN D,E
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 48 - 9/26/2024 16:17:21


 2817/ D40 : 72                                 MOV     M,D     ;MOVE HI ADDR
 2818/ D41 : 23                                 INX     H       ;POINT NEXT
 2819/ D42 : 73                                 MOV     M,E     ;MOVE LO ADDR
 2820/ D43 : 23                                 INX     H       ;POINT NEXT
 2821/ D44 : 36 E7                              MVI     M,0E7H  ;TYPE=STRING
 2822/ D46 : E5                                 PUSH    H       ;SAVE H,L
 2823/ D47 : 21 20 81                           LXI     H,STRIN ;GET TEMP STR
 2824/ D4A : 7E                                 MOV     A,M     ;GET LENGTH
 2825/ D4B : 3C                                 INR     A       ;PLUS ONE
 2826/ D4C : 4F                                 MOV     C,A     ;SAVE IT
 2827/ D4D : 7E                         CONC6:  MOV     A,M     ;GET A BYTE
 2828/ D4E : 12                                 STAX    D       ;PUT IT DOWN
 2829/ D4F : 13                                 INX     D       ;POINT NEXT
 2830/ D50 : 23                                 INX     H       ;DITTO
 2831/ D51 : 0D                                 DCR     C       ;SUBT CTR
 2832/ D52 : C2 4D 0D                           JNZ     CONC6   ;LOOP
 2833/ D55 : E1                                 POP     H       ;RESTORE H,L
 2834/ D56 : =>TRUE                     	IF ROMSTRT = 0
 2835/ D56 : E7                         		RST     4       ;ADJUST H,L
 2836/ D57 : =>FALSE                    	ELSE
 2837/ D57 :                            		CALL	RST4	;ADJUST H,L
 2838/ D57 : [2834]                     	ENDIF
 2839/ D57 : F9                                 DB      -7
 2840/ D58 : 3E 04                              MVI     A,4     ;DELETE 4 BYTES
 2841/ D5A : CD C3 1A                           CALL    SQUIS   ;GO COMPRESS
 2842/ D5D : C3 91 11                           JMP     EVAL    ;CONTINUE EVALUATION
 2843/ D60 :                            ;
 2844/ D60 : =0D60H                     LENFN   EQU     $
 2845/ D60 :                            ;
 2846/ D60 :                            ; X=LEN(A$)
 2847/ D60 :                            ;
 2848/ D60 :                            ; RETURN THE LENGTH OF THE STRING
 2849/ D60 :                            ;
 2850/ D60 : 3A 20 81                           LDA     STRIN   ;GET LEN IN ACC
 2851/ D63 : C3 F1 0C                           JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
 2852/ D66 :                            ;
 2853/ D66 : =0D66H                     CHRFN   EQU     $
 2854/ D66 :                            ;
 2855/ D66 :                            ; A$=CHR$(X)
 2856/ D66 :                            ;
 2857/ D66 :                            ; RETURNS A ONE CHAR STRING HAVING THE ASCII VALUE - X
 2858/ D66 :                            ;
 2859/ D66 : CD 47 1C                           CALL    FBIN    ;CONVERT FACC TO BINARY
 2860/ D69 : 21 20 81                           LXI     H,STRIN ;POINT OUT AREA
 2861/ D6C : 36 01                              MVI     M,1     ;LEN=1
 2862/ D6E : 23                                 INX     H       ;POINT NEXT
 2863/ D6F : 77                                 MOV     M,A     ;STORE THE CHAR
 2864/ D70 : C9                                 RET             ;RETURN
 2865/ D71 :                            ;
 2866/ D71 : =0D71H                     ASCII   EQU     $
 2867/ D71 :                            ;
 2868/ D71 :                            ; X=ASCII(A$)
 2869/ D71 :                            ;
 2870/ D71 :                            ; RETURNS THE ASCII VALUE OF THE FIRST CHAR IN STRING
 2871/ D71 :                            ;
 2872/ D71 : 21 20 81                           LXI     H,STRIN ;POINT STRING
 2873/ D74 : 7E                                 MOV     A,M     ;GET LENGTH
 2874/ D75 : B7                                 ORA     A       ;TEST IF > ZERO
 2875/ D76 : CA F1 0C                           JZ      FDEC    ;BRIF ZERO & RETURN A ZERO
 2876/ D79 : 23                                 INX     H       ;POINT 1ST CHAR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 49 - 9/26/2024 16:17:21


 2877/ D7A : 7E                                 MOV     A,M     ;LOAD IT
 2878/ D7B : C3 F1 0C                           JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
 2879/ D7E :                            ;
 2880/ D7E : =0D7EH                     NUMFN   EQU     $
 2881/ D7E :                            ;
 2882/ D7E :                            ; A$=NUM$(X)
 2883/ D7E :                            ;
 2884/ D7E :                            ; RETURNS A STRING REPRESENTING X AS IT WOULD HAVE
 2885/ D7E :                            ; BEEN PRINTED (INCLUDING TRAILING SPACE)
 2886/ D7E :                            ;
 2887/ D7E : 21 20 81                           LXI     H,STRIN ;POINT STRING AREA
 2888/ D81 : 36 00                              MVI     M,0     ;INIT COUNT
 2889/ D83 : 23                                 INX     H       ;SKIP TO 1ST POSITION
 2890/ D84 : CD C7 14                           CALL    FOUT    ;GO CONVERT TO EXTRN DEC
 2891/ D87 : AF                                 XRA     A       ;GET A ZERO
 2892/ D88 : 47                                 MOV     B,A     ;INIT CTR
 2893/ D89 : 2B                         NUM1:   DCX     H       ;POINT PRIOR
 2894/ D8A : 04                                 INR     B       ;COUNT IT
 2895/ D8B : BE                                 CMP     M       ;TEST IF ZERO
 2896/ D8C : C2 89 0D                           JNZ     NUM1    ;LOOP TILL AT START
 2897/ D8F : 70                                 MOV     M,B     ;SET LEN CODE
 2898/ D90 : C9                                 RET             ;THEN RETURN
 2899/ D91 :                            ;
 2900/ D91 : =0D91H                     VAL     EQU     $
 2901/ D91 :                            ;
 2902/ D91 :                            ; X = VAL(A$)
 2903/ D91 :                            ;
 2904/ D91 :                            ; RETURNS THE VALUE OF THE STRING OF NUMERIC CHARACTERS
 2905/ D91 :                            ;
 2906/ D91 : 21 20 81                           LXI     H,STRIN ;POINT STRING AREA
 2907/ D94 : 7E                                 MOV     A,M     ;GET LEN
 2908/ D95 : B7                                 ORA     A       ;TEST FOR NULL STRING
 2909/ D96 : 47                                 MOV     B,A     ;SAVE LEN
 2910/ D97 : CA F1 0C                           JZ      FDEC    ;BRIF IS (RETURNS A 0.00)
 2911/ D9A : 11 20 81                           LXI     D,STRIN ;POINT BUFFER
 2912/ D9D : 23                         VAL1:   INX     H       ;POINT NEXT
 2913/ D9E : 7E                                 MOV     A,M     ;GET A CHAR
 2914/ D9F : FE 20                              CPI     ' '     ;TEST IF SPACE
 2915/ DA1 : CA A6 0D                           JZ      VAL2    ;BRIF IS
 2916/ DA4 : 12                                 STAX    D       ;PUT THE CHAR
 2917/ DA5 : 13                                 INX     D       ;INCR ADDR
 2918/ DA6 : 05                         VAL2:   DCR     B       ;DECR CTR
 2919/ DA7 : C2 9D 0D                           JNZ     VAL1    ;LOOP
 2920/ DAA : AF                                 XRA     A       ;GET A ZERO
 2921/ DAB : 12                                 STAX    D       ;PUT IN BUFF
 2922/ DAC : 21 20 81                           LXI     H,STRIN ;POINT START OF BUFFER
 2923/ DAF : CD 05 14                           CALL    FIN     ;GO CONVERT
 2924/ DB2 : 7E                                 MOV     A,M     ;GET NON-NUMERIC
 2925/ DB3 : B7                                 ORA     A       ;TEST IT
 2926/ DB4 : C2 00 1C                           JNZ     CVERR   ;BRIF ERROR
 2927/ DB7 : C9                                 RET             ;ELSE, RETURN
 2928/ DB8 :                            ;
 2929/ DB8 : =0DB8H                     SPACE   EQU     $
 2930/ DB8 :                            ;
 2931/ DB8 :                            ; A$=SPACE$(X)
 2932/ DB8 :                            ;
 2933/ DB8 :                            ; CREATES A STRING FO SPACES LENGTH = X
 2934/ DB8 :                            ;
 2935/ DB8 : CD 47 1C                           CALL    FBIN    ;GET BINARY LENGTH
 2936/ DBB : 21 20 81                           LXI     H,STRIN ;POINT TEMP STRING
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 50 - 9/26/2024 16:17:21


 2937/ DBE : 77                                 MOV     M,A     ;PUT LEN
 2938/ DBF : B7                                 ORA     A       ;TEST IT
 2939/ DC0 : C8                         SPAC1:  RZ              ;RETURN IF ZERO
 2940/ DC1 : 23                                 INX     H       ;ELSE, POINT NEXT
 2941/ DC2 : 36 20                              MVI     M,' '   ;MOVE 1 SPACE
 2942/ DC4 : 3D                                 DCR     A       ;DECR CTR
 2943/ DC5 : C3 C0 0D                           JMP     SPAC1   ;LOOP
 2944/ DC8 :                            ;
 2945/ DC8 : =0DC8H                     STRFN   EQU     $
 2946/ DC8 :                            ;
 2947/ DC8 :                            ; A$=STRING$(X,Y)
 2948/ DC8 :                            ;
 2949/ DC8 :                            ; CREATES STRING OF LNGTH X CONTAINING REPETITION OF CHR$(Y)
 2950/ DC8 :                            ;
 2951/ DC8 : CD 47 1C                           CALL    FBIN    ;GET BINARY LENGTH
 2952/ DCB : 32 20 81                           STA     STRIN   ;PUT TO STRING
 2953/ DCE : CD 64 1C                           CALL    ARGNU   ;GET NEXT ARGUMENT
 2954/ DD1 : 21 20 81                           LXI     H,STRIN ;POINT STRING
 2955/ DD4 : 46                                 MOV     B,M     ;GET COUNT
 2956/ DD5 : 23                         STR11:  INX     H       ;POINT NEXT
 2957/ DD6 : 77                                 MOV     M,A     ;STORE THE CHAR
 2958/ DD7 : 05                                 DCR     B       ;DECR CTR
 2959/ DD8 : C2 D5 0D                           JNZ     STR11   ;LOOP
 2960/ DDB : C9                                 RET             ;RETURN
 2961/ DDC :                            ;
 2962/ DDC : =0DDCH                     LEFT    EQU     $
 2963/ DDC :                            ;
 2964/ DDC :                            ; B$=LEFT$(A$,X)
 2965/ DDC :                            ;
 2966/ DDC :                            ; SUBSTRING FROM THE LEFTMOST X CHARACTERS OF A$
 2967/ DDC :                            ;
 2968/ DDC : CD 64 1C                           CALL    ARGNU   ;GET 2ND ARGUMENT
 2969/ DDF : 4F                                 MOV     C,A     ;SAVE LEN
 2970/ DE0 : 06 01                              MVI     B,1     ;INIT START
 2971/ DE2 : C3 F8 0D                           JMP     MID0    ;CONTINUE
 2972/ DE5 :                            ;
 2973/ DE5 : =0DE5H                     RIGHT   EQU     $
 2974/ DE5 :                            ;
 2975/ DE5 :                            ; B$=RIGHT$(A$,X)
 2976/ DE5 :                            ;
 2977/ DE5 :                            ; SUBSTRING STARTING AT POSITION X TO END OF STRING
 2978/ DE5 :                            ;
 2979/ DE5 : CD 64 1C                           CALL    ARGNU   ;GET 2ND ARGUMENT
 2980/ DE8 : 47                                 MOV     B,A     ;SAVE START
 2981/ DE9 : 0E FF                              MVI     C,255   ;MAX LEN
 2982/ DEB : C3 F8 0D                           JMP     MID0    ;CONTINUE
 2983/ DEE :                            ;
 2984/ DEE : =0DEEH                     MIDFN   EQU     $
 2985/ DEE :                            ;
 2986/ DEE :                            ; B$=MID$(A$,X,Y)
 2987/ DEE :                            ;
 2988/ DEE :                            ; SUBSTRING OF THE STRING A$ STARTING WITH CHARACTER @ X
 2989/ DEE :                            ; AND Y CHARACTERS LONG
 2990/ DEE :                            ;
 2991/ DEE : CD 64 1C                           CALL    ARGNU   ;LOAD X
 2992/ DF1 : 47                                 MOV     B,A     ;SAVE START
 2993/ DF2 : C5                                 PUSH    B       ;PUT ON STACK
 2994/ DF3 : CD 64 1C                           CALL    ARGNU   ;GET 3RD ARG
 2995/ DF6 : C1                                 POP     B       ;RETREIVE
 2996/ DF7 : 4F                                 MOV     C,A     ;SAVE LEN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 51 - 9/26/2024 16:17:21


 2997/ DF8 : 78                         MID0:   MOV     A,B     ;LOAD START
 2998/ DF9 : 21 20 81                           LXI     H,STRIN ;POINT STRING
 2999/ DFC : BE                                 CMP     M       ;TEST IF X>L
 3000/ DFD : DA 06 0E                           JC      MID1    ;BRIF X>L
 3001/ E00 : CA 06 0E                           JZ      MID1    ;OR EQUAL
 3002/ E03 : 36 00                              MVI     M,0     ;ELSE, RESULT IS NULL
 3003/ E05 : C9                                 RET             ;RETURN
 3004/ E06 : 81                         MID1:   ADD     C       ;COMPUTE END POSITION
 3005/ E07 : DA 13 0E                           JC      MID2    ;BRIF OVERFLOW
 3006/ E0A : DE 01                              SBI     1       ;COMPUTE X+Y-1
 3007/ E0C : DA 13 0E                           JC      MID2    ;BRIF OVERFLOW
 3008/ E0F : BE                                 CMP     M       ;COMPARE TO EXISTING LEN
 3009/ E10 : DA 17 0E                           JC      MID3    ;BRIF X+Y-1<LEN(A$)
 3010/ E13 : 7E                         MID2:   MOV     A,M     ;ELSE GET ORIG LEN
 3011/ E14 : 90                                 SUB     B       ;MINUS X
 3012/ E15 : 3C                                 INR     A       ;PLUS ONE
 3013/ E16 : 4F                                 MOV     C,A     ;SAVE (REPLACE Y)
 3014/ E17 : 71                         MID3:   MOV     M,C     ;PUT NEW LEN
 3015/ E18 : 58                                 MOV     E,B     ;PUT START IN LO
 3016/ E19 : 16 00                              MVI     D,0     ;ZERO IN HI
 3017/ E1B : 19                                 DAD     D       ;COMPUTE START
 3018/ E1C : 11 20 81                           LXI     D,STRIN ;GET BEGIN
 3019/ E1F : 7E                         MID4:   MOV     A,M     ;GET A CHAR
 3020/ E20 : 13                                 INX     D       ;POINT NEXT
 3021/ E21 : 23                                 INX     H       ;DITTO
 3022/ E22 : 12                                 STAX    D       ;PUT DOWN
 3023/ E23 : 0D                                 DCR     C       ;DECR CTR
 3024/ E24 : C2 1F 0E                           JNZ     MID4    ;LOOP
 3025/ E27 : C9                                 RET             ;THEN RETURN
 3026/ E28 :                            ;
 3027/ E28 : =0E28H                     INSTR   EQU     $
 3028/ E28 :                            ;
 3029/ E28 :                            ; X = INSTR(Y,A$,B$)
 3030/ E28 :                            ;
 3031/ E28 :                            ; SEARCH FOR SUBSTRING B$ IN STRING A$ STARTING AT POS Y.
 3032/ E28 :                            ; RETURN 0 IF B$ IS NOT IN A$
 3033/ E28 :                            ; RETURN 1 IF B$ IS NULL
 3034/ E28 :                            ; ELSE RETURN THE CHARACTER POSITION
 3035/ E28 :                            ;
 3036/ E28 : CD 64 1C                           CALL    ARGNU   ;GET A$
 3037/ E2B : 21 20 81                           LXI     H,STRIN ;POINT A$
 3038/ E2E : B7                                 ORA     A       ;TEST Y
 3039/ E2F : C2 37 0E                           JNZ     INST2   ;BRIF Y NOT ZERO
 3040/ E32 : 36 00                      INST1:  MVI     M,0     ;ELSE A$ IS NULL
 3041/ E34 : C3 3E 0E                           JMP     INST3   ;GO AROUND
 3042/ E37 : BE                         INST2:  CMP     M       ;TEST Y TO LEN(A$)
 3043/ E38 : CA 3E 0E                           JZ      INST3   ;BRIF EQUAL
 3044/ E3B : D2 32 0E                           JNC     INST1   ;BRIF Y > LEN(A$)
 3045/ E3E : 4F                         INST3:  MOV     C,A     ;SAVE Y
 3046/ E3F : 06 00                              MVI     B,0     ;ZERO HI INCR
 3047/ E41 : 7E                                 MOV     A,M     ;GET LEN(A$)
 3048/ E42 : 91                                 SUB     C       ;MINUS Y
 3049/ E43 : 3C                                 INR     A       ;PLUS ONE
 3050/ E44 : 09                                 DAD     B       ;COMPUTE START ADDR
 3051/ E45 : 47                                 MOV     B,A     ;# CHARS REMAIN IN A$
 3052/ E46 : E5                                 PUSH    H       ;SAVE ADDR
 3053/ E47 : 2A 52 82                           LHLD    ADDR1   ;GET ADDR OF ARG
 3054/ E4A : 23                                 INX     H       ;POINT NEXT
 3055/ E4B : 56                                 MOV     D,M     ;GET HI ADDR
 3056/ E4C : 23                                 INX     H       ;POINT NEXT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 52 - 9/26/2024 16:17:21


 3057/ E4D : 5E                                 MOV     E,M     ;GET LO ADDR
 3058/ E4E : 23                                 INX     H       ;POINT NEXT
 3059/ E4F : 22 52 82                           SHLD    ADDR1   ;UPDATED PTR
 3060/ E52 : E1                                 POP     H       ;RESTORE ADDR
 3061/ E53 : 1A                                 LDAX    D       ;GET LEN(B$)
 3062/ E54 : B7                                 ORA     A       ;TEST IF NULL
 3063/ E55 : C2 5E 0E                           JNZ     INST6   ;BRIF NOT
 3064/ E58 : 0E 01                              MVI     C,1     ;SET POSIT = 1
 3065/ E5A : 79                         INST5:  MOV     A,C     ;GET POSIT
 3066/ E5B : C3 F1 0C                           JMP     FDEC    ;CONVERT TO DECIMAL & RETURN
 3067/ E5E : EB                         INST6:  XCHG            ;FLIP/FLOP
 3068/ E5F : 78                                 MOV     A,B     ;GET LEN OF A$
 3069/ E60 : BE                                 CMP     M       ;COMPARE TO LEN B$
 3070/ E61 : DA 83 0E                           JC      INSTA   ;BRIF LEN(B$)< LEN(REM A$)
 3071/ E64 : C5                                 PUSH    B       ;SAVE CTR, POSIT
 3072/ E65 : D5                                 PUSH    D       ;SAVE ADDR A$
 3073/ E66 : E5                                 PUSH    H       ;SAVE ADDR B$
 3074/ E67 : 4E                                 MOV     C,M     ;GET LEN B$
 3075/ E68 : EB                                 XCHG            ;FLIP/FLOP
 3076/ E69 : 13                         INST8:  INX     D       ;POINT NEXT B$
 3077/ E6A : 1A                                 LDAX    D       ;GET B$ CHAR
 3078/ E6B : BE                                 CMP     M       ;COMPARE A$ CHAR
 3079/ E6C : C2 7A 0E                           JNZ     INST9   ;BRIF NOT EQUAL
 3080/ E6F : 23                                 INX     H       ;POINT NEXT A$
 3081/ E70 : 0D                                 DCR     C       ;DECR CTR (LEN(B$))
 3082/ E71 : C2 69 0E                           JNZ     INST8   ;LOOP
 3083/ E74 : E1                                 POP     H       ;DUMMY POP
 3084/ E75 : E1                                 POP     H       ;GET DUMMY STACK
 3085/ E76 : C1                                 POP     B       ;GET POSITION
 3086/ E77 : C3 5A 0E                           JMP     INST5   ;WE FOUND A MATCH
 3087/ E7A : D1                         INST9:  POP     D       ;GET PTR B$
 3088/ E7B : E1                                 POP     H       ;GET PTR A$
 3089/ E7C : C1                                 POP     B       ;GET CTRS, POSIT
 3090/ E7D : 0C                                 INR     C       ;UP PTR NUM
 3091/ E7E : 23                                 INX     H       ;POINT NEXT A$
 3092/ E7F : 05                                 DCR     B       ;DECR B
 3093/ E80 : C2 5E 0E                           JNZ     INST6   ;LOOP
 3094/ E83 : 0E 00                      INSTA:  MVI     C,0     ;ELSE B$ NOT IN A$
 3095/ E85 : C3 5A 0E                           JMP     INST5   ;RETURN
 3096/ E88 :                            ;
 3097/ E88 : =0E88H                     FN      EQU     $
 3098/ E88 :                            ;
 3099/ E88 :                            ; STMT: DEF FNX(A)=EXPR
 3100/ E88 :                            ;
 3101/ E88 :                            ; NOTE: ENTRY FROM EXPR ANALYZER (RECURSIVE)
 3102/ E88 :                            ;
 3103/ E88 : C5                                 PUSH    B       ;SAVE B,C
 3104/ E89 : D5                                 PUSH    D       ;SAVE D,E
 3105/ E8A : E5                                 PUSH    H       ;SAVE H,L
 3106/ E8B : EB                                 XCHG            ;PUT H,L TO D,E
 3107/ E8C : 2A 56 82                           LHLD    ADDR3   ;GET ADDR
 3108/ E8F : E5                                 PUSH    H       ;SAVE IT
 3109/ E90 : EB                                 XCHG            ;PUT D,E BACK TO H,L
 3110/ E91 : 22 56 82                           SHLD    ADDR3   ;UPDATE PTR
 3111/ E94 : 2A 69 82                           LHLD    SPCTR   ;GET SP COUNT
 3112/ E97 : E5                                 PUSH    H       ;SAVE IT
 3113/ E98 : 3A 68 82                           LDA     PARCT   ;GET PAREN COUNT
 3114/ E9B : 47                                 MOV     B,A     ;PUT TO B
 3115/ E9C : 3A 88 82                           LDA     FNMOD   ;GET FN MODE
 3116/ E9F : 4F                                 MOV     C,A     ;PUT TO C
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 53 - 9/26/2024 16:17:21


 3117/ EA0 : C5                                 PUSH    B       ;SAVE B,C
 3118/ EA1 : 3A 72 80                           LDA     DIMSW   ;GET DIM SW
 3119/ EA4 : F5                                 PUSH    PSW     ;SAVE IT
 3120/ EA5 : AF                                 XRA     A       ;CLEAR A
 3121/ EA6 : 32 72 80                           STA     DIMSW   ;RESET DIM SW
 3122/ EA9 : 2A 6C 82                           LHLD    FNARG   ;GET OLD ARG NAME
 3123/ EAC : E5                                 PUSH    H       ;SAVE
 3124/ EAD : 2A 6E 82                           LHLD    FNARG+2 ;GET OLD ARG ADDRESS
 3125/ EB0 : E5                                 PUSH    H       ;SAVE
 3126/ EB1 : 2A 93 82                           LHLD    PROGE   ;GET END OF PROGRAM
 3127/ EB4 : E5                                 PUSH    H       ;SAVE IT
 3128/ EB5 : 2A 50 82                           LHLD    EXPRS   ;GET END OF EXPR
 3129/ EB8 : E5                                 PUSH    H       ;SAVE IT
 3130/ EB9 : 22 93 82                           SHLD    PROGE   ;SAVE NEW 'END' OF PROGRAM
 3131/ EBC : 3E 01                              MVI     A,1     ;GET ON SETTING
 3132/ EBE : 32 88 82                           STA     FNMOD   ;SET IN FUNCTION
 3133/ EC1 : 2A 56 82                           LHLD    ADDR3   ;POINT TO EXPR
 3134/ EC4 : 4E                                 MOV     C,M     ;GET FN CHAR
 3135/ EC5 : 2B                                 DCX     H       ;POINT BACK
 3136/ EC6 : 46                                 MOV     B,M     ;GET HI NAME
 3137/ EC7 : 21 96 82                           LXI     H,BEGPR ;POINT START OF PROGRAM
 3138/ ECA : 7E                         FN2:    MOV     A,M     ;LOAD LEN TO NEXT STMT
 3139/ ECB : B7                                 ORA     A       ;TEST IF AT END
 3140/ ECC : CA F0 1B                           JZ      SNERR   ;BRIF FN NOT FOUND
 3141/ ECF : E5                                 PUSH    H       ;SAVE PTR
 3142/ ED0 : =>TRUE                     	IF ROMSTRT = 0
 3143/ ED0 : E7                         		RST     4       ;ADJUST H,L
 3144/ ED1 : =>FALSE                    	ELSE
 3145/ ED1 :                            		CALL	RST4	;ADJUST H,L
 3146/ ED1 : [3142]                     	ENDIF
 3147/ ED1 : 03                                 DB      3
 3148/ ED2 : 11 0C 1F                           LXI     D,DEFLI ;LITERAL
 3149/ ED5 : =>TRUE                     	IF ROMSTRT = 0
 3150/ ED5 : D7                                 RST     2       ;GO COMPARE
 3151/ ED6 : =>FALSE                    	ELSE
 3152/ ED6 :                            		CALL	RST2	;GO COMPARE
 3153/ ED6 : [3149]                     	ENDIF
 3154/ ED6 : C2 E8 0E                           JNZ     FN3     ;BRIF NOT EQUAL
 3155/ ED9 : C5                                 PUSH    B       ;SAVE TEST NAME
 3156/ EDA : CD AA 1B                           CALL    VAR     ;GO GET NAME
 3157/ EDD : C1                                 POP     B       ;RESTORE NAME
 3158/ EDE : 7A                                 MOV     A,D     ;GET HI NAME
 3159/ EDF : B8                                 CMP     B       ;COMPARE
 3160/ EE0 : C2 E8 0E                           JNZ     FN3     ;BRIF NOT EQUAL
 3161/ EE3 : 7B                                 MOV     A,E     ;GET LO
 3162/ EE4 : B9                                 CMP     C       ;COMPARE
 3163/ EE5 : CA F0 0E                           JZ      FN4     ;BRIF EQUAL
 3164/ EE8 : E1                         FN3:    POP     H       ;GET OLD PTR
 3165/ EE9 : 5E                                 MOV     E,M     ;GET LO LEN
 3166/ EEA : 16 00                              MVI     D,0     ;ZERO HI LEN
 3167/ EEC : 19                                 DAD     D       ;POINT NEXT STMT
 3168/ EED : C3 CA 0E                           JMP     FN2     ;LOOP
 3169/ EF0 : D1                         FN4:    POP     D       ;ADJUST STACK
 3170/ EF1 : =>TRUE                     	IF ROMSTRT = 0
 3171/ EF1 : CF                                 RST     1       ;SKIP BLANKS
 3172/ EF2 : =>FALSE                    	ELSE
 3173/ EF2 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3174/ EF2 : [3170]                     	ENDIF
 3175/ EF2 : FE 28                              CPI     '('     ;TEST IF OPEN PAREN
 3176/ EF4 : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 54 - 9/26/2024 16:17:21


 3177/ EF7 : 23                                 INX     H       ;SKIP IT
 3178/ EF8 : CD AA 1B                           CALL    VAR     ;GO GET VAR NAME
 3179/ EFB : E5                                 PUSH    H       ;SAVE HL ADDR
 3180/ EFC : 21 6C 82                           LXI     H,FNARG ;POINT DUMMY ARG TBL
 3181/ EFF : 72                                 MOV     M,D     ;STORE LETTER
 3182/ F00 : 23                                 INX     H       ;POINT NEXT
 3183/ F01 : 73                                 MOV     M,E     ;STORE DIGIT
 3184/ F02 : 23                                 INX     H       ;POINT NEXT
 3185/ F03 : EB                                 XCHG            ;PUT H,L TO D,E
 3186/ F04 : 2A 56 82                           LHLD    ADDR3   ;POINT TO EXPR STACK
 3187/ F07 : 23                                 INX     H       ;POINT CODE
 3188/ F08 : 23                                 INX     H       ;POINT HI ADR
 3189/ F09 : 7E                                 MOV     A,M     ;GET HI
 3190/ F0A : 12                                 STAX    D       ;PUT TO TABLE
 3191/ F0B : 13                                 INX     D       ;POINT NEXT
 3192/ F0C : 23                                 INX     H       ;DITTO
 3193/ F0D : 7E                                 MOV     A,M     ;GET LO ADDR
 3194/ F0E : 12                                 STAX    D       ;PUT TO TABLE
 3195/ F0F : E1                                 POP     H       ;RESTORE PTR TO STMT
 3196/ F10 : =>TRUE                     	IF ROMSTRT = 0
 3197/ F10 : CF                                 RST     1       ;SKIP BLANKS
 3198/ F11 : =>FALSE                    	ELSE
 3199/ F11 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3200/ F11 : [3196]                     	ENDIF
 3201/ F11 : FE 29                              CPI     ')'     ;TEST IF CLOSE PAREN
 3202/ F13 : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 3203/ F16 : 23                                 INX     H       ;SKIP IT
 3204/ F17 : =>TRUE                     	IF ROMSTRT = 0
 3205/ F17 : CF                                 RST     1       ;SKIP BLANKS
 3206/ F18 : =>FALSE                    	ELSE
 3207/ F18 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3208/ F18 : [3204]                     	ENDIF
 3209/ F18 : FE 3D                              CPI     '='     ;TEST IF EQUAL SIGN
 3210/ F1A : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 3211/ F1D : 23                                 INX     H       ;SKIP IT
 3212/ F1E : CD 57 0F                           CALL    EXPR    ;GO EVAL FUNCTION
 3213/ F21 : CD 75 1A                           CALL    EOL     ;MUST BE END OF LINE
 3214/ F24 : E1                                 POP     H       ;GET H,L
 3215/ F25 : 22 50 82                           SHLD    EXPRS   ;RESTORE START OF EXPR
 3216/ F28 : E1                                 POP     H       ;GET H,L
 3217/ F29 : 22 93 82                           SHLD    PROGE   ;RESTORE 'END' OF PROGRAM
 3218/ F2C : E1                                 POP     H       ;GET H,L
 3219/ F2D : 22 6E 82                           SHLD    FNARG+2 ;STORE ADDR
 3220/ F30 : E1                                 POP     H       ;GET H,L
 3221/ F31 : 22 6C 82                           SHLD    FNARG   ;STORE DUMMY ARG
 3222/ F34 : F1                                 POP     PSW     ;GET A,STATUS
 3223/ F35 : 32 72 80                           STA     DIMSW   ;RESTORE DIM SW
 3224/ F38 : C1                                 POP     B       ;GET B,C
 3225/ F39 : 79                                 MOV     A,C     ;LOAD C
 3226/ F3A : 32 88 82                           STA     FNMOD   ;RESTORE MOE
 3227/ F3D : 78                                 MOV     A,B     ;LOAD B
 3228/ F3E : 32 68 82                           STA     PARCT   ;RESTORE PAREN COUNT
 3229/ F41 : E1                                 POP     H       ;GET H,L
 3230/ F42 : 22 69 82                           SHLD    SPCTR   ;RESTORE SP COUNTER
 3231/ F45 : E1                                 POP     H       ;GET H,L
 3232/ F46 : 22 56 82                           SHLD    ADDR3   ;RESTORE ADDR OF EVAL
 3233/ F49 : E1                                 POP     H       ;GET H,L
 3234/ F4A : D1                                 POP     D       ;GET D,E
 3235/ F4B : 2B                                 DCX     H       ;POINT 2ND BYTE FOLLOWING OP
 3236/ F4C : 22 54 82                           SHLD    ADDR2   ;SAVE IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 55 - 9/26/2024 16:17:21


 3237/ F4F : =>TRUE                     	IF ROMSTRT = 0
 3238/ F4F : E7                         		RST     4       ;ADJUST H,L
 3239/ F50 : =>FALSE                    	ELSE
 3240/ F50 :                            		CALL	RST4	;ADJUST H,L
 3241/ F50 : [3237]                     	ENDIF
 3242/ F50 : 05                                 DB      5
 3243/ F51 : 22 52 82                           SHLD    ADDR1   ;SAVE ADDR
 3244/ F54 : C3 DE 11                           JMP     EV3     ;GO WRAPUP
 3245/ F57 :                            ;
 3246/ F57 : =0F57H                     EXPR    EQU     $
 3247/ F57 :                            ;
 3248/ F57 :                            ;
 3249/ F57 :                            ; EVALUATE EXPRESSION ROUTINE
 3250/ F57 :                            ; LEAVE RESULT IN FACC
 3251/ F57 :                            ; RETURN WHEN EXPRESSION ENDS (TYPICALLY AT END OF LINE)
 3252/ F57 :                            ;
 3253/ F57 :                            ;
 3254/ F57 : AF                                 XRA     A       ;CLEAR REG A
 3255/ F58 : 32 68 82                           STA     PARCT   ;SET PAREN CTR
 3256/ F5B : EB                                 XCHG            ;SAVE H,L
 3257/ F5C : 21 00 00                           LXI     H,0     ;GET A ZERO
 3258/ F5F : 22 69 82                           SHLD    SPCTR   ;INIT CTR
 3259/ F62 : 2A 93 82                           LHLD    PROGE   ;POINT END OF PROGRAM AREA
 3260/ F65 : 23                                 INX     H       ;POINT ONE MORE
 3261/ F66 : 36 00                              MVI     M,0     ;INIT START OF STACK
 3262/ F68 : 22 50 82                           SHLD    EXPRS   ;SAVE IT
 3263/ F6B : EB                                 XCHG            ;RESTORE H,L
 3264/ F6C :                            ;
 3265/ F6C : =0F6CH                     LOOKD   EQU     $       ;LOOK FOR CON, VAR, OR FUNCTION
 3266/ F6C : =>TRUE                     	IF ROMSTRT = 0
 3267/ F6C : CF                                 RST     1       ;SKIP TO NON-BLANK
 3268/ F6D : =>FALSE                    	ELSE
 3269/ F6D :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3270/ F6D : [3266]                     	ENDIF
 3271/ F6D : CD 0B 1B                           CALL    NUMER   ;GO TEST IF NUMERIC
 3272/ F70 : C2 86 0F                           JNZ     LDALP   ;BRIF NOT
 3273/ F73 : CD 05 14                   LDNUM:  CALL    FIN     ;GO CONVERT NUMERIC (PUT TO FACC)
 3274/ F76 : 44                         LDF:    MOV     B,H     ;COPY H,L TO B,C
 3275/ F77 : 4D                                 MOV     C,L     ;SAME
 3276/ F78 : 2A 50 82                           LHLD    EXPRS   ;GET ADDR OF EXPR AREA
 3277/ F7B : CD E1 1A                           CALL    GTEMP   ;GO STORE THE FACC IN TEMP AREA
 3278/ F7E : 22 50 82                           SHLD    EXPRS   ;SAVE UPDATED ADDRESS
 3279/ F81 : 60                                 MOV     H,B     ;RESTORE H
 3280/ F82 : 69                                 MOV     L,C     ;RESTORE L
 3281/ F83 : C3 F4 10                           JMP     LOOKO   ;GO GET AN OPERATION CODE
 3282/ F86 : FE 2E                      LDALP:  CPI     '.'     ;SEE IF LEADING DECIMAL POINT
 3283/ F88 : CA 73 0F                           JZ      LDNUM   ;BRIF IS
 3284/ F8B : CD 02 1B                           CALL    ALPHA   ;GO SEE IF ALPHA
 3285/ F8E : C2 68 10                           JNZ     LDDTN   ;BRIF NOT
 3286/ F91 : 46                                 MOV     B,M     ;SAVE 1ST CHAR
 3287/ F92 : 23                                 INX     H       ;POINT NEXT
 3288/ F93 : 0E 20                              MVI     C,' '   ;DEFAULT FOR 1 CHAR VAR
 3289/ F95 : CD 0B 1B                           CALL    NUMER   ;GO SEE IF 2ND IS NUMERIC
 3290/ F98 : C2 CB 0F                           JNZ     LDFN    ;BRIF NOT
 3291/ F9B : 23                                 INX     H       ;POINT NEXT
 3292/ F9C : 4F                                 MOV     C,A     ;SAVE THE CHAR
 3293/ F9D : =>TRUE                     	IF ROMSTRT = 0
 3294/ F9D : CF                         LDV1:   RST     1       ;GET NEXT CHAR
 3295/ F9E : =>FALSE                    	ELSE
 3296/ F9E :                            LDV1:	CALL	RST1	;CALL TO RAM ADDRESS
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 56 - 9/26/2024 16:17:21


 3297/ F9E : [3293]                     	ENDIF
 3298/ F9E : FE 24                              CPI     '$'     ;TEST IF STRING
 3299/ FA0 : F5                                 PUSH    PSW     ;SAVE STATUS
 3300/ FA1 : C2 AA 0F                           JNZ     LDV2    ;BRIF NOT
 3301/ FA4 : 79                                 MOV     A,C     ;GET LOW CHAR
 3302/ FA5 : F6 80                              ORI     80H     ;SET STRING
 3303/ FA7 : 4F                                 MOV     C,A     ;SAVE IT
 3304/ FA8 : 23                                 INX     H       ;SKIP $
 3305/ FA9 : =>TRUE                     	IF ROMSTRT = 0
 3306/ FA9 : CF                                 RST     1       ;SKIP SPACES
 3307/ FAA : =>FALSE                    	ELSE
 3308/ FAA :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3309/ FAA : [3305]                     	ENDIF
 3310/ FAA : FE 28                      LDV2:   CPI     '('     ;TEST IF PAREN
 3311/ FAC : CA AE 13                           JZ      LDV2A   ;BRIF IS
 3312/ FAF : E5                                 PUSH    H       ;SAVE H,L
 3313/ FB0 : 50                                 MOV     D,B     ;COPY B,C
 3314/ FB1 : 59                                 MOV     E,C     ;TO D,E
 3315/ FB2 : CD 15 1B                           CALL    SEARC   ;GO GET VAR ADDR IN D,E
 3316/ FB5 : 2A 50 82                   LDV:    LHLD    EXPRS   ;GET EXPR ADDR
 3317/ FB8 : CD FA 1A                           CALL    SADR    ;GO STORE ADDRESS
 3318/ FBB : 22 50 82                           SHLD    EXPRS   ;SAVE ADDRESS
 3319/ FBE : EB                                 XCHG            ;H,L TO D,E
 3320/ FBF : E1                                 POP     H       ;GET OLD H,L
 3321/ FC0 : F1                                 POP     PSW     ;GET STATUS
 3322/ FC1 : C2 F4 10                           JNZ     LOOKO   ;BRIF NOT STRING
 3323/ FC4 : EB                                 XCHG            ;GET OLD H,L
 3324/ FC5 : 36 E7                              MVI     M,0E7H  ;MARK AS STRING ADDRESS
 3325/ FC7 : EB                                 XCHG            ;RESTORE H,L
 3326/ FC8 : C3 F4 10                           JMP     LOOKO   ;GO LOOK FOR OPCODE
 3327/ FCB : CD 02 1B                   LDFN:   CALL    ALPHA   ;GO SEE IF FUNCTION
 3328/ FCE : C2 9D 0F                           JNZ     LDV1    ;BRIF IT'S NOT
 3329/ FD1 : 2B                         LDFN1:  DCX     H       ;POINT BACK TO 1ST
 3330/ FD2 : 7E                                 MOV     A,M     ;GET THAT CHAR
 3331/ FD3 : FE 20                              CPI     ' '     ;TEST IF SPACE
 3332/ FD5 : CA D1 0F                           JZ      LDFN1   ;LOOP IF TRUE
 3333/ FD8 : E5                                 PUSH    H       ;SAVE H,L
 3334/ FD9 : 11 95 1C                           LXI     D,RNDLI ;POINT LITERAL
 3335/ FDC : =>TRUE                     	IF ROMSTRT = 0
 3336/ FDC : D7                                 RST     2       ;GO COMPARE
 3337/ FDD : =>FALSE                    	ELSE
 3338/ FDD :                            		CALL	RST2	;GO COMPARE
 3339/ FDD : [3335]                     	ENDIF
 3340/ FDD : CA 3A 10                           JZ      LDRND   ;BRIF FND
 3341/ FE0 : E1                                 POP     H       ;GET H,L
 3342/ FE1 : E5                                 PUSH    H       ;RESAVE
 3343/ FE2 : 11 0F 1F                           LXI     D,FNLIT ;POINT LITERAL
 3344/ FE5 : =>TRUE                     	IF ROMSTRT = 0
 3345/ FE5 : D7                                 RST     2       ;GO COMPARE
 3346/ FE6 : =>FALSE                    	ELSE
 3347/ FE6 :                            		CALL	RST2	;GO COMPARE
 3348/ FE6 : [3344]                     	ENDIF
 3349/ FE6 : CA 15 10                           JZ      FNL     ;BRIF IS
 3350/ FE9 : E1                                 POP     H       ;GET H,L
 3351/ FEA : E5                                 PUSH    H       ;RESAVE
 3352/ FEB : 11 99 1D                           LXI     D,PILIT ;POINT LIT
 3353/ FEE : =>TRUE                     	IF ROMSTRT = 0
 3354/ FEE : D7                                 RST     2       ;GO COMPARE
 3355/ FEF : =>FALSE                    	ELSE
 3356/ FEF :                            		CALL	RST2	;GO COMPARE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 57 - 9/26/2024 16:17:21


 3357/ FEF : [3353]                     	ENDIF
 3358/ FEF : CA 4C 10                           JZ      LDPI    ;BRIF PI
 3359/ FF2 : E1                         FUNC0:  POP     H       ;GET H,L
 3360/ FF3 : 11 79 1C                           LXI     D,FUNCT ;POINT FUNCTION TABLE
 3361/ FF6 : E5                                 PUSH    H       ;SAVE POINTER
 3362/ FF7 : CD 81 1F                           CALL    SEEK1   ;GO SEARCH FUNCTION TABLE
 3363/ FFA : CA 0D 10                           JZ      FUNC4   ;BRIF FUNCTION NOT FOUND
 3364/ FFD : 1A                                 LDAX    D       ;GET A BYTE LOW
 3365/ FFE : 4F                                 MOV     C,A     ;SAVE IT
 3366/ FFF : 13                                 INX     D       ;POINT NEXT
 3367/1000 : 1A                                 LDAX    D       ;GET HI BYTE
 3368/1001 : 47                                 MOV     B,A     ;SAVE IT (B,C = ADDR OF FUNC)
 3369/1002 : =>TRUE                     	IF ROMSTRT = 0
 3370/1002 : CF                                 RST     1       ;GET 1ST NON-BLANK CHAR AFTER 'NEW'
 3371/1003 : =>FALSE                    	ELSE
 3372/1003 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3373/1003 : [3369]                     	ENDIF
 3374/1003 : FE 28                              CPI     '('     ;TEST FOR OPEN PAREN
 3375/1005 : C2 F0 1B                           JNZ     SNERR   ;BRIF MISSING PAREN
 3376/1008 : 13                                 INX     D       ;POINT TYPE CODE
 3377/1009 : 1A                                 LDAX    D       ;LOAD IT
 3378/100A : C3 56 10                           JMP     LDFNC   ;CONTINUE
 3379/100D : E1                         FUNC4:  POP     H       ;GET H,L
 3380/100E : 46                                 MOV     B,M     ;GET 1ST CHAR
 3381/100F : 0E 20                              MVI     C,' '   ;SPACE 2ND CHAR
 3382/1011 : 23                                 INX     H       ;POINT TO NEXT
 3383/1012 : C3 9D 0F                           JMP     LDV1    ;BRIF VARIABLE
 3384/1015 : D1                         FNL:    POP     D       ;DUMMY RESET STACK POINTER
 3385/1016 : CD AA 1B                           CALL    VAR     ;GO GET FN NAME
 3386/1019 : 42                                 MOV     B,D     ;COPY TO B,C
 3387/101A : 4B                                 MOV     C,E     ;SAME
 3388/101B : EB                                 XCHG            ;SAVE H,L
 3389/101C : 2A 50 82                           LHLD    EXPRS   ;POINT EXPR STACK
 3390/101F : 23                                 INX     H       ;POINT NEXT
 3391/1020 : 70                                 MOV     M,B     ;MOVE THE LETTER
 3392/1021 : 23                                 INX     H       ;POINT NEXT
 3393/1022 : 71                                 MOV     M,C     ;MOVE DIGIT ($??)
 3394/1023 : 23                                 INX     H       ;POINT NEXT
 3395/1024 : 36 AF                              MVI     M,0AFH  ;MOVE CODE
 3396/1026 : 79                                 MOV     A,C     ;GET LO NAME
 3397/1027 : B7                                 ORA     A       ;TEST IT
 3398/1028 : F2 2D 10                           JP      FNL3    ;BRIF NOT STRING
 3399/102B : 36 CF                              MVI     M,0CFH  ;MOVE CODE
 3400/102D : 22 50 82                   FNL3:   SHLD    EXPRS   ;SAVE POINTER
 3401/1030 : EB                                 XCHG            ;GET H,L
 3402/1031 : =>TRUE                     	IF ROMSTRT = 0
 3403/1031 : CF                                 RST     1       ;GET NEXT CHAR
 3404/1032 : =>FALSE                    	ELSE
 3405/1032 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 3406/1032 : [3402]                     	ENDIF
 3407/1032 : FE 28                              CPI     '('     ;TEST IF OPEN PAREN
 3408/1034 : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT
 3409/1037 : C3 6C 0F                           JMP     LOOKD   ;CONTINUE
 3410/103A : FE 28                      LDRND:  CPI     '('     ;TEST IF RND(X)
 3411/103C : CA F2 0F                           JZ      FUNC0   ;BRIF IS
 3412/103F : E5                                 PUSH    H       ;ELSE, SAVE H,L
 3413/1040 : 21 EC 1D                           LXI     H,ONE   ;USE RANGE (0,1)
 3414/1043 : =>TRUE                     	IF ROMSTRT = 0
 3415/1043 : EF                                 RST     5       ;LOAD IT
 3416/1044 : =>FALSE                    	ELSE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 58 - 9/26/2024 16:17:21


 3417/1044 :                            		CALL	RST5	;LOAD IT
 3418/1044 : [3414]                     	ENDIF
 3419/1044 : CD 5B 0C                           CALL    RND     ;GO GET RANDOM NUMBER
 3420/1047 : E1                                 POP     H       ;RESTORE H,L
 3421/1048 : D1                                 POP     D       ;RESTORE STACK POINTER
 3422/1049 : C3 76 0F                           JMP     LDF     ;ACT AS IF CONSTANT
 3423/104C : 3C                         LDPI:   INR     A       ;SET NON ZERO
 3424/104D : D1                                 POP     D       ;DUMMY STACK POP
 3425/104E : F5                                 PUSH    PSW     ;SAVE STATUS
 3426/104F : E5                                 PUSH    H       ;SAVE H,L
 3427/1050 : 11 A4 1D                           LXI     D,PI    ;GET ADDRESS OF 3.1415
 3428/1053 : C3 B5 0F                           JMP     LDV     ;GO ACT LIKE VARIABLE
 3429/1056 : D1                         LDFNC:  POP     D       ;POP THE STACK
 3430/1057 : EB                                 XCHG            ;FLIP/FLOP
 3431/1058 : 2A 50 82                           LHLD    EXPRS   ;GET ADDR
 3432/105B : 23                                 INX     H       ;POINT NEXT
 3433/105C : 70                                 MOV     M,B     ;HIGH ADDR
 3434/105D : 23                                 INX     H       ;POINT NEXT
 3435/105E : 71                                 MOV     M,C     ;LOW ADDR
 3436/105F : 23                                 INX     H       ;POINT NEXT
 3437/1060 : 77                                 MOV     M,A     ;CODE
 3438/1061 : 22 50 82                           SHLD    EXPRS   ;SAVE ADDR
 3439/1064 : EB                                 XCHG            ;RESTORE H,L
 3440/1065 : C3 6C 0F                           JMP     LOOKD   ;NEXT MUST BE DATA TOO
 3441/1068 : FE 2D                      LDDTN:  CPI     '-'     ;TEST IF UNARY MINUS
 3442/106A : C2 7C 10                           JNZ     LDDTP   ;BRIF NOT
 3443/106D : EB                                 XCHG            ;SAVE H,L
 3444/106E : 2A 50 82                           LHLD    EXPRS   ;GET EXPR END
 3445/1071 : 23                                 INX     H       ;POINT ONE MORE
 3446/1072 : 36 61                              MVI     M,61H   ;CODE FOR NEG
 3447/1074 : 22 50 82                           SHLD    EXPRS   ;RESTORE PTR
 3448/1077 : EB                                 XCHG            ;RESTORE H,L
 3449/1078 : 23                         SKPP:   INX     H       ;POINT PAST THIS BYTE
 3450/1079 : C3 6C 0F                           JMP     LOOKD   ;NEXT MUST BE DATA
 3451/107C : FE 2B                      LDDTP:  CPI     '+'     ;TEST IF UNARY PLUS
 3452/107E : CA 78 10                           JZ      SKPP    ;IGNORE IF IS
 3453/1081 : FE 28                              CPI     '('     ;ELSE, TEST IF OPEN PAREN
 3454/1083 : CA E2 10                           JZ      CERCE   ;BRIF IS
 3455/1086 : FE 27                              CPI     27H     ;TEST IF LITERAL (SINGLE QUOTE)
 3456/1088 : CA 90 10                           JZ      LITST   ;BRIF IS
 3457/108B : FE 22                              CPI     '"'     ;TEST IF LITERAL
 3458/108D : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT CON, FUNCTION, OR VAR
 3459/1090 : 4F                         LITST:  MOV     C,A     ;SAVE DELIMITER
 3460/1091 : 11 20 81                           LXI     D,STRIN ;POINT BUFFER
 3461/1094 : 06 FF                              MVI     B,0FFH  ;INIT CTR
 3462/1096 : 23                         LIT1:   INX     H       ;POINT NEXT
 3463/1097 : 7E                                 MOV     A,M     ;LOAD NEXT
 3464/1098 : 13                                 INX     D       ;POINT NEXT
 3465/1099 : 12                                 STAX    D       ;STORE IT
 3466/109A : B7                                 ORA     A       ;TEST IF END
 3467/109B : CA F0 1B                           JZ      SNERR   ;BRIF ERROR
 3468/109E : 04                                 INR     B       ;COUNT IT
 3469/109F : B9                                 CMP     C       ;TEST IF END OF STRING
 3470/10A0 : C2 96 10                           JNZ     LIT1    ;BRIF NOT
 3471/10A3 : 23                                 INX     H       ;POINT NEXT
 3472/10A4 : 11 20 81                           LXI     D,STRIN ;POINT BEGIN
 3473/10A7 : 78                                 MOV     A,B     ;GET COUNT
 3474/10A8 : 12                                 STAX    D       ;PUT COUNT
 3475/10A9 : 1F                                 RAR             ;DIVIDE BY TWO
 3476/10AA : 3C                                 INR     A       ;PLUS ONE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 59 - 9/26/2024 16:17:21


 3477/10AB : 4F                                 MOV     C,A     ;SAVE IT
 3478/10AC : 06 00                              MVI     B,0     ;ZERO HIGH
 3479/10AE : E5                                 PUSH    H       ;SAVE PTR
 3480/10AF : 2A 69 82                           LHLD    SPCTR   ;GET CTR
 3481/10B2 : 09                                 DAD     B       ;PLUS OLD
 3482/10B3 : 22 69 82                           SHLD    SPCTR   ;UPDATE IT
 3483/10B6 : D1                                 POP     D       ;GET OLD H,L
 3484/10B7 : 21 00 00                           LXI     H,0     ;GET A ZERO
 3485/10BA : E5                         LIT2:   PUSH    H       ;GET 2 WORK BYTES
 3486/10BB : 0D                                 DCR     C       ;SUB 1 FROM COUNT
 3487/10BC : C2 BA 10                           JNZ     LIT2    ;CONTINUE
 3488/10BF : 39                                 DAD     SP      ;GET ADDR OF STACK
 3489/10C0 : D5                                 PUSH    D       ;SAVE PTR TO STMT
 3490/10C1 : EB                                 XCHG            ;SAVE H,L IN D,E
 3491/10C2 : 2A 50 82                           LHLD    EXPRS   ;GET START OF EXPR
 3492/10C5 : 23                                 INX     H       ;PLUS ONE
 3493/10C6 : 72                                 MOV     M,D     ;HI BYTE
 3494/10C7 : 23                                 INX     H       ;POINT NEXT
 3495/10C8 : 73                                 MOV     M,E     ;LO BYTE
 3496/10C9 : 23                                 INX     H       ;POINT NEXT
 3497/10CA : 36 E7                              MVI     M,0E7H  ;TYPE CODE
 3498/10CC : 22 50 82                           SHLD    EXPRS   ;SAVE ADDR
 3499/10CF : EB                                 XCHG            ;D,E BACK TO H,L
 3500/10D0 : 11 20 81                           LXI     D,STRIN ;POINT STRING AREA
 3501/10D3 : 1A                                 LDAX    D       ;GET COUNT
 3502/10D4 : 3C                                 INR     A       ;ADD ONE TO COUNT
 3503/10D5 : 47                                 MOV     B,A     ;SAVE CTR
 3504/10D6 : 1A                         LIT3:   LDAX    D       ;GET A BYTE
 3505/10D7 : 77                                 MOV     M,A     ;STORE IT
 3506/10D8 : 23                                 INX     H       ;POINT NEXT
 3507/10D9 : 13                                 INX     D       ;DITTO
 3508/10DA : 05                                 DCR     B       ;DECR CTR
 3509/10DB : C2 D6 10                           JNZ     LIT3    ;LOOP
 3510/10DE : E1                                 POP     H       ;RESTORE H,L
 3511/10DF : C3 F4 10                           JMP     LOOKO   ;NEXT IS OP
 3512/10E2 : EB                         CERCE:  XCHG            ;SAVE H,L
 3513/10E3 : 21 68 82                           LXI     H,PARCT ;POINT PAREN COUNT
 3514/10E6 : 34                                 INR     M       ;ADD 1
 3515/10E7 : 2A 50 82                           LHLD    EXPRS   ;GET ADDR
 3516/10EA : 23                                 INX     H       ;POINT NEXT
 3517/10EB : 36 05                              MVI     M,5     ;PUT CODE
 3518/10ED : 22 50 82                           SHLD    EXPRS   ;SAVE ADDR
 3519/10F0 : EB                                 XCHG            ;RESTORE H,L
 3520/10F1 : C3 78 10                           JMP     SKPP    ;GO SKIP CHAR
 3521/10F4 : =>TRUE                     	IF ROMSTRT = 0
 3522/10F4 : CF                         LOOKO:  RST     1       ;SKIP BLANKS
 3523/10F5 : =>FALSE                    	ELSE
 3524/10F5 :                            LOOKO:	CALL	RST1	;CALL TO RAM ADDRESS
 3525/10F5 : [3521]                     	ENDIF
 3526/10F5 : FE 2B                              CPI     '+'     ;TEST IF PLUS
 3527/10F7 : 06 21                              MVI     B,21H   ;CODE
 3528/10F9 : CA 2F 11                           JZ      OP1     ;BRIF IS
 3529/10FC : FE 2D                              CPI     '-'     ;TEST IF MINUS
 3530/10FE : 06 25                              MVI     B,25H
 3531/1100 : CA 2F 11                           JZ      OP1     ;BRIF IS
 3532/1103 : FE 2F                              CPI     '/'     ;TEST IF DIVIDE
 3533/1105 : 06 45                              MVI     B,45H   ;CODE
 3534/1107 : CA 2F 11                           JZ      OP1     ;BRIF IS
 3535/110A : FE 5E                              CPI     '^'     ;TEST IF EXPON
 3536/110C : 06 81                              MVI     B,81H   ;CODE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 60 - 9/26/2024 16:17:21


 3537/110E : CA 2F 11                           JZ      OP1     ;BRIF IS
 3538/1111 : FE 29                              CPI     ')'     ;TEST IF CLOSE PAREN
 3539/1113 : CA 83 11                           JZ      OP3     ;BRIF IS
 3540/1116 : FE 2C                              CPI     ','     ;TEST IF COMMA
 3541/1118 : CA 6E 11                           JZ      OP2     ;BRIF IS
 3542/111B : FE 2A                              CPI     '*'     ;TEST IF MULTIPLY
 3543/111D : 06 41                              MVI     B,41H   ;CODE
 3544/111F : CA 2F 11                           JZ      OP1     ;BRIF IS
 3545/1122 :                            ; ELSE MUST BE END OF EXPRESSION
 3546/1122 : 3A 68 82                   ENDXP:  LDA     PARCT   ;GET OPEN PAREN COUNT
 3547/1125 : B7                                 ORA     A       ;TEST IT
 3548/1126 : C2 F0 1B                           JNZ     SNERR   ;BRIF # OF ('S NOT = # OF )'S
 3549/1129 : 22 56 82                           SHLD    ADDR3   ;SAVE ADDR OF STMT
 3550/112C : C3 91 11                           JMP     EVAL    ;GO EVALUATE
 3551/112F : E5                         OP1:    PUSH    H       ;SAVE PLACE IN ASCII EXPRESSION
 3552/1130 : 11 05 01                           LXI     D,0105H ;D=BYTE COUNT, E=CODE FOR "("
 3553/1133 : 2A 50 82                           LHLD    EXPRS   ;POINT TO LAST BYTE
 3554/1136 : 78                                 MOV     A,B     ;B&E3 -> C
 3555/1137 : E6 E3                              ANI     0E3H
 3556/1139 : 4F                                 MOV     C,A
 3557/113A :                            ; INSERT ( AND EVALUATE IF PRECEDENCE REDUCTION,
 3558/113A :                            ;   ELSE INNSERT OP CODE
 3559/113A : 7E                         OPLP1:  MOV     A,M     ;GET TYPE CODE FROM EXPRESSION
 3560/113B : F5                                 PUSH    PSW     ;SAVE
 3561/113C : E6 03                              ANI     3       ;GET LENGTH
 3562/113E : 14                         OPLP2:  INR     D       ;BUMP BYTE COUNT
 3563/113F : 2B                                 DCX     H       ;EXPRESSION POINTER
 3564/1140 : 3D                                 DCR     A       ;LOOP MOVES TO NEXT ELEMENT
 3565/1141 : C2 3E 11                           JNZ     OPLP2
 3566/1144 : F1                                 POP     PSW     ;RESTORE TYPE CODE
 3567/1145 : E6 E3                              ANI     0E3H    ;MASK FOR VARIABLE
 3568/1147 : FE E3                              CPI     0E3H    ;WE SKIP OVER VARIABLES
 3569/1149 : CA 3A 11                           JZ      OPLP1   ;BR IF TYPE = E3 OR E7
 3570/114C : B9                                 CMP     C       ;PRECEDENCE REDUCTION?
 3571/114D : D2 58 11                           JNC     INS     ;IF NC, YES, INSERT 05
 3572/1150 : 2A 50 82                           LHLD    EXPRS   ;NO, INSERT OPCODE BEFORE VAR AT END
 3573/1153 : =>TRUE                     	IF ROMSTRT = 0
 3574/1153 : E7                         		RST     4       ;ADJUST H,L
 3575/1154 : =>FALSE                    	ELSE
 3576/1154 :                            		CALL	RST4	;ADJUST H,L
 3577/1154 : [3573]                     	ENDIF
 3578/1154 : FD                                 DB      -3
 3579/1155 : 16 04                              MVI     D,4     ;BYTE COUNT
 3580/1157 : 58                                 MOV     E,B     ;INSERT THIS OP CODE
 3581/1158 : 43                         INS:    MOV     B,E     ;SAVE FOR BRANCH AFTER INSERTION
 3582/1159 : 23                         INS1:   INX     H       ;BUMP POINTER
 3583/115A : 4E                                 MOV     C,M     ;PICK UP BYTE
 3584/115B : 70                                 MOV     M,B     ;PUT DOWN REPLACEMENT
 3585/115C : 41                                 MOV     B,C     ;SAVE FOR NEXT LOOP
 3586/115D : 15                                 DCR     D       ;DONE?
 3587/115E : C2 59 11                           JNZ     INS1    ;IF NZ, NO
 3588/1161 : 22 50 82                           SHLD    EXPRS   ;STORE POINTER
 3589/1164 : E1                                 POP     H       ;RESTORE ASCII EXPRESSION POINTER
 3590/1165 : 7B                                 MOV     A,E     ;GET FLAG SAVED IN E
 3591/1166 : FE 05                              CPI     5       ;STORED A "("?
 3592/1168 : C2 78 10                           JNZ     SKPP    ;IF NZ, NO, PROCESS NEXT ELEMENT
 3593/116B : C3 8E 11                           JMP     OP4     ;YES, GO EVALUATE
 3594/116E : 3A 68 82                   OP2:    LDA     PARCT   ;GET OPEN PAREN COUNT
 3595/1171 : B7                                 ORA     A       ;TEST IT
 3596/1172 : CA 22 11                           JZ      ENDXP   ;BRIF END OF EXPR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 61 - 9/26/2024 16:17:21


 3597/1175 : EB                                 XCHG            ;ELSE SAVE H,L
 3598/1176 : 2A 50 82                           LHLD    EXPRS   ;GET EXPR BEGIN
 3599/1179 : 23                                 INX     H       ;POINT NEXT
 3600/117A : 36 01                              MVI     M,1     ;MOVE A COMMA
 3601/117C : 22 50 82                           SHLD    EXPRS   ;UPDATE POINTER
 3602/117F : EB                                 XCHG            ;FLIP BACK
 3603/1180 : C3 78 10                           JMP     SKPP
 3604/1183 : 3A 68 82                   OP3:    LDA     PARCT   ;GET OPEN PAREN COUNT
 3605/1186 : 3D                                 DCR     A       ;SUBTRACT ONE
 3606/1187 : 32 68 82                           STA     PARCT   ;SAVE IT
 3607/118A : FA F0 1B                           JM      SNERR   ;BRIF TOO MANY )'S
 3608/118D : 23                                 INX     H       ;POINT NEXT SOURCE
 3609/118E : 22 56 82                   OP4:    SHLD    ADDR3   ;SAVE ADDR
 3610/1191 : 2A 50 82                   EVAL:   LHLD    EXPRS   ;GET END OF EXPR
 3611/1194 : 01 00 00                           LXI     B,0     ;INIT B,C TO ZERO
 3612/1197 : 04                         EV1:    INR     B       ;COUNT EACH BYTE
 3613/1198 : 7E                                 MOV     A,M     ;GET CODE IN REG A
 3614/1199 : 2B                                 DCX     H       ;POINT NEXT
 3615/119A : FE E3                              CPI     0E3H    ;TEST IF DATA
 3616/119C : C2 A7 11                           JNZ     EV2     ;BRIF NOT DATA
 3617/119F : 2B                         EV1A:   DCX     H       ;POINT NEXT
 3618/11A0 : 2B                                 DCX     H       ;DITTO
 3619/11A1 : 04                                 INR     B       ;BUMP CTR
 3620/11A2 : 04                                 INR     B       ;BY TWO
 3621/11A3 : 0C                                 INR     C       ;COUNT THE TERM
 3622/11A4 : C3 97 11                           JMP     EV1     ;LOOP
 3623/11A7 : FE AF                      EV2:    CPI     0AFH    ;TEST IF NUMERIC USER FN
 3624/11A9 : CA 88 0E                           JZ      FN      ;BRIF IS
 3625/11AC : FE CF                              CPI     0CFH    ;TEST IF STRING USER FN
 3626/11AE : CA 88 0E                           JZ      FN      ;BRIF IS
 3627/11B1 : F5                                 PUSH    PSW     ;ELSE, SAVE STATUS
 3628/11B2 : E6 E3                              ANI     0E3H    ;MASK IT
 3629/11B4 : FE A3                              CPI     0A3H    ;TEST IF NUMERIC FUNCTION
 3630/11B6 : CA C7 11                           JZ      EV2A    ;BRIF IS
 3631/11B9 : FE C3                              CPI     0C3H    ;TEST IF STRING FUNCTION
 3632/11BB : CA C7 11                           JZ      EV2A    ;BRIF IS
 3633/11BE : F1                                 POP     PSW     ;RESTORE CODE
 3634/11BF : FE E7                              CPI     0E7H    ;TEST IF STRING ADDR
 3635/11C1 : CA 9F 11                           JZ      EV1A    ;BRIF IS
 3636/11C4 : C3 4F 12                           JMP     EV5     ;BR AROUND
 3637/11C7 : 23                         EV2A:   INX     H       ;RESET TO TYPE CODE
 3638/11C8 : 22 52 82                           SHLD    ADDR1   ;SAVE ADDR
 3639/11CB : D1                                 POP     D       ;DUMMY POP
 3640/11CC : C5                                 PUSH    B       ;SAVE CTRS
 3641/11CD : 2B                                 DCX     H       ;POINT TO LOW JMP ADDR
 3642/11CE : 5E                                 MOV     E,M     ;LOW BYTE
 3643/11CF : 2B                                 DCX     H       ;POINT BACK
 3644/11D0 : 56                                 MOV     D,M     ;HIGH BACK
 3645/11D1 : 22 54 82                           SHLD    ADDR2   ;SAVE LOCATION
 3646/11D4 : 21 DE 11                           LXI     H,EV3   ;GET RETURN ADDRESS
 3647/11D7 : E5                                 PUSH    H       ;SAVE ON STACK
 3648/11D8 : D5                                 PUSH    D       ;SAVE ADDRESS
 3649/11D9 : CD 55 1C                           CALL    ARG     ;GO GET 1ST ARG
 3650/11DC : E1                                 POP     H       ;GET H,L ADDRESS
 3651/11DD : E9                                 PCHL            ;GO EXECUTE THE FUNCTION
 3652/11DE : =11DEH                     EV3     EQU     $       ;FUNCTIONS RETURN HERE
 3653/11DE : 2A 54 82                           LHLD    ADDR2   ;GET ADDR FUNC
 3654/11E1 : 23                                 INX     H       ;POINT LO
 3655/11E2 : 23                                 INX     H       ;POINT TYPE
 3656/11E3 : 7E                                 MOV     A,M     ;LOAD IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 62 - 9/26/2024 16:17:21


 3657/11E4 : E6 E0                              ANI     0E0H    ;MASK IT
 3658/11E6 : FE C0                              CPI     0C0H    ;TEST IF STRING
 3659/11E8 : CA 23 12                           JZ      EV4     ;BRIF IS
 3660/11EB : C1                                 POP     B       ;GET CTRS
 3661/11EC : 2A 69 82                           LHLD    SPCTR   ;GET COUNTER
 3662/11EF : 23                                 INX     H       ;PLUS
 3663/11F0 : 23                                 INX     H       ;TWO WORDS
 3664/11F1 : 22 69 82                           SHLD    SPCTR   ;STORE IT
 3665/11F4 : 21 00 00                           LXI     H,0     ;LOAD ZERO TO H,L
 3666/11F7 : E5                                 PUSH    H       ;GET BLOCK OF
 3667/11F8 : E5                                 PUSH    H       ;BYTES
 3668/11F9 : 39                                 DAD     SP      ;GET STACK ADDR
 3669/11FA : C5                                 PUSH    B       ;SAVE CTRS
 3670/11FB : E5                                 PUSH    H       ;SAVE ADDR
 3671/11FC : =>TRUE                     	IF ROMSTRT = 0
 3672/11FC : DF                                 RST     3       ;GO STORE THE VALUE
 3673/11FD : =>FALSE                    	ELSE
 3674/11FD :                            		CALL	RST3	;GO STORE THE VALUE
 3675/11FD : [3671]                     	ENDIF
 3676/11FD : 3E E3                              MVI     A,0E3H  ;TYPE=NUM
 3677/11FF : D1                         EV3A:   POP     D       ;GET ADDR IN STACK
 3678/1200 : 2A 52 82                           LHLD    ADDR1   ;GET ADDR LST ARG
 3679/1203 : 77                                 MOV     M,A     ;STORE TYPE CODE
 3680/1204 : 2B                                 DCX     H       ;POINT ONE BACK
 3681/1205 : 73                                 MOV     M,E     ;STORE LO ADDR
 3682/1206 : 2B                                 DCX     H       ;POINT BACK
 3683/1207 : 72                                 MOV     M,D     ;STORE HI ADDR
 3684/1208 : 2A 54 82                           LHLD    ADDR2   ;GET LOCATION FUNCTION
 3685/120B : 23                                 INX     H       ;POINT LO
 3686/120C : 23                                 INX     H       ;POINT TYPE
 3687/120D : 7E                                 MOV     A,M     ;LOAD TYPE
 3688/120E : 46                                 MOV     B,M     ;GET TYPE
 3689/120F : =>TRUE                     	IF ROMSTRT = 0
 3690/120F : E7                         		RST     4       ;ADJUST H,L
 3691/1210 : =>FALSE                    	ELSE
 3692/1210 :                            		CALL	RST4	;ADJUST H,L
 3693/1210 : [3689]                     	ENDIF
 3694/1210 : FD                                 DB      -3
 3695/1211 : 78                                 MOV     A,B     ;LOAD TYPE
 3696/1212 : C1                                 POP     B       ;RESTORE CTRS
 3697/1213 : E6 18                              ANI     18H     ;ISOLATE #ARGS
 3698/1215 : 1F                                 RAR             ;SHIFT RIGHT
 3699/1216 : 1F                                 RAR             ;AGAIN
 3700/1217 : 1F                                 RAR             ;ONCE MORE
 3701/1218 : 57                                 MOV     D,A     ;SAVE IT
 3702/1219 : 82                                 ADD     D       ;TIMES 2
 3703/121A : 82                                 ADD     D       ;TIMES 3
 3704/121B : 04                                 INR     B       ;POINT
 3705/121C : 04                                 INR     B       ;LST POSIT IN LOC
 3706/121D : CD C3 1A                           CALL    SQUIS   ;GO COMPRESS STACK
 3707/1220 : C3 91 11                           JMP     EVAL    ;START AT BEGINNING
 3708/1223 : 11 20 81                   EV4:    LXI     D,STRIN ;POINT STRING BUFFER
 3709/1226 : 1A                                 LDAX    D       ;LOAD IT
 3710/1227 : 1F                                 RAR             ;DIVIDE BY TWO
 3711/1228 : 3C                                 INR     A       ;ADD 1
 3712/1229 : 2A 69 82                           LHLD    SPCTR   ;GET SP COUNT
 3713/122C : 4F                                 MOV     C,A     ;SAVE LO
 3714/122D : 06 00                              MVI     B,0     ;SET HI
 3715/122F : 09                                 DAD     B       ;ADD NUMBER WORDS
 3716/1230 : 22 69 82                           SHLD    SPCTR   ;SAVE SP COUNT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 63 - 9/26/2024 16:17:21


 3717/1233 : 21 00 00                           LXI     H,0     ;GET SOME ZEROS
 3718/1236 : C1                                 POP     B       ;GET CTRS
 3719/1237 : E5                         EV4A:   PUSH    H       ;GET 1 WORD
 3720/1238 : 3D                                 DCR     A       ;DECR CTR
 3721/1239 : C2 37 12                           JNZ     EV4A    ;LOOP
 3722/123C : 39                                 DAD     SP      ;GET ADDRESS IN H,L
 3723/123D : C5                                 PUSH    B       ;RE-SAVE CTRS
 3724/123E : E5                                 PUSH    H       ;SAVE ADDR
 3725/123F : 1A                                 LDAX    D       ;GET COUNT
 3726/1240 : 3C                                 INR     A       ;PLUS ONE
 3727/1241 : 47                                 MOV     B,A     ;SAVE IT
 3728/1242 : 1A                         EV4B:   LDAX    D       ;GET A BYTE
 3729/1243 : 77                                 MOV     M,A     ;STORE IT
 3730/1244 : 13                                 INX     D       ;POINT NEXT
 3731/1245 : 23                                 INX     H       ;DITTO
 3732/1246 : 05                                 DCR     B       ;DECR CTR
 3733/1247 : C2 42 12                           JNZ     EV4B    ;LOOP
 3734/124A : 3E E7                              MVI     A,0E7H  ;TYPE CODE
 3735/124C : C3 FF 11                           JMP     EV3A    ;CONTINUE
 3736/124F : FE 05                      EV5:    CPI     5       ;TEST IF OPEN PAREN
 3737/1251 : C2 6D 12                           JNZ     EV6     ;BRIF NOT
 3738/1254 : 3E 01                              MVI     A,1     ;DELETE 1 BYTE
 3739/1256 : CD C3 1A                           CALL    SQUIS   ;GO COMPRESS IT
 3740/1259 : 2A 56 82                           LHLD    ADDR3   ;RESTORE STMT POINTER
 3741/125C : 3A 72 80                           LDA     DIMSW   ;GET SUBSR SWITCH
 3742/125F : B7                                 ORA     A       ;TEST IT
 3743/1260 : CA F4 10                           JZ      LOOKO   ;BRIF NOT IN SUBS^CRIPT
 3744/1263 : 3A 68 82                           LDA     PARCT   ;GET OPEN PAREN COUNT
 3745/1266 : B7                                 ORA     A       ;TEST
 3746/1267 : C2 F4 10                           JNZ     LOOKO   ;BRIF NOT ZERO
 3747/126A : C3 91 11                           JMP     EVAL    ;ELSE EVALUATE COMPLETE SUBSCR
 3748/126D : B7                         EV6:    ORA     A       ;TEST IF END OF EXPRESSION
 3749/126E : C2 9E 12                           JNZ     EV9     ;BRIF NOT
 3750/1271 : 3A 72 80                           LDA     DIMSW   ;GET DIM SW
 3751/1274 : B7                                 ORA     A       ;TEST IT
 3752/1275 : C4 74 13                           CNZ     EDM1    ;BRIF NOT OFF
 3753/1278 : 79                                 MOV     A,C     ;GET TERM COUNT
 3754/1279 : FE 01                              CPI     1       ;TEST IF ONE
 3755/127B : C2 EC 1B                           JNZ     STERR   ;ERROR IF NOT ONE
 3756/127E : 23                                 INX     H       ;POINT HIGH ADDR
 3757/127F : 23                                 INX     H       ;SAME
 3758/1280 : 56                                 MOV     D,M     ;HIGH TO D
 3759/1281 : 23                                 INX     H       ;POINT LOW
 3760/1282 : 5E                                 MOV     E,M     ;LOW TO E
 3761/1283 : CD 5A 13                           CALL    EVLD    ;GO LOAD VALUE
 3762/1286 : 2A 69 82                           LHLD    SPCTR   ;GET STACK CTR
 3763/1289 : 7D                         EV7:    MOV     A,L     ;GET LO BYTE
 3764/128A : B4                                 ORA     H       ;PLUS HI
 3765/128B : CA 93 12                           JZ      DV8     ;BRIF ZERO
 3766/128E : D1                                 POP     D       ;RETURN 2 BYTES
 3767/128F : 2B                                 DCX     H       ;DECR CTR
 3768/1290 : C3 89 12                           JMP     EV7     ;LOOP
 3769/1293 : 3A 72 80                   DV8:    LDA     DIMSW   ;GET DIM SW
 3770/1296 : B7                                 ORA     A       ;TEST IT
 3771/1297 : C4 9B 13                           CNZ     EDM4    ;BRIF ON
 3772/129A : 2A 56 82                           LHLD    ADDR3   ;RESTORE STMT PTR
 3773/129D : C9                                 RET             ;RETURN TO STMT PROCESSOR
 3774/129E : FE 21                      EV9:    CPI     21H     ;TEST IF PLUS
 3775/12A0 : 11 F2 12                           LXI     D,FADDJ ;ADDR
 3776/12A3 : CA D0 12                           JZ      EV10    ;BRIF IS
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 64 - 9/26/2024 16:17:21


 3777/12A6 : FE 25                              CPI     25H     ;TEST IF MINUS
 3778/12A8 : 11 E3 16                           LXI     D,FSUB  ;ADDR
 3779/12AB : CA D0 12                           JZ      EV10    ;BRIF IS
 3780/12AE : FE 41                              CPI     41H     ;TEST IF MUL
 3781/12B0 : 11 EF 16                           LXI     D,FMUL  ;ADDR
 3782/12B3 : CA D0 12                           JZ      EV10    ;BRIF IS
 3783/12B6 : FE 45                              CPI     45H     ;TEST IF DIV
 3784/12B8 : 11 72 17                           LXI     D,FDIV  ;ADDR
 3785/12BB : CA D0 12                           JZ      EV10    ;BRIF IS
 3786/12BE : FE 01                              CPI     1       ;TEST IF COMMA
 3787/12C0 : CA 4E 13                           JZ      EVCOM   ;BRIF IS
 3788/12C3 : FE 61                              CPI     61H     ;TEST IF UNARY MINUS
 3789/12C5 : CA 3A 13                           JZ      EVNEG   ;BRIF IS
 3790/12C8 : FE 81                              CPI     81H     ;TEST IF EXPONENTIAL
 3791/12CA : 11 FA 12                           LXI     D,POWER ;ADDR
 3792/12CD : C2 EC 1B                           JNZ     STERR   ;ERROR IF NOT
 3793/12D0 : 23                         EV10:   INX     H       ;POINT TO
 3794/12D1 : 23                                 INX     H       ;1ST DATA
 3795/12D2 : C5                                 PUSH    B       ;SAVE CTRS
 3796/12D3 : D5                                 PUSH    D       ;SAVE ROUTINE ADDR
 3797/12D4 : 56                                 MOV     D,M     ;HIGH TO D
 3798/12D5 : 23                                 INX     H       ;POINT NEXT
 3799/12D6 : 5E                                 MOV     E,M     ;LOW TO E
 3800/12D7 : E5                                 PUSH    H       ;SAVE POINTER
 3801/12D8 : CD 5A 13                           CALL    EVLD    ;GO LOAD VALUE
 3802/12DB : E1                                 POP     H       ;RESTORE H,L
 3803/12DC : 23                                 INX     H       ;POINT 2ND DATA
 3804/12DD : 23                                 INX     H       ;SAME
 3805/12DE : 56                                 MOV     D,M     ;HIGH TO D
 3806/12DF : 23                                 INX     H       ;POINT NEXT
 3807/12E0 : 5E                                 MOV     E,M     ;LOW TO E
 3808/12E1 : 23                                 INX     H       ;POINT NEXT
 3809/12E2 : 3A 8E 82                           LDA     NS      ;GET PREV TYPE
 3810/12E5 : BE                                 CMP     M       ;TEST THIS TYPE
 3811/12E6 : C2 F0 1B                           JNZ     SNERR   ;BRIF MIXED MODE
 3812/12E9 : 2B                                 DCX     H       ;POINT BACK
 3813/12EA : E3                                 XTHL            ;POP ADDR FROM STACK, PUSH H ONTO
 3814/12EB : 01 29 13                           LXI     B,EV11  ;RETURN ADDRESS
 3815/12EE : C5                                 PUSH    B       ;SAVE ON STACK
 3816/12EF : E5                                 PUSH    H       ;SAVE JUMP ADDR
 3817/12F0 : EB                                 XCHG            ;PUT VAR ADDR TO H,L
 3818/12F1 : C9                                 RET             ;FAKE CALL TO ROUTINE
 3819/12F2 : FE E7                      FADDJ:  CPI     0E7H    ;TEST IF STRINGS
 3820/12F4 : CA FD 0C                           JZ      CONCA   ;BRIF IS
 3821/12F7 : C3 0E 16                           JMP     FADD    ;ELSE, GO ADD
 3822/12FA : E5                         POWER:  PUSH    H       ;SAVE ADDR OF VAR
 3823/12FB : 21 2F 82                           LXI     H,TEMP1 ;POINT SAVE AREA
 3824/12FE : =>TRUE                     	IF ROMSTRT = 0
 3825/12FE : DF                                 RST     3       ;GO STORE THE VALUE
 3826/12FF : =>FALSE                    	ELSE
 3827/12FF :                            		CALL	RST3	;GO STORE THE VALUE
 3828/12FF : [3824]                     	ENDIF
 3829/12FF : E1                                 POP     H       ;RESTORE H,L
 3830/1300 : =>TRUE                     	IF ROMSTRT = 0
 3831/1300 : EF                                 RST     5       ;LOAD IT
 3832/1301 : =>FALSE                    	ELSE
 3833/1301 :                            		CALL	RST5	;LOAD IT
 3834/1301 : [3830]                     	ENDIF
 3835/1301 : CD A5 18                           CALL    FTEST   ;TEST FOR ZERO
 3836/1304 : CA AD 0B                           JZ      SGN1    ;GIVE RESULT = 1 IF POWER = 0
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 65 - 9/26/2024 16:17:21


 3837/1307 : 21 47 82                           LXI     H,TEMP7 ;POINT SAVE AREA
 3838/130A : =>TRUE                     	IF ROMSTRT = 0
 3839/130A : DF                                 RST     3       ;GO STORE THE VALUE
 3840/130B : =>FALSE                    	ELSE
 3841/130B :                            		CALL	RST3	;GO STORE THE VALUE
 3842/130B : [3838]                     	ENDIF
 3843/130B : 21 2F 82                           LXI     H,TEMP1 ;POINT X
 3844/130E : =>TRUE                     	IF ROMSTRT = 0
 3845/130E : EF                                 RST     5       ;LOAD IT
 3846/130F : =>FALSE                    	ELSE
 3847/130F :                            		CALL	RST5	;LOAD IT
 3848/130F : [3844]                     	ENDIF
 3849/130F : CD A5 18                           CALL    FTEST   ;TEST FOR ZERO
 3850/1312 : C8                                 RZ              ;0^X = 0
 3851/1313 : CD EA 0A                           CALL    LN      ;GET NATURAL LNRITHM
 3852/1316 : 21 47 82                           LXI     H,TEMP7 ;POINT B
 3853/1319 : CD EF 16                           CALL    FMUL    ;GO MULTIPLY
 3854/131C : C3 41 0B                           JMP     EXP     ;GET EXP FUNC
 3855/131F :                            ; X^B = EXP(B*LN(X))
 3856/131F : 21 2F 82                   XSQR:   LXI     H,TEMP1 ;POINT X
 3857/1322 : =>TRUE                     	IF ROMSTRT = 0
 3858/1322 : EF                                 RST     5       ;LOAD IT
 3859/1323 : =>FALSE                    	ELSE
 3860/1323 :                            		CALL	RST5	;LOAD IT
 3861/1323 : [3857]                     	ENDIF
 3862/1323 : 21 2F 82                           LXI     H,TEMP1 ;POINT X
 3863/1326 : C3 EF 16                           JMP     FMUL    ;TIMES X
 3864/1329 : E1                         EV11:   POP     H       ;GET H,L
 3865/132A : C1                                 POP     B       ;GET CTRS
 3866/132B : 2B                                 DCX     H       ;POINT BACK
 3867/132C : 2B                                 DCX     H       ;AND AGAIN
 3868/132D : CD E1 1A                           CALL    GTEMP   ;GO SAVE FACC
 3869/1330 : =>TRUE                     	IF ROMSTRT = 0
 3870/1330 : E7                         		RST     4       ;ADJUST H,L
 3871/1331 : =>FALSE                    	ELSE
 3872/1331 :                            		CALL	RST4	;ADJUST H,L
 3873/1331 : [3869]                     	ENDIF
 3874/1331 : F9                                 DB      -7
 3875/1332 : 3E 04                              MVI     A,4     ;DELETE 4 BYTES
 3876/1334 : CD C3 1A                           CALL    SQUIS   ;GO COMPRESS
 3877/1337 : C3 91 11                           JMP     EVAL    ;CONTINUE
 3878/133A : 23                         EVNEG:  INX     H       ;POINT BACK TO OP
 3879/133B : C5                                 PUSH    B       ;SAVE CTRS
 3880/133C : E5                                 PUSH    H       ;SAVE H,L
 3881/133D : 23                                 INX     H       ;DITTO
 3882/133E : 56                                 MOV     D,M     ;GET HI BYTE
 3883/133F : 23                                 INX     H       ;POINT NEXT
 3884/1340 : 5E                                 MOV     E,M     ;GET LO BYTE
 3885/1341 : CD 5A 13                           CALL    EVLD    ;GO LOAD VAR
 3886/1344 : CD 51 0C                           CALL    NEG     ;GO NEGATE IT
 3887/1347 : E1                                 POP     H       ;GET LOCATINO
 3888/1348 : C1                                 POP     B       ;GET CTRS
 3889/1349 : CD E1 1A                           CALL    GTEMP   ;GO STORE FACC IN STACK
 3890/134C : =>TRUE                     	IF ROMSTRT = 0
 3891/134C : E7                         		RST     4       ;ADJUST H,L
 3892/134D : =>FALSE                    	ELSE
 3893/134D :                            		CALL	RST4	;ADJUST H,L
 3894/134D : [3890]                     	ENDIF
 3895/134D : FC                                 DB      -4
 3896/134E : 3E 01                      EVCOM:  MVI     A,1     ;DELETE 1 BYTE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 66 - 9/26/2024 16:17:21


 3897/1350 : CD C3 1A                           CALL    SQUIS   ;COMPRESS
 3898/1353 : 21 6B 82                           LXI     H,CMACT ;GET COUNT
 3899/1356 : 34                                 INR     M       ;INCR
 3900/1357 : C3 91 11                           JMP     EVAL    ;CONTINUE
 3901/135A : 23                         EVLD:   INX     H       ;POINT TYPE
 3902/135B : 7E                                 MOV     A,M     ;LOAD IT
 3903/135C : 32 8E 82                           STA     NS      ;SAVE IT
 3904/135F : EB                                 XCHG            ;SAVE H,L IN D,E
 3905/1360 : FE E7                              CPI     0E7H    ;TEST IF STRING
 3906/1362 : C2 28 00                           JNZ     RST5    ;LOAD FLOATING POINT
 3907/1365 : 11 20 81                           LXI     D,STRIN ;POINT BUFFER
 3908/1368 : 7E                                 MOV     A,M     ;GET COUNT
 3909/1369 : 3C                                 INR     A       ;ADD ONE
 3910/136A : 47                                 MOV     B,A     ;SAVE COUNT
 3911/136B : 7E                         EVLD1:  MOV     A,M     ;GET NEXT
 3912/136C : 12                                 STAX    D       ;STORE IT
 3913/136D : 23                                 INX     H       ;POINT NEXT
 3914/136E : 13                                 INX     D       ;DITTO
 3915/136F : 05                                 DCR     B       ;DECR COUNT
 3916/1370 : C2 6B 13                           JNZ     EVLD1   ;LOOP
 3917/1373 : C9                                 RET             ;RETURN
 3918/1374 :                            ;
 3919/1374 : 79                         EDM1:   MOV     A,C     ;GET ITEM COUNT
 3920/1375 : E5                                 PUSH    H       ;SAVE H,L
 3921/1376 : FE 01                              CPI     1       ;TEST IF 1
 3922/1378 : C2 87 13                           JNZ     EDM3    ;BRIF NOT
 3923/137B : 06 04                              MVI     B,4     ;GET COUNT
 3924/137D : 21 2F 82                           LXI     H,TEMP1 ;POINT AREA
 3925/1380 : CD 3F 1C                           CALL    ZEROM   ;GO ZERO IT
 3926/1383 : E1                         EDM2A:  POP     H       ;RESTORE H,L
 3927/1384 : 0E 01                              MVI     C,1     ;SET COUNT
 3928/1386 : C9                                 RET             ;RETURN
 3929/1387 : FE 02                      EDM3:   CPI     2       ;TEST IF 2
 3930/1389 : C2 F0 1B                           JNZ     SNERR   ;ELSE, ERROR
 3931/138C : =>TRUE                     	IF ROMSTRT = 0
 3932/138C : E7                         		RST     4       ;ADJUST H,L
 3933/138D : =>FALSE                    	ELSE
 3934/138D :                            		CALL	RST4	;ADJUST H,L
 3935/138D : [3931]                     	ENDIF
 3936/138D : 05                                 DB      5
 3937/138E : 56                                 MOV     D,M     ;GET HI ADDR
 3938/138F : 23                                 INX     H       ;POINT NEXT
 3939/1390 : 5E                                 MOV     E,M     ;GET LO ADDR
 3940/1391 : CD 5A 13                           CALL    EVLD    ;LOAD THE ARG
 3941/1394 : 21 2F 82                           LXI     H,TEMP1 ;POINT AREA
 3942/1397 : =>TRUE                     	IF ROMSTRT = 0
 3943/1397 : DF                                 RST     3       ;GO STORE THE VALUE
 3944/1398 : =>FALSE                    	ELSE
 3945/1398 :                            		CALL	RST3	;GO STORE THE VALUE
 3946/1398 : [3942]                     	ENDIF
 3947/1398 : C3 83 13                           JMP     EDM2A   ;CONTINUE
 3948/139B : CD 30 1F                   EDM4:   CALL    FACDE   ;CONVERT FACC TO D,E
 3949/139E : D5                                 PUSH    D       ;PUT D,E TO B,C
 3950/139F : C1                                 POP     B
 3951/13A0 : C5                                 PUSH    B       ;SAVE COL
 3952/13A1 : 21 2F 82                           LXI     H,TEMP1 ;POINT 2ND ARGUMENT
 3953/13A4 : =>TRUE                     	IF ROMSTRT = 0
 3954/13A4 : EF                                 RST     5       ;LOAD IT
 3955/13A5 : =>FALSE                    	ELSE
 3956/13A5 :                            		CALL	RST5	;LOAD IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 67 - 9/26/2024 16:17:21


 3957/13A5 : [3953]                     	ENDIF
 3958/13A5 : CD 30 1F                           CALL    FACDE   ;CONVERT TO D,E
 3959/13A8 : C1                                 POP     B       ;GET COL
 3960/13A9 : AF                                 XRA     A       ;GET A ZERO
 3961/13AA : 32 72 80                           STA     DIMSW   ;RESET SW
 3962/13AD : C9                                 RET             ;RETURN
 3963/13AE : 78                         LDV2A:  MOV     A,B     ;GET HI NAME
 3964/13AF : F6 80                              ORI     80H     ;SET BIT
 3965/13B1 : 47                                 MOV     B,A     ;RESTORE
 3966/13B2 : C5                                 PUSH    B       ;SAVE NAME
 3967/13B3 : EB                                 XCHG            ;SAVE H,L IN D,E
 3968/13B4 : 3A 68 82                           LDA     PARCT   ;GET PAREN COUNT
 3969/13B7 : F5                                 PUSH    PSW     ;SAVE
 3970/13B8 : AF                                 XRA     A       ;CLEAR REG A
 3971/13B9 : 32 68 82                           STA     PARCT   ;RESET COUNT
 3972/13BC : 2A 69 82                           LHLD    SPCTR   ;GET STACK COUNTER
 3973/13BF : E5                                 PUSH    H       ;SAVE IT
 3974/13C0 : 21 00 00                           LXI     H,0     ;GET A ZERO
 3975/13C3 : 22 69 82                           SHLD    SPCTR   ;RESET CTR
 3976/13C6 : 2A 50 82                           LHLD    EXPRS   ;GET EXPRST
 3977/13C9 : E5                                 PUSH    H       ;SAVE IT
 3978/13CA : 23                                 INX     H       ;POINT NEXT
 3979/13CB : 36 00                              MVI     M,0     ;SET NEW START
 3980/13CD : 22 50 82                           SHLD    EXPRS   ;SAVE IT
 3981/13D0 : 3A 72 80                           LDA     DIMSW   ;GET PREV SE
 3982/13D3 : F5                                 PUSH    PSW     ;SAVE IT
 3983/13D4 : EB                                 XCHG            ;RESTORE H,L
 3984/13D5 : 3E FF                              MVI     A,0FFH  ;GET ON VALUE
 3985/13D7 : 32 72 80                           STA     DIMSW   ;SET SW
 3986/13DA : CD 6C 0F                           CALL    LOOKD   ;RECURSIVE CALL
 3987/13DD : F1                                 POP     PSW     ;GET DIM SW
 3988/13DE : 32 72 80                           STA     DIMSW   ;REPLACE IT
 3989/13E1 : 22 56 82                           SHLD    ADDR3   ;SAVE H,L
 3990/13E4 : E1                                 POP     H       ;GET EXPRST
 3991/13E5 : 22 50 82                           SHLD    EXPRS   ;SAVE IT
 3992/13E8 : E1                                 POP     H       ;GET STACK COUNTER
 3993/13E9 : 22 69 82                           SHLD    SPCTR   ;RESTORE IT
 3994/13EC : F1                                 POP     PSW     ;GET PAREN COUNT
 3995/13ED : 32 68 82                           STA     PARCT   ;RESTORE IT
 3996/13F0 : E1                                 POP     H       ;GET NAME
 3997/13F1 : D5                                 PUSH    D       ;SAVE ROW
 3998/13F2 : C5                                 PUSH    B       ;SAVE COL
 3999/13F3 : EB                                 XCHG            ;PUT NAME IN D,E
 4000/13F4 : CD 15 1B                           CALL    SEARC   ;GO FIND ADDRESS (PUT IN D,E)
 4001/13F7 : D1                                 POP     D       ;GET ADDR
 4002/13F8 : C1                                 POP     B       ;RESTORE COL
 4003/13F9 : D1                                 POP     D       ;RESTORE ROW
 4004/13FA : CD 5C 18                           CALL    SUBSC   ;GET SUBSCRIPT (RETURNS ADDR IN H,L)
 4005/13FD : EB                                 XCHG            ;SAVE IN D,E
 4006/13FE : 2A 56 82                           LHLD    ADDR3   ;GET H,L
 4007/1401 : E5                                 PUSH    H       ;SAVE ON STACK
 4008/1402 : C3 B5 0F                           JMP     LDV     ;CONTINUE
 4009/1405 :                            ;       PAGE
 4010/1405 :                            ;
 4011/1405 : =1405H                     FIN     EQU     $
 4012/1405 :                            ;
 4013/1405 :                            ; FLOATING POINT INPUT CONVERSION ROUTINE
 4014/1405 :                            ;
 4015/1405 :                            ; THIS SUBROUTINE CONVERTS AN ASCII STRING OF CHARACTERS
 4016/1405 :                            ; TO THE FLOATING POINT ACCUMULATOR.  THE INPUT FIELD
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 68 - 9/26/2024 16:17:21


 4017/1405 :                            ; MAY CONTAIN ANY VALID NUMBER, INCLUDING SCIENTIFIC
 4018/1405 :                            ; NOTATION (NNN.NNNNE+NN).
 4019/1405 :                            ; THE INPUT STRING IS TERMINATED BY ANY NON-NUMERIC CHAR
 4020/1405 :                            ;
 4021/1405 :                            ;
 4022/1405 : EB                                 XCHG            ;PUT ADDR TO D,E
 4023/1406 : 0E 00                              MVI     C,0     ;INITIAL VALUE EXCESS DIGIT COUNT
 4024/1408 : CD 5F 14                           CALL    FIN8    ;GET INTEGER PORTION
 4025/140B : 06 00                              MVI     B,0     ;CLEAR DIGIT COUNT
 4026/140D : FE 2E                              CPI     '.'     ;TEST IF DEC-POINT
 4027/140F : C2 15 14                           JNZ     FIN2    ;BRIF NOT
 4028/1412 : CD 79 14                           CALL    FIN9    ;GET FRACTION
 4029/1415 : F1                         FIN2:   POP     PSW     ;GET SIGN
 4030/1416 : F6 18                              ORI     24      ;SET UP FOR FLOAT
 4031/1418 : 32 58 82                           STA     FACC
 4032/141B : 78                                 MOV     A,B     ;GET # FRACTION DIGITS
 4033/141C : 81                                 ADD     C       ;+ EXCESS DIGITS
 4034/141D : F5                                 PUSH    PSW     ;SAVE POWER OF TEN
 4035/141E : D5                                 PUSH    D       ;SAVE PTR
 4036/141F : CD B4 16                           CALL    FNORM   ;NORMALIZE NUMBER
 4037/1422 : 1A                                 LDAX    D       ;GET NEXT CHARACTER
 4038/1423 : FE 45                              CPI     'E'     ;TEST IF EXPONENT
 4039/1425 : C2 43 14                           JNZ     FIN4    ;BRIF NOT
 4040/1428 : 21 5C 82                           LXI     H,FTEMP ;POINT SAVE AREA
 4041/142B : =>TRUE                     	IF ROMSTRT = 0
 4042/142B : DF                                 RST     3       ;GO STORE THE VALUE
 4043/142C : =>FALSE                    	ELSE
 4044/142C :                            		CALL	RST3	;GO STORE THE VALUE
 4045/142C : [4041]                     	ENDIF
 4046/142C : D1                                 POP     D       ;RESTORE PTR
 4047/142D : 13                                 INX     D       ;SKIP 'E'
 4048/142E : CD 5F 14                           CALL    FIN8    ;GET NUMERIC EXP
 4049/1431 : 3A 5B 82                           LDA     FACC+3  ;GET EXPONENT
 4050/1434 : C1                                 POP     B       ;EXPONENT SIGN
 4051/1435 : 04                                 INR     B       ;TEST
 4052/1436 : F2 3B 14                           JP      FIN3    ;BRIF NOT NEG
 4053/1439 : 2F                                 CMA             ;NEGATE EXPONENT
 4054/143A : 3C                                 INR     A
 4055/143B : C1                         FIN3:   POP     B       ;POWER OF TEN
 4056/143C : 80                                 ADD     B       ;ADD EXPONENT
 4057/143D : F5                                 PUSH    PSW     ;SAVE COUNT
 4058/143E : 21 5C 82                           LXI     H,FTEMP ;RESTORE NUMBER
 4059/1441 : D5                                 PUSH    D       ;SAVE PTR
 4060/1442 : =>TRUE                     	IF ROMSTRT = 0
 4061/1442 : EF                                 RST     5       ;LOAD IT
 4062/1443 : =>FALSE                    	ELSE
 4063/1443 :                            		CALL	RST5	;LOAD IT
 4064/1443 : [4060]                     	ENDIF
 4065/1443 : E1                         FIN4:   POP     H       ;RESTORE PTR
 4066/1444 : F1                                 POP     PSW     ;RESTORE COUNT
 4067/1445 : C8                         FIN5:   RZ              ;RETURN IF ZERO
 4068/1446 : E5                                 PUSH    H       ;SAVE H,L
 4069/1447 : 21 A0 1D                           LXI     H,TEN   ;POINT CONSTANT: 10
 4070/144A : FA 57 14                           JM      FIN7    ;BRIF DIVIDE NEEDED
 4071/144D : 3D                                 DCR     A       ;DECR COUNT
 4072/144E : F5                                 PUSH    PSW     ;SAVE COUNT
 4073/144F : CD EF 16                           CALL    FMUL    ;GO MULTIPLY BY 10
 4074/1452 : F1                         FIN6:   POP     PSW     ;RESTORE COUNT
 4075/1453 : E1                                 POP     H       ;RESTORE H,L
 4076/1454 : C3 45 14                           JMP     FIN5    ;CONTINUE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 69 - 9/26/2024 16:17:21


 4077/1457 : 3C                         FIN7:   INR     A       ;INCR COUNT
 4078/1458 : F5                                 PUSH    PSW     ;SAVE COUNT
 4079/1459 : CD 72 17                           CALL    FDIV    ;GO DIVIDE BY 10
 4080/145C : C3 52 14                           JMP     FIN6    ;LOOP
 4081/145F :                            ;
 4082/145F :                            ; FIN8  CONVERT NUMBER STRING TO FACC
 4083/145F :                            ; ON ENTRY, C=INIT VALUE EXCESS DIGIT COUNT
 4084/145F :                            ;             DE=INPUT STRING
 4085/145F :                            ; ON EXIT, SIGN IS ON STACK
 4086/145F :                            ;       B=DIGIT COUNT
 4087/145F :                            ;       C=EXCESS DIGIT COUNT
 4088/145F :                            ;
 4089/145F : 21 58 82                   FIN8:   LXI     H,FACC  ;CLEAR FACC
 4090/1462 : 06 04                              MVI     B,4
 4091/1464 : CD 3F 1C                           CALL    ZEROM
 4092/1467 : 21 00 80                           LXI     H,8000H ;ASSUME MINUS
 4093/146A : 1A                                 LDAX    D       ;GET CHAR
 4094/146B : FE 2D                              CPI     '-'
 4095/146D : CA 77 14                           JZ      FIN8A
 4096/1470 : 65                                 MOV     H,L     ;NOPE, MUST BE PLUS
 4097/1471 :                                                    ;(B IS CLEARED BY ZEROM)
 4098/1471 : FE 2B                              CPI     '+'
 4099/1473 : CA 77 14                           JZ      FIN8A
 4100/1476 : 1B                                 DCX     D       ;NEITHER, BACK UP POINTER
 4101/1477 : E3                         FIN8A:  XTHL            ;GET RETURN, PUSH SIGN
 4102/1478 : E5                                 PUSH    H       ;RESTORE RETURN
 4103/1479 : 13                         FIN9:   INX     D       ;POINT NEXT
 4104/147A : 1A                                 LDAX    D       ;GET CHAR
 4105/147B : FE 30                              CPI     '0'     ;TEST IF LESS ZERO
 4106/147D : D8                                 RC              ;RETURN IF IS
 4107/147E : FE 3A                              CPI     '9'+1   ;TEST IF GT NINE
 4108/1480 : D0                                 RNC             ;RETURN IF IS
 4109/1481 : 05                                 DCR     B       ;DIGIT COUNT
 4110/1482 : D5                                 PUSH    D       ;SAVE PTR
 4111/1483 : C5                                 PUSH    B       ;SAVE COUNTERS
 4112/1484 : CD AC 14                           CALL    FMTEN   ;MULTIPLY FACC*TEN
 4113/1487 : B7                                 ORA     A       ;TEST FOR OVERFLOW
 4114/1488 : CA 95 14                           JZ      FINB    ;BRIF NO OVERFLOW
 4115/148B : 21 60 82                           LXI     H,FTEMP+4
 4116/148E : =>TRUE                     	IF ROMSTRT = 0
 4117/148E : EF                                 RST     5       ;LOAD IT
 4118/148F : =>FALSE                    	ELSE
 4119/148F :                            		CALL	RST5	;LOAD IT
 4120/148F : [4116]                     	ENDIF
 4121/148F : C1                                 POP     B       ;RESTORE COUNTERS
 4122/1490 : 0C                                 INR     C       ;EXCESS DIGIT
 4123/1491 : D1                                 POP     D
 4124/1492 : C3 79 14                           JMP     FIN9
 4125/1495 : C1                         FINB:   POP     B       ;RSTORE COUNTERS
 4126/1496 : D1                                 POP     D       ;& PTR
 4127/1497 : 1A                                 LDAX    D       ;GET THE DIGIT
 4128/1498 : E6 0F                              ANI     0FH     ;MASK OFF ZONE
 4129/149A : 21 5B 82                           LXI     H,FACC+3        ;POINT ACC
 4130/149D : 86                                 ADD     M       ;ADD
 4131/149E : 77                                 MOV     M,A     ;STORE
 4132/149F : 2B                                 DCX     H       ;POINT NEXT
 4133/14A0 : 7E                                 MOV     A,M     ;LOAD
 4134/14A1 : CE 00                              ACI     0       ;PLUS CARRY
 4135/14A3 : 77                                 MOV     M,A     ;STORE
 4136/14A4 : 2B                                 DCX     H       ;POINT NEXT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 70 - 9/26/2024 16:17:21


 4137/14A5 : 7E                                 MOV     A,M     ;LOAD
 4138/14A6 : CE 00                              ACI     0       ;PLUS CARRY
 4139/14A8 : 77                                 MOV     M,A     ;STORE
 4140/14A9 : C3 79 14                           JMP     FIN9    ;LOOP
 4141/14AC :                            ;
 4142/14AC :                            ; MULTIPLY FACC BY TEN
 4143/14AC :                            ;
 4144/14AC : 21 60 82                   FMTEN:  LXI     H,FTEMP+4
 4145/14AF : =>TRUE                     	IF ROMSTRT = 0
 4146/14AF : DF                                 RST     3       ;GO STORE THE VALUE
 4147/14B0 : =>FALSE                    	ELSE
 4148/14B0 :                            		CALL	RST3	;GO STORE THE VALUE
 4149/14B0 : [4145]                     	ENDIF
 4150/14B0 : CD BC 14                           CALL    FIND    ;*2
 4151/14B3 : CD BC 14                           CALL    FIND    ;*4
 4152/14B6 : 21 63 82                           LXI     H,FTEMP+7
 4153/14B9 : CD BF 14                           CALL    FIND0   ;*5
 4154/14BC : 21 5B 82                   FIND:   LXI     H,FACC+3        ;DOUBLE FACC
 4155/14BF : 11 5B 82                   FIND0:  LXI     D,FACC+3
 4156/14C2 : 06 04                              MVI     B,4     ;BYTE COUNT
 4157/14C4 : C3 C7 18                           JMP     FADDT   ;ADD & RETURN
 4158/14C7 :                            ;
 4159/14C7 : =14C7H                     FOUT    EQU     $
 4160/14C7 :                            ;
 4161/14C7 :                            ; FLOATING POINT OUTPUT FORMAT ROUTINE
 4162/14C7 :                            ;
 4163/14C7 :                            ; THIS SUBROUTINE CONVERTS A NUMBER IN FACC TO A
 4164/14C7 :                            ; FORMAT SUITABLE FOR PRINTING.  THAT IS, THE
 4165/14C7 :                            ; NUMBER WILL BE IN SCIENTIFIC NOTATION IF EXPONENT
 4166/14C7 :                            ; IS > 5 OR < -2, OTHERWISE IT WILL BE ZERO SUPRESSED
 4167/14C7 :                            ; ON BOTH SIDES.
 4168/14C7 :                            ;
 4169/14C7 : 11 5B 82                           LXI     D,FACC+3        ;POINT LSB
 4170/14CA : 1A                                 LDAX    D       ;LOAD IT
 4171/14CB : F6 07                              ORI     7       ;MASK FOR OUTPUT
 4172/14CD : 12                                 STAX    D       ;REPLACE
 4173/14CE : CD A5 18                           CALL    FTEST   ;GET SIGN OF NUMBER
 4174/14D1 : 36 20                              MVI     M,' '   ;DEFAULT SPACE
 4175/14D3 : F2 D8 14                           JP      FOUT0   ;BRIF NOT MINUS
 4176/14D6 : 36 2D                              MVI     M,'-'   ;MOVE DASH
 4177/14D8 : 23                         FOUT0:  INX     H       ;POINT NEXT
 4178/14D9 : C2 E2 14                           JNZ     FOUT2   ;BRIF NOT ZERO
 4179/14DC : 36 30                              MVI     M,'0'   ;MOVE THE ZERO
 4180/14DE : 23                                 INX     H       ;POINT NEXT
 4181/14DF : 36 20                              MVI     M,' '   ;MOVE SPACE FOLLOWING
 4182/14E1 : C9                                 RET             ;RETURN
 4183/14E2 : 3A 58 82                   FOUT2:  LDA     FACC    ;GET SIGN & EXP
 4184/14E5 : CD B3 18                           CALL    FEXP    ;EXPAND EXPONENT
 4185/14E8 : C2 ED 14                           JNZ     FOUTV   ;BRIF NOT ZERO
 4186/14EB : 3E 80                              MVI     A,80H   ;SET NEG
 4187/14ED : E6 80                      FOUTV:  ANI     80H     ;ISOLATE
 4188/14EF : 32 75 82                           STA     DEXP    ;SAVE SIGN
 4189/14F2 : E5                                 PUSH    H       ;SAVE H,L
 4190/14F3 : 3A 58 82                   FOUT3:  LDA     FACC    ;GET SIGN & EXP
 4191/14F6 : CD B3 18                           CALL    FEXP    ;EXPAND EXP
 4192/14F9 : FE 01                              CPI     1       ;TEST RANGE
 4193/14FB : F2 14 15                           JP      FOUT6   ;BRIF IN RANGE
 4194/14FE : 21 75 82                   FOUT4:  LXI     H,DEXP  ;POINT DEC.EXP
 4195/1501 : 34                                 INR     M       ;INCR IT
 4196/1502 : 21 A0 1D                           LXI     H,TEN   ;POINT CONST: 10
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 71 - 9/26/2024 16:17:21


 4197/1505 : F2 0E 15                           JP      FOUT5   ;BRIF POS.
 4198/1508 : CD EF 16                           CALL    FMUL    ;MULTIPLY
 4199/150B : C3 F3 14                           JMP     FOUT3   ;LOOP
 4200/150E : CD 72 17                   FOUT5:  CALL    FDIV    ;DIVIDE
 4201/1511 : C3 F3 14                           JMP     FOUT3   ;LOOP
 4202/1514 : FE 05                      FOUT6:  CPI     5       ;TEST HIGH RANGE
 4203/1516 : F2 FE 14                           JP      FOUT4   ;BRIF 5 OR GREATER
 4204/1519 : 21 5C 82                           LXI     H,FTEMP ;POINT SAVE AREA
 4205/151C : =>TRUE                     	IF ROMSTRT = 0
 4206/151C : DF                                 RST     3       ;GO STORE THE VALUE
 4207/151D : =>FALSE                    	ELSE
 4208/151D :                            		CALL	RST3	;GO STORE THE VALUE
 4209/151D : [4205]                     	ENDIF
 4210/151D : 3A 58 82                           LDA     FACC    ;GET EXPONENT
 4211/1520 : CD B3 18                           CALL    FEXP    ;EXPAND
 4212/1523 : 0E 06                              MVI     C,6     ;DIGIT COUNT
 4213/1525 : CD 59 15                           CALL    FOUTB   ;SHIFT LEFT
 4214/1528 : FE 0A                              CPI     10      ;TEST IF DECIMAL POINT
 4215/152A : FA 34 15                           JM      FOUTU   ;BRIF LT
 4216/152D : 21 5C 82                           LXI     H,FTEMP ;POINT SAVE AREA
 4217/1530 : =>TRUE                     	IF ROMSTRT = 0
 4218/1530 : EF                                 RST     5       ;LOAD IT
 4219/1531 : =>FALSE                    	ELSE
 4220/1531 :                            		CALL	RST5	;LOAD IT
 4221/1531 : [4217]                     	ENDIF
 4222/1531 : C3 FE 14                           JMP     FOUT4   ;ONCE MORE
 4223/1534 : CD 47 15                   FOUTU:  CALL    FOUT9   ;PUT DIGIT
 4224/1537 : AF                         FOUT7:  XRA     A       ;CLEAR STATUS
 4225/1538 : 32 58 82                           STA     FACC    ;AND OVERFLOW
 4226/153B : CD AC 14                           CALL    FMTEN   ;MULTIPLY BY TEN
 4227/153E : CD 47 15                           CALL    FOUT9   ;PUT DIGIT
 4228/1541 : C2 37 15                           JNZ     FOUT7   ;LOOP
 4229/1544 : C3 70 15                           JMP     FOUTH   ;GO AROUND
 4230/1547 : F6 30                      FOUT9:  ORI     30H     ;DEC. ZONE
 4231/1549 : E1                                 POP     H       ;GET RETURN ADDR
 4232/154A : E3                                 XTHL            ;EXCH WITH TOP (PTR)
 4233/154B : 77                                 MOV     M,A     ;PUT DIGIT
 4234/154C : 23                                 INX     H       ;POINT NEXT
 4235/154D : 79                                 MOV     A,C     ;GET COUNT
 4236/154E : FE 06                              CPI     6       ;TEST IF 1ST
 4237/1550 : C2 56 15                           JNZ     FOUTA   ;BRIF NOT
 4238/1553 : 36 2E                              MVI     M,'.'   ;MOVE DEC. PT.
 4239/1555 : 23                                 INX     H       ;POINT NEXT
 4240/1556 : E3                         FOUTA:  XTHL            ;EXCH WITH RTN
 4241/1557 : 0D                                 DCR     C       ;DECR COUNT
 4242/1558 : E9                                 PCHL            ;RETURN
 4243/1559 : 5F                         FOUTB:  MOV     E,A     ;SAVE BIT COUNT
 4244/155A : AF                                 XRA     A       ;CLEAR ACC FLAGS
 4245/155B : 32 58 82                           STA     FACC    ;AND OVERFLOW
 4246/155E : 21 5B 82                   FOUTC:  LXI     H,FACC+3        ;POINT LSB
 4247/1561 : 06 04                              MVI     B,4     ;BYTE COUNT
 4248/1563 : 7E                         FOUTD:  MOV     A,M     ;GET A BYTE
 4249/1564 : 17                                 RAL             ;SHIFT LEFT
 4250/1565 : 77                                 MOV     M,A     ;STORE
 4251/1566 : 2B                                 DCX     H       ;POINT NEXT
 4252/1567 : 05                                 DCR     B       ;DECR CTR
 4253/1568 : C2 63 15                           JNZ     FOUTD   ;LOOP
 4254/156B : 1D                                 DCR     E       ;DECR BIT CTR
 4255/156C : C2 5E 15                           JNZ     FOUTC   ;LOOP
 4256/156F : C9                                 RET             ;RETURN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 72 - 9/26/2024 16:17:21


 4257/1570 : E1                         FOUTH:  POP     H       ;GET PTR
 4258/1571 : 36 45                              MVI     M,'E'   ;EXPONENT
 4259/1573 : 23                                 INX     H       ;POINT NEXT
 4260/1574 : 3A 75 82                           LDA     DEXP    ;GET EXPONENT
 4261/1577 : 36 2B                              MVI     M,'+'   ;DEFAULT
 4262/1579 : 57                                 MOV     D,A     ;SAVE NUMBER
 4263/157A : B7                                 ORA     A       ;TEST IT
 4264/157B : F2 87 15                           JP      FOUTI   ;BRIF POS
 4265/157E : 36 2D                              MVI     M,'-'   ;ELSE, DASH
 4266/1580 : E6 7F                              ANI     7FH     ;STRIP DUMB SIGN
 4267/1582 : 2F                                 CMA             ;COMPLEMENT
 4268/1583 : 3C                                 INR     A       ;PLUS ONE (TWOS COMP)
 4269/1584 : 57                                 MOV     D,A     ;SAVE IT
 4270/1585 : 2F                                 CMA             ;RE-COMPLEMENT
 4271/1586 : 3C                                 INR     A       ;PLUS ONE
 4272/1587 : 23                         FOUTI:  INX     H       ;POINT NEXT
 4273/1588 : E5                                 PUSH    H       ;SAVE PTR
 4274/1589 : 1E FF                              MVI     E,-1    ;INIT CTR (TENS)
 4275/158B : 1C                         FOUTJ:  INR     E       ;ADD ONE
 4276/158C : D6 0A                              SUI     10      ;LESS 10
 4277/158E : F2 8B 15                           JP      FOUTJ   ;LOOP
 4278/1591 : C6 0A                              ADI     10      ;CORRECT UNITS
 4279/1593 : 47                                 MOV     B,A     ;SAVE UNITS
 4280/1594 : 7B                                 MOV     A,E     ;GET TENS
 4281/1595 : CD 47 15                           CALL    FOUT9   ;OUTPUT
 4282/1598 : 78                                 MOV     A,B     ;GET UNITS
 4283/1599 : CD 47 15                           CALL    FOUT9   ;OUTPUT
 4284/159C : E1                                 POP     H       ;GET PTR
 4285/159D : 36 20                              MVI     M,' '   ;SPACE AFTER
 4286/159F : 7A                                 MOV     A,D     ;GET DEC EXPON
 4287/15A0 : B7                                 ORA     A       ;SET FLAGS
 4288/15A1 : F2 AA 15                           JP      FOUTK   ;BRIF POS.
 4289/15A4 : FE FE                              CPI     -2      ;TEST FOR MIN
 4290/15A6 : D8                                 RC              ;RETURN IF LESS THAN -2
 4291/15A7 : C3 AD 15                           JMP     FOUTL   ;GO AROUND
 4292/15AA : FE 06                      FOUTK:  CPI     6       ;TEST IF TOO BIG
 4293/15AC : D0                                 RNC             ;RETURN IF 6 OR GREATER
 4294/15AD : 4F                         FOUTL:  MOV     C,A     ;SAVE EXPONENT
 4295/15AE : 06 05                              MVI     B,5     ;CTR
 4296/15B0 : 36 20                      FOUTM:  MVI     M,' '   ;SPACE OUT EXPONENT
 4297/15B2 : 2B                                 DCX     H       ;POINT PRIOR
 4298/15B3 : 05                                 DCR     B       ;DECR CTR
 4299/15B4 : C2 B0 15                           JNZ     FOUTM   ;LOOP
 4300/15B7 : EB                                 XCHG            ;FLIP/FLOP
 4301/15B8 : 7B                                 MOV     A,E     ;GET LOW BYTE
 4302/15B9 : D6 05                              SUI     5       ;POINT TO DOT
 4303/15BB : 6F                                 MOV     L,A     ;PUT DOWN
 4304/15BC : 7A                                 MOV     A,D     ;GET HIGH
 4305/15BD : DE 00                              SBI     0       ;IN CASE OF BORROW
 4306/15BF : 67                                 MOV     H,A     ;PUT DOWN
 4307/15C0 : 79                                 MOV     A,C     ;GET EXPONENT
 4308/15C1 : B7                                 ORA     A       ;TEST SIGN
 4309/15C2 : CA D3 15                           JZ      FOUTO   ;BRIF ZERO
 4310/15C5 : FA E8 15                           JM      FOUTR   ;BRIF NEGATIVE
 4311/15C8 : 46                         FOUTN:  MOV     B,M     ;GET HIGH BYTE
 4312/15C9 : 23                                 INX     H       ;POINT NEXT
 4313/15CA : 7E                                 MOV     A,M     ;GET LOW BYTE
 4314/15CB : 70                                 MOV     M,B     ;SHIFT DOT TO RIGHT
 4315/15CC : 2B                                 DCX     H       ;POINT BACK
 4316/15CD : 77                                 MOV     M,A     ;MOVE THE DIGIT LEFT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 73 - 9/26/2024 16:17:21


 4317/15CE : 23                                 INX     H       ;POINT NEXT
 4318/15CF : 0D                                 DCR     C       ;DECR CTR
 4319/15D0 : C2 C8 15                           JNZ     FOUTN   ;LOOP
 4320/15D3 : EB                         FOUTO:  XCHG            ;POINT END
 4321/15D4 : 7E                         FOUTP:  MOV     A,M     ;GET A DIGIT/DOT
 4322/15D5 : FE 30                              CPI     '0'     ;TEST FOR TRAILING ZERO
 4323/15D7 : C2 E0 15                           JNZ     FOUTQ   ;BRIF NOT
 4324/15DA : 36 20                              MVI     M,' '   ;SPACE FILL
 4325/15DC : 2B                                 DCX     H       ;POINT PRIOR
 4326/15DD : C3 D4 15                           JMP     FOUTP   ;LOOP
 4327/15E0 : FE 2E                      FOUTQ:  CPI     '.'     ;TEST FOR TRAILING DOT
 4328/15E2 : 23                                 INX     H       ;JUST IN CASE NOT
 4329/15E3 : C0                                 RNZ             ;RETURN IF NOT
 4330/15E4 : 2B                                 DCX     H       ;RESET PTR
 4331/15E5 : 36 20                              MVI     M,' '   ;SPACE IT OUT
 4332/15E7 : C9                                 RET             ;RETURN
 4333/15E8 : FE FF                      FOUTR:  CPI     0FFH    ;TEST IF -1
 4334/15EA : C2 F6 15                           JNZ     FOUTS   ;ELSE -2
 4335/15ED : 2B                                 DCX     H       ;POINT SIGNIFICANT
 4336/15EE : 7E                                 MOV     A,M     ;GET THE CHAR
 4337/15EF : 36 2E                              MVI     M,'.'   ;MOVE THE DOT
 4338/15F1 : 23                                 INX     H       ;POINT NEXT
 4339/15F2 : 77                                 MOV     M,A     ;SHIFT THE DIGIT
 4340/15F3 : C3 D3 15                           JMP     FOUTO   ;GO ZERO SUPPRESS
 4341/15F6 : 2B                         FOUTS:  DCX     H       ;POINT ONE TO LEFT
 4342/15F7 : 7E                                 MOV     A,M     ;PICK UP DIGIT
 4343/15F8 : 36 30                              MVI     M,'0'   ;REPLACE
 4344/15FA : 23                                 INX     H       ;POINT RIGHT
 4345/15FB : 77                                 MOV     M,A     ;PUT THE DIGIT
 4346/15FC : 62                                 MOV     H,D     ;GET LOW ADDR
 4347/15FD : 6B                                 MOV     L,E     ;POINT LAST DIGIT
 4348/15FE : 06 06                              MVI     B,6     ;CTR
 4349/1600 : 2B                         FOUTT:  DCX     H       ;POINT PRITO
 4350/1601 : 7E                                 MOV     A,M     ;GET A DIGIT
 4351/1602 : 23                                 INX     H       ;POINT
 4352/1603 : 77                                 MOV     M,A     ;PUT IT ONE TO RIGHT
 4353/1604 : 2B                                 DCX     H       ;POINT
 4354/1605 : 05                                 DCR     B       ;DECR CTR
 4355/1606 : C2 00 16                           JNZ     FOUTT   ;LOOP
 4356/1609 : 36 2E                              MVI     M,'.'   ;MOVE THE DOT
 4357/160B : C3 D3 15                           JMP     FOUTO   ;CONTINUE
 4358/160E :                            ;
 4359/160E : =160EH                     FADD    EQU     $
 4360/160E :                            ;
 4361/160E :                            ;
 4362/160E :                            ; FLOATING POINT ADD THE NUMBER AT (H,L) TO THE FACC
 4363/160E :                            ;
 4364/160E :                            ;
 4365/160E : 23                                 INX     H       ;POINT FIRST DIGIT
 4366/160F : 7E                                 MOV     A,M     ;LOAD IT
 4367/1610 : B7                                 ORA     A       ;TEST IT
 4368/1611 : CA A5 18                           JZ      FTEST   ;BRIF ZERO
 4369/1614 : 2B                                 DCX     H       ;POINT BACK
 4370/1615 : CD A5 18                           CALL    FTEST   ;GO TEST SIGN OF FACC
 4371/1618 : CA 28 00                           JZ      RST5    ;JUST LOAD IF FACC = 0
 4372/161B : CD B3 18                           CALL    FEXP    ;GO GET EXPONENT
 4373/161E : 47                                 MOV     B,A     ;SAVE EXPONENT
 4374/161F : 7E                                 MOV     A,M     ;GET EXPONENT OF ADDR
 4375/1620 : CD B3 18                           CALL    FEXP    ;GO GET EXPONENT
 4376/1623 : 4F                                 MOV     C,A     ;SAVE THE EXPONENT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 74 - 9/26/2024 16:17:21


 4377/1624 : 90                                 SUB     B       ;GET DIFFERENCE OF TWO EXPONENTS
 4378/1625 : CA 3A 16                           JZ      FADD4   ;BRIF THEY'RE EQ
 4379/1628 : F2 2D 16                           JP      FADD3   ;BRIF DIFFERENCE IS POSITIVE
 4380/162B : 2F                                 CMA             ;COMPLEMENT ACC
 4381/162C : 3C                                 INR     A       ;PLUS ONE (TWO'S COMPLEMENT)
 4382/162D : FE 18                      FADD3:  CPI     24      ;COMPARE DIFFERENCE TO MAX
 4383/162F : DA 3A 16                           JC      FADD4   ;BRIF LESS
 4384/1632 : 78                                 MOV     A,B     ;GET EXPON OF ADDUEND
 4385/1633 : 91                                 SUB     C       ;GET TRUE DIFFERENCE AGAIN
 4386/1634 : F2 A5 18                           JP      FTEST   ;BRIF FACC > ADDER
 4387/1637 : C3 28 00                           JMP     RST5    ;ELSE, ADDER > FACC
 4388/163A : F5                         FADD4:  PUSH    PSW     ;SAVE DIFFERENCE
 4389/163B : C5                                 PUSH    B       ;SAVE EXPONENTS
 4390/163C : 11 5C 82                           LXI     D,FTEMP ;GET ADDR OF TEMP ACC
 4391/163F : CD 37 1C                           CALL    CPY4H
 4392/1642 : C1                                 POP     B       ;GET EXPONENTS
 4393/1643 : F1                                 POP     PSW     ;GET DIFFERENCE
 4394/1644 : CA 6B 16                           JZ      FADD9   ;JUST ADD IF ZERO
 4395/1647 : 21 5D 82                           LXI     H,FTEMP+1       ;DEFAULT
 4396/164A : F5                                 PUSH    PSW     ;SAVE DIFFERENCE
 4397/164B : 78                                 MOV     A,B     ;GET FACC EXPON
 4398/164C : 91                                 SUB     C       ;MINUS FTEMP EXPON
 4399/164D : F2 5D 16                           JP      FADD6   ;BRIF TEMP MUST BE SHIFTED
 4400/1650 : 21 58 82                           LXI     H,FACC  ;POINT FLOAT ACC
 4401/1653 : 79                                 MOV     A,C     ;GET EXPONENT, SIGN
 4402/1654 : E6 7F                              ANI     7FH     ;STRIP EXP SIGN
 4403/1656 : 4F                                 MOV     C,A     ;PUT BACK
 4404/1657 : 7E                                 MOV     A,M     ;GET THE EXP
 4405/1658 : E6 80                              ANI     80H     ;STRIP OFF OLD EXPON
 4406/165A : B1                                 ORA     C       ;MOVE ADDR EXPON TO IT
 4407/165B : 77                                 MOV     M,A     ;REPLACE
 4408/165C : 23                                 INX     H       ;POINT FIRST DATA BYTE
 4409/165D : F1                         FADD6:  POP     PSW     ;GET DIFFER
 4410/165E : 4F                                 MOV     C,A     ;SAVE IT
 4411/165F : 06 03                      FADD7:  MVI     B,3     ;LOOP CTR (INNER)
 4412/1661 : AF                                 XRA     A       ;INIT CARRY TO Z
 4413/1662 : E5                                 PUSH    H       ;SAVE ADDR
 4414/1663 : CD D2 18                           CALL    FSHFT   ;GO SHIFT
 4415/1666 : E1                                 POP     H       ;GET ADDR
 4416/1667 : 0D                                 DCR     C       ;DECR CTR
 4417/1668 : C2 5F 16                           JNZ     FADD7   ;LOOP
 4418/166B : =166BH                     FADD9   EQU     $
 4419/166B : 21 5C 82                           LXI     H,FTEMP
 4420/166E : 3A 58 82                           LDA     FACC    ;GET EXPONENT
 4421/1671 : AE                                 XRA     M       ;SEE IF SIGNS THE SAME
 4422/1672 : 11 5B 82                           LXI     D,FACC+3        ;POINT LEAST SIGN BYTE
 4423/1675 : 21 5F 82                           LXI     H,FTEMP+3
 4424/1678 : FA 93 16                           JM      FADDA   ;BRIF SIGNS DIFFERENT
 4425/167B : CD C5 18                           CALL    FADT3   ;ADD 3 BYTES
 4426/167E : D2 A5 18                           JNC     FTEST   ;BRIF NO OVERFLOW
 4427/1681 : EB                                 XCHG            ;POINT HL TO FACC
 4428/1682 : CD 60 17                           CALL    SVSGN   ;SAVE SIGN, RETURN EXPONENT
 4429/1685 : 3C                                 INR     A       ;INCREMENT EXPONENT
 4430/1686 : CD 68 17                           CALL    RSSGN   ;RESTORE SIGN TO EXPONENT
 4431/1689 : 23                                 INX     H       ;POINT DATA
 4432/168A : 37                                 STC             ;SET CY
 4433/168B : 06 03                              MVI     B,3     ;CTR
 4434/168D : CD D2 18                           CALL    FSHFT   ;GO SHIFT IT
 4435/1690 : C3 A5 18                           JMP     FTEST   ;RETURN
 4436/1693 : =1693H                     FADDA   EQU     $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 75 - 9/26/2024 16:17:21


 4437/1693 : 06 03                              MVI     B,3
 4438/1695 : CD BA 18                           CALL    FSUBT   ;SUBTRACT
 4439/1698 : D2 B4 16                           JNC     FNORM   ;BRIF NO BORROW
 4440/169B : 21 5B 82                           LXI     H,FACC+3        ;MUST NEGATE
 4441/169E : 06 03                              MVI     B,3
 4442/16A0 : 37                                 STC
 4443/16A1 : 7E                         FNEG1:  MOV     A,M     ;GET BYTE
 4444/16A2 : 2F                                 CMA
 4445/16A3 : D2 A8 16                           JNC     FNEG2
 4446/16A6 : C6 01                              ADI     1       ;INCREMENT + COMPLEMENT=NEGATE
 4447/16A8 : 77                         FNEG2:  MOV     M,A
 4448/16A9 : 2B                                 DCX     H
 4449/16AA : 05                                 DCR     B
 4450/16AB : C2 A1 16                           JNZ     FNEG1
 4451/16AE : CD B4 16                           CALL    FNORM
 4452/16B1 : C3 51 0C                           JMP     NEG     ;REVERSE SIGN
 4453/16B4 :                            ;
 4454/16B4 : =16B4H                     FNORM   EQU     $
 4455/16B4 :                            ;
 4456/16B4 :                            ;
 4457/16B4 :                            ; NORMALIZE THE FLOATING ACCUMULATOR
 4458/16B4 :                            ; THAT IS, THE FIRST BIT MUST BE SIGNIFICANT
 4459/16B4 :                            ;
 4460/16B4 :                            ;
 4461/16B4 : 21 5B 82                           LXI     H,FACC+3        ;POINT LSB
 4462/16B7 : 7E                                 MOV     A,M     ;LOAD IT
 4463/16B8 : 2B                                 DCX     H       ;POINT PRIOR
 4464/16B9 : B6                                 ORA     M       ;MERGE
 4465/16BA : 2B                                 DCX     H       ;POINT PRIOR
 4466/16BB : B6                                 ORA     M       ;MERGE
 4467/16BC : 2B                                 DCX     H
 4468/16BD : 46                                 MOV     B,M     ;SAVE EXPONENT
 4469/16BE : 77                                 MOV     M,A     ;CLEAR
 4470/16BF : C8                                 RZ              ;RETURN ON NOTHING TO NORMALIZE
 4471/16C0 : 70                                 MOV     M,B     ;RESTORE EXP
 4472/16C1 : C5                                 PUSH    B       ;SAVE C FOR CALLER
 4473/16C2 : CD 60 17                           CALL    SVSGN   ;SAVE SIGN
 4474/16C5 : 77                                 MOV     M,A     ;STORE EXPANDED EXPONENT
 4475/16C6 : 23                         FNRM1:  INX     H       ;POINT TO MOST SIGN BYTE
 4476/16C7 : 7E                                 MOV     A,M     ;GET MSB
 4477/16C8 : B7                                 ORA     A       ;TEST IT
 4478/16C9 : FA DC 16                           JM      FNRM3   ;BRIF NORMALIZED
 4479/16CC : 23                                 INX     H       ;POINT LSB
 4480/16CD : 23                                 INX     H
 4481/16CE : 06 03                              MVI     B,3     ;SHIFT COUNT
 4482/16D0 : 7E                         FNRM2:  MOV     A,M     ;SHIFT LEFT
 4483/16D1 : 17                                 RAL
 4484/16D2 : 77                                 MOV     M,A
 4485/16D3 : 2B                                 DCX     H
 4486/16D4 : 05                                 DCR     B
 4487/16D5 : C2 D0 16                           JNZ     FNRM2
 4488/16D8 : 35                                 DCR     M       ;ADJUST EXPONENT
 4489/16D9 : C3 C6 16                           JMP     FNRM1   ;LOOP
 4490/16DC : 2B                         FNRM3:  DCX     H       ;POINT BACK TO EXPONENT
 4491/16DD : 7E                                 MOV     A,M
 4492/16DE : CD 68 17                           CALL    RSSGN   ;RESTORE SIGN
 4493/16E1 : C1                                 POP     B       ;RESTORE C
 4494/16E2 : C9                                 RET
 4495/16E3 :                            ;
 4496/16E3 : =16E3H                     FSUB    EQU     $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 76 - 9/26/2024 16:17:21


 4497/16E3 :                            ;
 4498/16E3 :                            ;
 4499/16E3 :                            ; FLOATING POINT SUBTRACT THE NUMBER AT (H,L) FROM THE FACC
 4500/16E3 :                            ;
 4501/16E3 :                            ;
 4502/16E3 : CD 51 0C                           CALL    NEG     ;NEGATE FACC
 4503/16E6 : CD 0E 16                           CALL    FADD    ;ADD
 4504/16E9 : CD 51 0C                           CALL    NEG     ;NEGATE RESULT
 4505/16EC : C3 A5 18                           JMP     FTEST
 4506/16EF :                            ;
 4507/16EF : =16EFH                     FMUL    EQU     $
 4508/16EF :                            ;
 4509/16EF :                            ;
 4510/16EF :                            ; FLOATING POINT MULTIPLY THE NUMBER AT (H,L) TO THE FACC
 4511/16EF :                            ;
 4512/16EF :                            ;
 4513/16EF : CD A5 18                           CALL    FTEST   ;TEST FACC
 4514/16F2 : C8                                 RZ              ;RETURN IF ZERO
 4515/16F3 : 23                                 INX     H       ;POINT 1ST DIGIT OF MULTIPLIER
 4516/16F4 : 7E                                 MOV     A,M     ;LOAD IT
 4517/16F5 : 2B                                 DCX     H       ;RESTORE
 4518/16F6 : B7                                 ORA     A       ;TEST IF ZERO
 4519/16F7 : CA 28 00                           JZ      RST5    ;GO LOAD TO FACC IF IT IS
 4520/16FA : E5                                 PUSH    H       ;SAVE MULTIPLIER ADDRESS
 4521/16FB : CD 56 17                           CALL    MDSGN   ;GET SIGN PRODUCT, & BOTH EXPONENTS
 4522/16FE : 80                                 ADD     B       ;ADD EXPONENTS
 4523/16FF : CD 68 17                           CALL    RSSGN   ;RESTORE SIGN
 4524/1702 : E1                                 POP     H       ;RESTORE
 4525/1703 : 11 65 82                           LXI     D,FTEMP+9       ;POINT TEMP STORAGE
 4526/1706 : 06 03                              MVI     B,3     ;BYTE COUNT
 4527/1708 : 23                                 INX     H       ;POINT MSD
 4528/1709 : CD 39 1C                           CALL    COPYH   ;MOVE MULTIPLIER
 4529/170C : 21 5C 82                           LXI     H,FTEMP ;POINT DIGIT 7 OF RESULT
 4530/170F : 06 06                              MVI     B,6     ;LOOP CTR
 4531/1711 : CD 3F 1C                           CALL    ZEROM   ;GO ZERO EIGHT BYTES
 4532/1714 : 11 59 82                           LXI     D,FACC+1        ;POINT 1ST DIGIT OF ACC
 4533/1717 : 06 03                              MVI     B,3     ;LOOP CTR
 4534/1719 : 1A                         FMUL5:  LDAX    D       ;GET AN ACC DIGIT PAIR
 4535/171A : 77                                 MOV     M,A     ;PUT TO TEMP STORAGE
 4536/171B : AF                                 XRA     A       ;ZERO A
 4537/171C : 12                                 STAX    D       ;CLEAR ACC
 4538/171D : 13                                 INX     D       ;POINT NEXT
 4539/171E : 23                                 INX     H       ;DITTO
 4540/171F : 05                                 DCR     B       ;DECR CTR
 4541/1720 : C2 19 17                           JNZ     FMUL5   ;LOOP
 4542/1723 : 0E 18                              MVI     C,24    ;OUTTER LOOP CTR
 4543/1725 : 06 03                      FMUL6:  MVI     B,3     ;CTR
 4544/1727 : 21 65 82                           LXI     H,FTEMP+9       ;POINT MULTIPLIER
 4545/172A : AF                                 XRA     A       ;CLEAR CY
 4546/172B : 7E                         FMUL7:  MOV     A,M     ;GET BYTE
 4547/172C : 1F                                 RAR             ;SHIFT RIGHT
 4548/172D : 77                                 MOV     M,A     ;PUT DOWN
 4549/172E : 23                                 INX     H       ;POINT NEXT
 4550/172F : 05                                 DCR     B       ;DECR CTR
 4551/1730 : C2 2B 17                           JNZ     FMUL7   ;LOOP
 4552/1733 : D2 41 17                           JNC     FMUL8   ;BRIF ZERO BIT
 4553/1736 : 11 5E 82                           LXI     D,FTEMP+2       ;POINT RESULT
 4554/1739 : 21 64 82                           LXI     H,FTEMP+8       ;POINT MULTIPLICAND
 4555/173C : 06 06                              MVI     B,6     ;SIX BYTE ADD
 4556/173E : CD C7 18                           CALL    FADDT   ;GO ADD
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 77 - 9/26/2024 16:17:21


 4557/1741 : 06 06                      FMUL8:  MVI     B,6     ;SIZ BYTE SHIFT
 4558/1743 : 21 64 82                           LXI     H,FTEMP+8       ;POINT MULTIPLICAND
 4559/1746 : AF                                 XRA     A       ;CLEAR CY
 4560/1747 : 7E                         FMUL9:  MOV     A,M     ;GET BYTE
 4561/1748 : 17                                 RAL             ;SHIFT LEFT
 4562/1749 : 77                                 MOV     M,A     ;PUT BACT
 4563/174A : 2B                                 DCX     H       ;POINT NEXT BYTE
 4564/174B : 05                                 DCR     B       ;DECR CTR
 4565/174C : C2 47 17                           JNZ     FMUL9   ;LOOP
 4566/174F : 0D                                 DCR     C       ;DEC BIT COUNT
 4567/1750 : C2 25 17                           JNZ     FMUL6   ;CONTINUE
 4568/1753 : C3 B4 16                           JMP     FNORM   ;GO NORMALIZE
 4569/1756 :                            ;
 4570/1756 :                            ; MDSGN   GET SIGN PRODUCT AND EXPONENTS FOR MULT & DIV
 4571/1756 :                            ; ON ENTRY:
 4572/1756 :                            ;       (HL) = ONE NUMBER
 4573/1756 :                            ;       (FACC)=THE OTHER
 4574/1756 :                            ; ON RETURN:
 4575/1756 :                            ;       A = EXPONENT OF FACC(EXPANDED)
 4576/1756 :                            ;       B = OTHER EXPONENT
 4577/1756 :                            ;       C = SIGN PRODUCT
 4578/1756 :                            ;       HL DESTROYED
 4579/1756 :                            ;
 4580/1756 : CD 60 17                   MDSGN:  CALL    SVSGN   ;GET SIGN IN C, EXP IN A
 4581/1759 : 47                                 MOV     B,A     ;SAVE EXPONENT
 4582/175A : 21 58 82                           LXI     H,FACC
 4583/175D : 79                                 MOV     A,C     ;GET SIGN
 4584/175E : 86                                 ADD     M       ;MULTIPLY SIGNS
 4585/175F : 77                                 MOV     M,A     ;PUT DOWN
 4586/1760 :                            ;
 4587/1760 :                            ; SVSGN         GET SIGN AND EXP
 4588/1760 :                            ; ON ENTRY:
 4589/1760 :                            ;       (HL) = EXPONENT
 4590/1760 :                            ; ON RETURN:
 4591/1760 :                            ;       A = EXPANDED EXPONENT
 4592/1760 :                            ;       C = SIGN IN HI ORDER BIT
 4593/1760 :                            ;
 4594/1760 : 7E                         SVSGN:  MOV     A,M     ;GET EXPONENT
 4595/1761 : E6 80                              ANI     80H     ;ISOLATE SIGN
 4596/1763 : 4F                                 MOV     C,A
 4597/1764 : 7E                                 MOV     A,M
 4598/1765 : C3 B3 18                           JMP     FEXP    ;EXPAND EXP AND RETURN
 4599/1768 :                            ;
 4600/1768 :                            ; RSSGN         RESTORE SIGN TO EXPONENT
 4601/1768 :                            ; ON ENTRY:
 4602/1768 :                            ;       (HL)=EXPONENT
 4603/1768 :                            ;       A = EXPANDED EXPONENT
 4604/1768 :                            ;       C = SIGN
 4605/1768 :                            ; ON RETURN:
 4606/1768 :                            ;       A = EXPONENT
 4607/1768 :                            ;       (HL) = EXPONENT WITH SIGN
 4608/1768 :                            ;       Z,M BITS SET FOR EXPONENT
 4609/1768 :                            ;
 4610/1768 : CD 48 18                   RSSGN:  CALL    FOVUN   ;CHECK FOR OVER/UNDERFLOW
 4611/176B : E6 7F                              ANI     7FH     ;REMOVE EXPONENT SIGN
 4612/176D : B1                                 ORA     C       ;ADD SIGN
 4613/176E : 77                                 MOV     M,A     ;SET DOWN
 4614/176F : C3 A5 18                           JMP     FTEST   ;SET Z,M BITS
 4615/1772 :                            ;
 4616/1772 : =1772H                     FDIV    EQU     $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 78 - 9/26/2024 16:17:21


 4617/1772 :                            ;
 4618/1772 :                            ;
 4619/1772 :                            ; FLOATING POINT DIVIDE THE NUMBER AT (H,L) INTO THE FACC
 4620/1772 :                            ;
 4621/1772 :                            ;
 4622/1772 : CD A5 18                           CALL    FTEST   ;TEST IF FACC ZERO
 4623/1775 : C8                                 RZ              ;RETURN IF IT IS
 4624/1776 : 23                                 INX     H       ;POINT 1ST DIGIT OF DIVISOR
 4625/1777 : 7E                                 MOV     A,M     ;LOAD IT
 4626/1778 : 2B                                 DCX     H       ;POINT BACK
 4627/1779 : B7                                 ORA     A       ;TEST IF ZERO
 4628/177A : CA E8 1B                           JZ      ZMERR   ;DIVISION BY ZERO = ERROR
 4629/177D : E5                                 PUSH    H       ;SAVE DIVISOR PTR
 4630/177E : CD 56 17                           CALL    MDSGN   ;GET SIGN ON STACK, EXPS INTO A,B
 4631/1781 : 90                                 SUB     B       ;SUBTRACT EXPONENTS
 4632/1782 : 3C                                 INR     A       ;PLUS ONE
 4633/1783 : CD 68 17                           CALL    RSSGN   ;SET SIGN/EXPONENT IN FACC
 4634/1786 : 11 59 82                           LXI     D,FACC+1
 4635/1789 : 21 5C 82                           LXI     H,FTEMP ;POINT TEMPORARY STORAGE
 4636/178C : 36 00                              MVI     M,0     ;CLEAR MSB
 4637/178E : 23                                 INX     H       ;POINT NEXT
 4638/178F : 06 03                              MVI     B,3     ;LOOP CTR
 4639/1791 : 1A                         FDIV3:  LDAX    D       ;GET BYTE FROM FACC
 4640/1792 : 77                                 MOV     M,A     ;PUT TO FTEMP
 4641/1793 : AF                                 XRA     A       ;CLEAR A
 4642/1794 : 12                                 STAX    D       ;ZERO FACC
 4643/1795 : 23                                 INX     H       ;POINT NEXT
 4644/1796 : 13                                 INX     D       ;DITTO
 4645/1797 : 05                                 DCR     B       ;DECR CTR
 4646/1798 : C2 91 17                           JNZ     FDIV3   ;LOOP
 4647/179B : D1                                 POP     D       ;GET ADDR
 4648/179C : 06 03                              MVI     B,3     ;LOOP CTR
 4649/179E : 13                                 INX     D       ;POINT MSD OF DIVISOR
 4650/179F : 36 00                              MVI     M,0     ;CLEAR MSB
 4651/17A1 : 23                                 INX     H       ;POINT NEXT
 4652/17A2 : CD 2E 1C                           CALL    COPYD   ;GO MOVE IT
 4653/17A5 : 0E 18                              MVI     C,24    ;OUTER LOOP CTR
 4654/17A7 : 11 5F 82                   FDIV5:  LXI     D,FTEMP+3       ;POINT DIVIDEND
 4655/17AA : 21 63 82                           LXI     H,FTEMP+7       ;AND DIVISOR
 4656/17AD : 06 04                              MVI     B,4     ;CTR
 4657/17AF : CD BA 18                           CALL    FSUBT   ;GO SUBTRACT
 4658/17B2 : D2 C1 17                           JNC     FDIV6   ;BRIF NO GO
 4659/17B5 : 11 5F 82                           LXI     D,FTEMP+3       ;POINT DIVIDEND
 4660/17B8 : 21 63 82                           LXI     H,FTEMP+7       ;AND DIVISOR
 4661/17BB : 06 04                              MVI     B,4     ;CTR
 4662/17BD : CD C7 18                           CALL    FADDT   ;GO RE-ADD
 4663/17C0 : 37                                 STC             ;TURN ON CY
 4664/17C1 : 3F                         FDIV6:  CMC             ;REVERSE CY
 4665/17C2 : 06 03                              MVI     B,3     ;CTR
 4666/17C4 : 21 5B 82                           LXI     H,FACC+3        ;POINT LSB
 4667/17C7 : 7E                         FDIV7:  MOV     A,M     ;LOAD BYTE
 4668/17C8 : 17                                 RAL             ;SHIFT LEFT
 4669/17C9 : 77                                 MOV     M,A     ;REPLACE
 4670/17CA : 2B                                 DCX     H       ;POINT NEXT
 4671/17CB : 05                                 DCR     B       ;DECR CTR
 4672/17CC : C2 C7 17                           JNZ     FDIV7   ;LOOP
 4673/17CF : AF                                 XRA     A       ;CLEAR FLAGS
 4674/17D0 : 06 04                              MVI     B,4     ;CTR
 4675/17D2 : 21 5F 82                           LXI     H,FTEMP+3       ;POINT-DIVIDEND
 4676/17D5 : 7E                         FDIV8:  MOV     A,M     ;LOAD BYTE
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 79 - 9/26/2024 16:17:21


 4677/17D6 : 17                                 RAL             ;SHIFT LEFT
 4678/17D7 : 77                                 MOV     M,A     ;REPLACE
 4679/17D8 : 2B                                 DCX     H       ;POINT ENXT
 4680/17D9 : 05                                 DCR     B       ;DECR CTR
 4681/17DA : C2 D5 17                           JNZ     FDIV8   ;LOOP
 4682/17DD : 0D                                 DCR     C       ;DECR OTR CTR
 4683/17DE : C2 A7 17                           JNZ     FDIV5   ;LOOP
 4684/17E1 : C3 B4 16                           JMP     FNORM   ;WRAPUP
 4685/17E4 :                            ;
 4686/17E4 :                            ; UTILITY ROUTINE TO GET A VARIABLE'S ADDRESS TO H,L
 4687/17E4 :                            ;
 4688/17E4 : 11 20 81                   GETST:  LXI     D,STRIN ;POINT BUFFER
 4689/17E7 : 06 00                              MVI     B,0     ;INIT CTR
 4690/17E9 : 7E                                 MOV     A,M     ;GET THE CHAR
 4691/17EA : FE 22                              CPI     '"'     ;TEST IF LIT TYPE
 4692/17EC : CA 05 18                           JZ      GETS2   ;BRIF IS
 4693/17EF : FE 27                              CPI     27H     ;TEST IF QUOTED LITERAL
 4694/17F1 : CA 05 18                           JZ      GETS2   ;BRIF IS
 4695/17F4 : FE 2C                      GETS1:  CPI     ','     ;TEST IF COMMA
 4696/17F6 : CA 18 18                           JZ      GETS5   ;BRIF IS
 4697/17F9 : B7                                 ORA     A       ;TEST IF END
 4698/17FA : CA 18 18                           JZ      GETS5   ;BRIF IS
 4699/17FD : 04                                 INR     B       ;COUNT IT
 4700/17FE : 13                                 INX     D       ;POINT NEXT
 4701/17FF : 12                                 STAX    D       ;PUT CHAR
 4702/1800 : 23                                 INX     H       ;POINT NEXT
 4703/1801 : =>TRUE                     	IF ROMSTRT = 0
 4704/1801 : CF                                 RST     1       ;SKIP TO NON BLANK
 4705/1802 : =>FALSE                    	ELSE
 4706/1802 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 4707/1802 : [4703]                     	ENDIF
 4708/1802 : C3 F4 17                           JMP     GETS1   ;LOOP
 4709/1805 : 4F                         GETS2:  MOV     C,A     ;SAVE DELIM
 4710/1806 : 23                         GETS3:  INX     H       ;SKIP THE QUOTE
 4711/1807 : 7E                                 MOV     A,M     ;GET NEXT CHAR
 4712/1808 : B9                                 CMP     C       ;TEST IF END OF LITERAL
 4713/1809 : CA 16 18                           JZ      GETS4   ;BRIF IS
 4714/180C : B7                                 ORA     A       ;TEST IF END OF LINE
 4715/180D : CA 00 1C                           JZ      CVERR   ;BRIF IS
 4716/1810 : 04                                 INR     B       ;COUNT IT
 4717/1811 : 13                                 INX     D       ;POINT NEXT
 4718/1812 : 12                                 STAX    D       ;PUT CHAR
 4719/1813 : C3 06 18                           JMP     GETS3   ;LOOP
 4720/1816 : 23                         GETS4:  INX     H       ;SKIP END QUOTE
 4721/1817 : =>TRUE                     	IF ROMSTRT = 0
 4722/1817 : CF                                 RST     1       ;SKIP TO TRAILING SPACES
 4723/1818 : =>FALSE                    	ELSE
 4724/1818 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 4725/1818 : [4721]                     	ENDIF
 4726/1818 : 11 20 81                   GETS5:  LXI     D,STRIN ;POINT BEGIN BUFFER
 4727/181B : 78                                 MOV     A,B     ;GET COUNT
 4728/181C : 12                                 STAX    D       ;PUT COUNT
 4729/181D : D1                                 POP     D       ;GET RETURN ADDR
 4730/181E : EB                                 XCHG            ;FLIP/FLOP
 4731/181F : E3                                 XTHL            ;PUT RET ON STACK, HL OF VAR IN HL
 4732/1820 : D5                                 PUSH    D       ;SAVE H,L OF LOC
 4733/1821 : CD 08 06                           CALL    LET2A   ;GO STORE STRING
 4734/1824 : E1                                 POP     H       ;RESTORE LOCATION
 4735/1825 : C9                                 RET             ;RETURN
 4736/1826 : CD AA 1B                   GETS8:  CALL    VAR     ;GET VAR NAME
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 80 - 9/26/2024 16:17:21


 4737/1829 : D5                                 PUSH    D       ;SAVE ON STACK
 4738/182A : 7A                                 MOV     A,D     ;GET HI BYTE
 4739/182B : B7                                 ORA     A       ;TEST IF ARRAY
 4740/182C : F2 43 18                           JP      GETS9   ;BRIF NOT
 4741/182F : CD 15 1B                           CALL    SEARC   ;GO GET ARRAY PARAMS
 4742/1832 : 3E FF                              MVI     A,0FFH  ;TURN ON SW
 4743/1834 : 32 72 80                           STA     DIMSW   ;SET IT
 4744/1837 : E3                                 XTHL            ;SWAP ADDR ON STACK
 4745/1838 : CD 57 0F                           CALL    EXPR    ;GO GET ROW, COL PTRS
 4746/183B : E3                                 XTHL            ;SWAP ADDR ON STACK
 4747/183C : CD 5C 18                           CALL    SUBSC   ;GO POINT TO ENTRY
 4748/183F : EB                                 XCHG            ;EXCHANGE
 4749/1840 : E1                                 POP     H       ;GET ADDRESS OF STMT
 4750/1841 : C1                                 POP     B       ;GET NAME
 4751/1842 : C9                                 RET             ;RETURN
 4752/1843 : CD 15 1B                   GETS9:  CALL    SEARC   ;FIND ADDR
 4753/1846 : C1                                 POP     B       ;RESTORE NAME
 4754/1847 : C9                                 RET             ;RETURN
 4755/1848 :                            ;
 4756/1848 : =1848H                     FOVUN   EQU     $
 4757/1848 :                            ;
 4758/1848 :                            ; TEST EXPONENT FOR OVERFLO OR UNDERFLOW
 4759/1848 :                            ;
 4760/1848 : B7                                 ORA     A       ;TEST IT
 4761/1849 : F2 54 18                           JP      FOV1    ;BRIF POS.
 4762/184C : FE C1                              CPI     0C1H    ;TEST FOR MAX NEG
 4763/184E : D0                                 RNC             ;RETURN IF NO UNDER.
 4764/184F : 3E C1                              MVI     A,0C1H  ;SET EXPONENT AT MINIMUM
 4765/1851 : C3 0D 1C                           JMP     UNERR
 4766/1854 : FE 40                      FOV1:   CPI     40H     ;TEST MAX POS
 4767/1856 : D8                                 RC              ;RETURN IF NO OVER.
 4768/1857 : 3E 3F                              MVI     A,3FH   ;SET EXPONENT AT MAXIMUM
 4769/1859 : C3 08 1C                           JMP     OVERR
 4770/185C :                            ;
 4771/185C : =185CH                     SUBSC   EQU     $
 4772/185C :                            ;
 4773/185C :                            ;
 4774/185C :                            ; COMPUTES SUBSCR ADDR
 4775/185C :                            ; INPUT: B HAS ROW NUMBER (1ST SUB)
 4776/185C :                            ;        D HAS COL NUMBER (2ND SUB)
 4777/185C :                            ;        H HAS ADDR NAME
 4778/185C :                            ;
 4779/185C : D5                                 PUSH    D       ;SAVE COL
 4780/185D : =>TRUE                     	IF ROMSTRT = 0
 4781/185D : E7                         		RST     4       ;ADJUST H,L
 4782/185E : =>FALSE                    	ELSE
 4783/185E :                            		CALL	RST4	;ADJUST H,L
 4784/185E : [4780]                     	ENDIF
 4785/185E : FC                                 DB      -4      ;BY FOUR
 4786/185F : 56                                 MOV     D,M     ;GET HI
 4787/1860 : 2B                                 DCX     H       ;POINT LO
 4788/1861 : 5E                                 MOV     E,M     ;GET LO
 4789/1862 : 7A                                 MOV     A,D     ;GET HI
 4790/1863 : B8                                 CMP     B       ;COMPARE
 4791/1864 : DA F0 1B                           JC      SNERR   ;BRIF EXCESS
 4792/1867 : C2 6F 18                           JNZ     SUB1    ;BRIF NOT EQUAL
 4793/186A : 7B                                 MOV     A,E     ;GET LO
 4794/186B : B9                                 CMP     C       ;COMPARE
 4795/186C : DA F0 1B                           JC      SNERR   ;BRIF EXCESS
 4796/186F : 2B                         SUB1:   DCX     H       ;POINT HI COLS
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 81 - 9/26/2024 16:17:21


 4797/1870 : 56                                 MOV     D,M     ;LOAD IT
 4798/1871 : 2B                                 DCX     H       ;POINT LO COLS
 4799/1872 : 5E                                 MOV     E,M     ;LOAD IT
 4800/1873 : E3                                 XTHL            ;SAVE ADDRESS
 4801/1874 : E5                                 PUSH    H       ;SAVE SUB COL
 4802/1875 : D5                                 PUSH    D       ;SAVE DIM COLS
 4803/1876 : 13                                 INX     D       ;MAKE COLS=MAX+1 (ACCOUNT FOR 0 B??KE
 4804/1877 : 21 00 00                           LXI     H,0     ;GET A ZERO
 4805/187A : 78                         SUB2:   MOV     A,B     ;GET HI
 4806/187B : B1                                 ORA     C       ;PLUS LO
 4807/187C : CA 84 18                           JZ      SUB3    ;BRIF ZERO
 4808/187F : 19                                 DAD     D       ;ADD ONCE
 4809/1880 : 0B                                 DCX     B       ;SUB ONCE
 4810/1881 : C3 7A 18                           JMP     SUB2    ;LOOP
 4811/1884 : D1                         SUB3:   POP     D       ;GET DIM COL
 4812/1885 : C1                                 POP     B       ;GET SUB COL
 4813/1886 : 7A                                 MOV     A,D     ;GET HI
 4814/1887 : B8                                 CMP     B       ;COMPARE
 4815/1888 : DA F0 1B                           JC      SNERR   ;BRIF GT
 4816/188B : C2 93 18                           JNZ     SUB4    ;BRIF NOT ZERO
 4817/188E : 7B                                 MOV     A,E     ;GET LO
 4818/188F : B9                                 CMP     C       ;COMPARE
 4819/1890 : DA F0 1B                           JC      SNERR   ;BRIF GT
 4820/1893 : 09                         SUB4:   DAD     B       ;ADD TO PROD
 4821/1894 : 29                                 DAD     H       ;TIMES TWO
 4822/1895 : 29                                 DAD     H       ;TIMES FOUR
 4823/1896 : 7D                                 MOV     A,L     ;GET LOW
 4824/1897 : 2F                                 CMA             ;COMPLEMENT
 4825/1898 : C6 01                              ADI     1       ;PLUS ONE
 4826/189A : 5F                                 MOV     E,A     ;SAVE IT
 4827/189B : 7C                                 MOV     A,H     ;GET HI
 4828/189C : 2F                                 CMA             ;COMPLEMENT
 4829/189D : CE 00                              ACI     0       ;PLUS CARRY
 4830/189F : 57                                 MOV     D,A     ;SAVE
 4831/18A0 : E1                                 POP     H       ;GET ADDR (0,0)
 4832/18A1 : 19                                 DAD     D       ;COMPUTE (I,J) RIGHT SIDE
 4833/18A2 : =>TRUE                     	IF ROMSTRT = 0
 4834/18A2 : E7                         		RST     4       ;ADJUST H,L
 4835/18A3 : =>FALSE                    	ELSE
 4836/18A3 :                            		CALL	RST4	;ADJUST H,L
 4837/18A3 : [4833]                     	ENDIF
 4838/18A3 : FC                                 DB      -4
 4839/18A4 : C9                                 RET             ;RETURN
 4840/18A5 : =18A5H                     FTEST   EQU     $
 4841/18A5 :                            ;
 4842/18A5 :                            ; TEST THE SIGN OF THE NUMBER IN THE FACC
 4843/18A5 :                            ; RETURN WITH S & Z SET TO SIGN
 4844/18A5 :                            ;
 4845/18A5 : 3A 59 82                           LDA     FACC+1  ;GET MSD
 4846/18A8 : B7                                 ORA     A       ;TEST IT
 4847/18A9 : C8                                 RZ              ;RETURN IF ZERO
 4848/18AA : 3A 58 82                           LDA     FACC    ;GET SIGN&EXPON BYTE
 4849/18AD : F6 7F                              ORI     7FH     ;TEST SIGN BIT ONLY
 4850/18AF : 3A 58 82                           LDA     FACC    ;RE-LOAD EXPON BYTE
 4851/18B2 : C9                                 RET             ;THEN RETURN
 4852/18B3 : =18B3H                     FEXP    EQU     $
 4853/18B3 :                            ;
 4854/18B3 :                            ; EXPAND EXPONENT INTO 8 BINARY BITS
 4855/18B3 :                            ;
 4856/18B3 : E6 7F                              ANI     7FH     ;MASK MANTISA SIGN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 82 - 9/26/2024 16:17:21


 4857/18B5 : C6 40                              ADI     40H     ;PROPAGATE CHAR SIGN TO LEFTMOST BIT
 4858/18B7 : EE 40                              XRI     40H     ;RESTORE ORIGINAL SIGN BIT
 4859/18B9 : C9                                 RET             ;RETURN
 4860/18BA :                            ;
 4861/18BA : =18BAH                     FSUBT   EQU     $
 4862/18BA :                            ;
 4863/18BA :                            ; SUBTRACT THE TWO MULTIPRECISION NUMBERS (D,E) & (H,L)
 4864/18BA :                            ;
 4865/18BA : AF                                 XRA     A       ;TURN OF CY
 4866/18BB : 1A                         FSB1:   LDAX    D       ;GET A BYTE
 4867/18BC : 9E                                 SBB     M       ;SUB OTHER BYTE
 4868/18BD : 12                                 STAX    D       ;PUT DOWN
 4869/18BE : 1B                                 DCX     D       ;POINT NEXT
 4870/18BF : 2B                                 DCX     H       ;DITTO
 4871/18C0 : 05                                 DCR     B       ;DECR CTR
 4872/18C1 : C2 BB 18                           JNZ     FSB1    ;LOOP
 4873/18C4 : C9                                 RET             ;RETURN
 4874/18C5 :                            ;
 4875/18C5 :                            ; ADD TWO MULTI-PRECISION NUMBERS (D,E) & (H,L)
 4876/18C5 :                            ;
 4877/18C5 : 06 03                      FADT3:  MVI     B,3
 4878/18C7 : AF                         FADDT:  XRA     A       ;CLEAR STATUS
 4879/18C8 : 1A                         FAD1:   LDAX    D       ;GET BYTE
 4880/18C9 : 8E                                 ADC     M       ;ADD OTHER BYTE
 4881/18CA : 12                                 STAX    D       ;PUT DOWN
 4882/18CB : 1B                                 DCX     D       ;POINT NEXT
 4883/18CC : 2B                                 DCX     H       ;DITTO
 4884/18CD : 05                                 DCR     B       ;DECR LOOP CTR
 4885/18CE : C2 C8 18                           JNZ     FAD1    ;LOOP
 4886/18D1 : C9                                 RET             ;RETURN
 4887/18D2 :                            ;
 4888/18D2 : =18D2H                     FSHFT   EQU     $
 4889/18D2 :                            ;
 4890/18D2 :                            ; INCREMENTING SHIFT RIGHT
 4891/18D2 :                            ;
 4892/18D2 : 7E                                 MOV     A,M     ;GET A BYTE
 4893/18D3 : 1F                                 RAR             ;SHIFT RIGHT
 4894/18D4 : 77                                 MOV     M,A     ;PUT DOWN
 4895/18D5 : 23                                 INX     H       ;POINT NEXT
 4896/18D6 : 05                                 DCR     B       ;DECR CTR
 4897/18D7 : C2 D2 18                           JNZ     FSHFT   ;LOOP
 4898/18DA : C9                                 RET             ;RETURN
 4899/18DB :                            ;
 4900/18DB : =18DBH                     TERMI   EQU     $
 4901/18DB :                            ;
 4902/18DB :                            ; READ A LINE FROM THE TTY
 4903/18DB :                            ; FIRST PROMPT WITH THE CHAR IN THE A REG
 4904/18DB :                            ; TERMINATE THE LINE WITH A X'00'
 4905/18DB :                            ; IGNORE EMPTY LINES
 4906/18DB :                            ; CONTROL C WILL CANCEL THE LINE
 4907/18DB :                            ; CONTROL O WILL TOGGLE THE OUTPUT SWITCH
 4908/18DB :                            ; RUBOUT WILL DELETE THE LAST CHAR INPUT
 4909/18DB :                            ;
 4910/18DB :                            ;
 4911/18DB : 32 4F 82                           STA     PROMP   ;SAVE THE PROMPT CHAR
 4912/18DE : 21 CE 80                   REIN:   LXI     H,IOBUF ;POINT TO INPUT BUFFER
 4913/18E1 : 36 00                              MVI     M,0     ;MARK BEGIN
 4914/18E3 : 23                                 INX     H       ;POINT START
 4915/18E4 : 3A 4F 82                           LDA     PROMP   ;GET THE PROMPT AGAIN
 4916/18E7 : CD 26 19                           CALL    TESTO   ;WRITE TO TERMINAL
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 83 - 9/26/2024 16:17:21


 4917/18EA : FE 3F                              CPI     '?'     ;TEST IF Q.M.
 4918/18EC : C2 F4 18                           JNZ     TREAD   ;BRIF NOT
 4919/18EF : 3E 20                              MVI     A,' '   ;GET SPACE
 4920/18F1 : CD 26 19                           CALL    TESTO   ;WRITE TO TERMINAL
 4921/18F4 : =18F4H                     TREAD   EQU     $
 4922/18F4 : =>TRUE                     	IF CPM = 0
 4923/18F4 : =>TRUE                     	IF UART	= 1		;FOR 8251 UART
 4924/18F4 : DB 09                              IN      UARTS   ;GET TTY STATUS
 4925/18F6 : E6 02                              ANI     RX_MASK ;TEST IF RXRDY
 4926/18F8 : CA F4 18                           JZ      TREAD   ;LOOP TIL CHAR
 4927/18FB : [4923]                     	ENDIF
 4928/18FB :                            
 4929/18FB : =>FALSE                    	IF ACIA = 1		;FOR MC6850 ACIA
 4930/18FB :                                    IN      ACIAS   ;GET TTY STATUS
 4931/18FB :                                    ANI     RX_MASK ;TEST IF RXRDY
 4932/18FB :                                    JZ      TREAD   ;LOOP TIL CHAR
 4933/18FB : [4929]                     	ENDIF
 4934/18FB : [4922]                     	ENDIF
 4935/18FB : CD 20 1A                           CALL    GETCH   ;GO READ THE CHAR
 4936/18FE : 77                                 MOV     M,A     ;PUT IN BUFFER
 4937/18FF : FE 0A                              CPI     0AH     ;TEST IF LINE FEED
 4938/1901 : CA F4 18                           JZ      TREAD   ;IGNORE IF IT IS
 4939/1904 : FE 0D                              CPI     0DH     ;TEST IF CR
 4940/1906 : C2 40 19                           JNZ     NOTCR   ;BRIF NOT
 4941/1909 : 3A 71 80                           LDA     TAPES   ;GET PAPER TAPE SWITCH
 4942/190C : 1F                                 RAR             ;TEST IF LOAD
 4943/190D : D4 35 19                           CNC     CRLF    ;CR/LF IF NOT
 4944/1910 : 36 00                      CR1:    MVI     M,0     ;MARK END
 4945/1912 : 3A 74 80                           LDA     ILSW    ;GET INPUT LINE SW
 4946/1915 : B7                                 ORA     A       ;TEST IT
 4947/1916 : C0                                 RNZ             ;RETURN IF ON
 4948/1917 : 2B                                 DCX     H       ;POINT PRIOR
 4949/1918 : 7E                                 MOV     A,M     ;LOAD IT
 4950/1919 : FE 20                              CPI     20H     ;TEST IF SPACE
 4951/191B : CA 10 19                           JZ      CR1     ;BRIF SPACE
 4952/191E : B7                                 ORA     A       ;TEST IF AT BEGINNING
 4953/191F : CA DE 18                           JZ      REIN    ;BRIF IS (NULL LINE)
 4954/1922 : 21 CF 80                           LXI     H,IOBUF+1       ;POINT BEGIN
 4955/1925 : C9                                 RET             ;ELSE, RETURN
 4956/1926 :                            
 4957/1926 : =1926H                     TESTO   EQU     $
 4958/1926 :                            
 4959/1926 : =>TRUE                     	IF CPM = 0
 4960/1926 : =>TRUE                     	IF UART = 1		;8251 UART SUPPORT
 4961/1926 : F5                                 PUSH    PSW     ;SAVE CHAR
 4962/1927 : DB 09                      TEST1:  IN      UARTS   ;GET STATUS
 4963/1929 : E6 01                      		ANI		TX_MASK ;TEST IF TXRDY
 4964/192B : CA 27 19                           JZ      TEST1   ;LOOP TILL READY
 4965/192E : F1                                 POP     PSW     ;GET CHAR
 4966/192F : D3 08                              OUT     UARTD   ;WRITE IT
 4967/1931 : [4960]                     	ENDIF
 4968/1931 :                            
 4969/1931 : =>FALSE                    	IF ACIA	= 1		;MC6850 ACIA SUPPORT
 4970/1931 :                                    PUSH    PSW     ;SAVE CHAR
 4971/1931 :                            TEST1:  IN      ACIAS   ;GET STATUS
 4972/1931 :                            		ANI		TX_MASK ;TEST IF TXRDY
 4973/1931 :                                    JZ      TEST1   ;LOOP TILL READY
 4974/1931 :                                    POP     PSW     ;GET CHAR
 4975/1931 :                                    OUT     ACIAD   ;WRITE IT
 4976/1931 : [4969]                     	ENDIF
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 84 - 9/26/2024 16:17:21


 4977/1931 : =>FALSE                    	ELSE
 4978/1931 :                                    PUSH    B       ;BIOS CALLS DESTROYS C,DE
 4979/1931 :                                    PUSH    D
 4980/1931 :                                    PUSH	H
 4981/1931 :                                    MOV     C,A     ;OUTPUT BYTE
 4982/1931 :                                    CALL    BTOUT   ;CALL BIOS
 4983/1931 :                                    POP		H
 4984/1931 :                                    POP     D       ;RESTORE
 4985/1931 :                                    POP     B
 4986/1931 : [4959]                     	ENDIF
 4987/1931 : =>TRUE                     	IF LARGE = 1		;SAVE ROOM ONLY IN 8+K VERSIONS
 4988/1931 : 00 00 00                           DB      0,0,0   ;SAVE ROOM FOR CALL TO USER ROUTINE
 4989/1934 : [4987]                     	ENDIF
 4990/1934 : C9                                 RET             ;RETURN
 4991/1935 :                            
 4992/1935 : 3E 0D                      CRLF:   MVI     A,0DH   ;LOAD A CR
 4993/1937 : CD 26 19                           CALL    TESTO   ;WRITE IT
 4994/193A : 3E 0A                              MVI     A,0AH   ;LF
 4995/193C : CD 26 19                           CALL    TESTO   ;WRITE IT
 4996/193F :                            ;2019-0222 - JQ - Added to increase speed of console output
 4997/193F :                            ; by bypassing paper-tape support.
 4998/193F : =>FALSE                    	IF	PT_SUPP = 1	;INSERT RUBOUTS AND A PAUSE BETWEEN CR/LF COMBOS
 4999/193F :                                    MVI     A,RUBOUT;GET RUBOUT CHAR
 5000/193F :                                    MVI     B,0FAH  ;LOAD 255-RUBOUT COUNT
 5001/193F :                            PAUZ:   CALL    TESTO   ;SEND RUBOUT
 5002/193F :                                    INR     B       ;INCREMENT COUNT
 5003/193F :                                    CMP     B       ;COMPARE TO 255
 5004/193F :                                    JNZ     PAUZ    ;SET ANOTHER RUBOUT
 5005/193F :                                    XRA     A       ;GET A ZERO
 5006/193F :                                    STA     COLUM   ;RESET COLUMN POINTER
 5007/193F : [4998]                     	ENDIF
 5008/193F : C9                                 RET             ;RETURN
 5009/1940 :                            
 5010/1940 : FE 15                      NOTCR:  CPI     15H     ;TEST IF CONTROL-U
 5011/1942 : C2 4E 19                           JNZ     NOTCO   ;BRIF NOT
 5012/1945 : CD 4E 1A                           CALL    PRCNT   ;GO PRINT ^U
 5013/1948 : CD 35 19                           CALL    CRLF    ;GET CR/LF
 5014/194B : C3 DE 18                           JMP     REIN    ;GO RE-ENTER
 5015/194E : FE 7F                      NOTCO:  CPI     7FH     ;TEST IF RUBOUT
 5016/1950 : C2 71 19                           JNZ     NOTBS   ;BRIF NOT
 5017/1953 : 3A 71 80                           LDA     TAPES   ;GET PAPER TAPE SW
 5018/1956 : 1F                                 RAR             ;TEST IF LOAD
 5019/1957 : DA F4 18                           JC      TREAD   ;IGNORE IF LOAD
 5020/195A : 2B                                 DCX     H       ;POINT PRIOR
 5021/195B : 7E                                 MOV     A,M     ;LOAD PREV CHAR
 5022/195C : B7                                 ORA     A       ;TEST IF BEGIN
 5023/195D : CA 92 19                           JZ      ECHO    ;BRIF IS
 5024/1960 : 3E 5C                              MVI     A,'\\'  ;BACK SLASH
 5025/1962 : CD 26 19                           CALL    TESTO   ;WRITE IT
 5026/1965 : 7E                                 MOV     A,M     ;FETCH CHARACTER TO BE DISCARDED
 5027/1966 : CD 26 19                           CALL    TESTO   ;WRITE IT
 5028/1969 : 3E 5C                              MVI     A,'\\'  ;BACK SLASH
 5029/196B : CD 26 19                           CALL    TESTO   ;WRITE IT
 5030/196E : C3 F4 18                           JMP     TREAD   ;GET REPLACEMENT CHARACTER
 5031/1971 : =1971H                     NOTBS:  EQU     $
 5032/1971 : =>TRUE                     	IF LARGE = 1   ;CONTROL H WORKS ONLY ON 9K VERSION
 5033/1971 : FE 08                              CPI     8       ;TEST FOR ASCII BACKSPACE
 5034/1973 : C2 87 19                           JNZ     NOTCH   ;BRIF NOT CONTROL H
 5035/1976 : 2B                                 DCX     H       ;POINT PRIOR
 5036/1977 : 7E                                 MOV     A,M     ;FETCH CHARACTER
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 85 - 9/26/2024 16:17:21


 5037/1978 : B7                                 ORA     A       ;TEST FOR BEGINNING
 5038/1979 : CA 92 19                           JZ      ECHO    ;BRIF IT IS
 5039/197C : E5                                 PUSH    H       ;SAVE POSITION
 5040/197D : 21 82 1D                           LXI     H,RBOUT ;POINT RUBOUT SEQUENCE
 5041/1980 : CD 9E 19                           CALL    TERMM   ;WRITE IT
 5042/1983 : E1                                 POP     H       ;RESTORE H,L
 5043/1984 : C3 F4 18                           JMP     TREAD   ;GET REPLACEMENT CHARACTER
 5044/1987 : [5032]                     	ENDIF
 5045/1987 : 3A 71 80                   NOTCH:  LDA     TAPES   ;GET PAPER TAPE SWITCH
 5046/198A : 1F                                 RAR             ;FLAG TO CARRY
 5047/198B : DA 92 19                           JC      ECHO    ;NO ECHO IF TAPE
 5048/198E : 7E                                 MOV     A,M     ;ELSE, LOAD THE CHAR
 5049/198F : CD 26 19                           CALL    TESTO   ;ECHO THE CHARCTER
 5050/1992 : 23                         ECHO:   INX     H       ;POINT NEXT POSIT
 5051/1993 : C3 F4 18                           JMP     TREAD   ;LOOP FOR NEXT
 5052/1996 :                            ;
 5053/1996 : =1996H                     TERMO   EQU     $
 5054/1996 :                            ;
 5055/1996 :                            ; TTY PRINT ROUTINE
 5056/1996 :                            ;
 5057/1996 :                            ; OUTPUT STRING OF CHARS
 5058/1996 :                            ; STARTING AT IOBUF +0 THRU END (FF OR FE OR 00)
 5059/1996 :                            ; FOLLOWING IMBEDDED CHARACTERS ARE INTERPRETED AS CONTROLS:
 5060/1996 :                            ; X'00' END OF BUFFER, TYPE CR/LF AND RETURN
 5061/1996 :                            ; X'FE' END OF BUFFER, RETURN (NO CR/LF)
 5062/1996 :                            ; X'FD' TYPE CR/LF, CONTINUE
 5063/1996 :                            ;
 5064/1996 :                            ; RETURN WITHOUT OUTPUT IF OUTPUT SW IS OFF
 5065/1996 :                            ;
 5066/1996 : 3A 73 80                           LDA     OUTSW   ;GET OUTPUT SW
 5067/1999 : B7                                 ORA     A       ;TEST IT
 5068/199A : C0                                 RNZ             ;RETURN IF NO PRINT
 5069/199B : 21 CE 80                           LXI     H,IOBUF ;POINT I/O BUFFER
 5070/199E : 7E                         OT1:    MOV     A,M     ;LOAD A BYTE
 5071/199F : FE FE                              CPI     0FEH    ;SEE IF END OF LINE (NO CR/LF)
 5072/19A1 : C8                                 RZ              ;RETURN IF EQUAL
 5073/19A2 : FE FD                              CPI     0FDH    ;SEE IF IMBEDDED CR/LF
 5074/19A4 : C2 AD 19                           JNZ     OT2     ;BRIF NOT
 5075/19A7 : CD 35 19                           CALL    CRLF    ;LINE FEED
 5076/19AA : C3 BC 19                           JMP     OT4     ;CONTINUE
 5077/19AD : B7                         OT2:    ORA     A       ;TEST IF END OF OUTPUT
 5078/19AE : CA 35 19                           JZ      CRLF    ;BRIF IS
 5079/19B1 : 7E                                 MOV     A,M     ;LOAD THE BYTE
 5080/19B2 : CD 26 19                           CALL    TESTO   ;TYPE IT
 5081/19B5 : 3A 76 82                           LDA     COLUM   ;GET COLUMN POINTER
 5082/19B8 : 3C                                 INR     A       ;ADD ONE
 5083/19B9 : 32 76 82                           STA     COLUM   ;RESTORE IT
 5084/19BC : 23                         OT4:    INX     H       ;POINT NEXT
 5085/19BD : C3 9E 19                           JMP     OT1     ;LOOP
 5086/19C0 : =199EH                     TERMM   EQU     OT1
 5087/19C0 :                            ;
 5088/19C0 : =19C0H                     TABST   EQU     $
 5089/19C0 :                            ;
 5090/19C0 :                            ;
 5091/19C0 :                            ; POSITION TTY AT NEXT TAB STOP
 5092/19C0 :                            ;
 5093/19C0 :                            ;
 5094/19C0 : 3A 73 80                           LDA     OUTSW   ;GET OUTPUT SWITCH
 5095/19C3 : B7                                 ORA     A       ;TEST IT
 5096/19C4 : C0                                 RNZ             ;RETURN IF SUPPRESSED
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 86 - 9/26/2024 16:17:21


 5097/19C5 : 3A 76 82                           LDA     COLUM   ;GET COLUMN POINTER
 5098/19C8 : FE 38                              CPI     56      ;COMPARE TO 56
 5099/19CA : D2 35 19                           JNC     CRLF    ;BRIF NO ROOM LEFT
 5100/19CD : 47                                 MOV     B,A     ;SAVE IT
 5101/19CE : AF                                 XRA     A       ;INIT POSITION
 5102/19CF : B8                         TBLP:   CMP     B       ;COMPARE
 5103/19D0 : CA D6 19                           JZ      TBLP2
 5104/19D3 : D2 DB 19                           JNC     TBON    ;BRIF SHY OF TAB
 5105/19D6 : C6 0E                      TBLP2:  ADI     14      ;POINT NEXT STOP
 5106/19D8 : C3 CF 19                           JMP     TBLP    ;LOOP
 5107/19DB : 32 76 82                   TBON:   STA     COLUM   ;UPDATE CTR
 5108/19DE : 90                                 SUB     B       ;COMPUTE NUMBER OF SPACES
 5109/19DF : 47                                 MOV     B,A     ;SAVE IT
 5110/19E0 : 3E 20                      TBSPA:  MVI     A,' '   ;SPACE TO REG A
 5111/19E2 : CD 26 19                           CALL    TESTO   ;OUTPUT IT
 5112/19E5 : 05                                 DCR     B       ;SUB 1 FROM CTR
 5113/19E6 : C8                                 RZ              ;RETURN IF ZERO
 5114/19E7 : C3 E0 19                           JMP     TBSPA   ;ELSE, LOOP
 5115/19EA :                            ;
 5116/19EA : =19EAH                     LINEO   EQU     $
 5117/19EA :                            ;
 5118/19EA :                            ; UNPACK LINE NUMBER FROM (H,L) TO (D,E)
 5119/19EA :                            ; ZERO SUPPRESS LEADING ZEROS
 5120/19EA :                            ;
 5121/19EA :                            ;
 5122/19EA : C5                                 PUSH    B       ;PUSH B,C
 5123/19EB : 06 01                              MVI     B,1     ;SET SWITCH
 5124/19ED : CD F5 19                           CALL    LOUT    ;GO FORMAT 2 BYTES
 5125/19F0 : CD F5 19                           CALL    LOUT    ;THEN THE NEXT 2
 5126/19F3 : C1                                 POP     B       ;RESTORE B,C
 5127/19F4 : C9                                 RET             ;RETURN
 5128/19F5 :                            ;
 5129/19F5 : =19F5H                     LOUT    EQU     $
 5130/19F5 : 7E                                 MOV     A,M     ;GET BYTE
 5131/19F6 : E6 F0                              ANI     0F0H    ;ISOLATE LEFT HALF
 5132/19F8 : 1F                                 RAR             ;SHIFT RIGHT 1 BIT
 5133/19F9 : 1F                                 RAR             ;AGAIN
 5134/19FA : 1F                                 RAR             ;AGAIN
 5135/19FB : 1F                                 RAR             ;LAST TIME
 5136/19FC : C2 03 1A                           JNZ     NOTZ1   ;BRIF NOT ZERO
 5137/19FF : B0                                 ORA     B       ;MERGE IN B
 5138/1A00 : C2 09 1A                           JNZ     Z1      ;BRIF ZERO
 5139/1A03 : 06 00                      NOTZ1:  MVI     B,0     ;RESET SWITCH
 5140/1A05 : F6 30                              ORI     30H     ;ZONE
 5141/1A07 : 12                                 STAX    D       ;PUT TO BUFFER
 5142/1A08 : 13                                 INX     D       ;POINT NEXT
 5143/1A09 : 7E                         Z1:     MOV     A,M     ;LOAD BYTE
 5144/1A0A : E6 0F                              ANI     0FH     ;MASK
 5145/1A0C : C2 13 1A                           JNZ     NOTZ2   ;BRIF NOT ZERO
 5146/1A0F : B0                                 ORA     B       ;MERGE SWITCH
 5147/1A10 : C2 19 1A                           JNZ     Z2      ;BRIF ZERO
 5148/1A13 : 06 00                      NOTZ2:  MVI     B,0     ;SET SWITCH OFF
 5149/1A15 : F6 30                              ORI     30H     ;ZONE
 5150/1A17 : 12                                 STAX    D       ;PUT TO BUFFER
 5151/1A18 : 13                                 INX     D       ;POINT TO NEXT
 5152/1A19 : 23                         Z2:     INX     H       ;AND NEXT LINE BYTE
 5153/1A1A : C9                                 RET             ;RETURN
 5154/1A1B :                            ;
 5155/1A1B : =1A1BH                     TSTCC   EQU     $
 5156/1A1B :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 87 - 9/26/2024 16:17:21


 5157/1A1B :                            ; TEST IF KEY WAS PRESSED DURING EXECUTION
 5158/1A1B :                            ; CANCEL IF CONTROL-C
 5159/1A1B :                            ; TOGGLE OUTPUT SUPPRESS SW IF CONTROL-O
 5160/1A1B :                            ;
 5161/1A1B : =>TRUE                     	IF CPM = 0
 5162/1A1B : =>TRUE                     	IF UART	= 1		;FOR 8251 UART
 5163/1A1B : DB 09                              IN      UARTS	;GET TTY STATUS
 5164/1A1D : E6 02                              ANI     RX_MASK	;MASK FOR RXRDY
 5165/1A1F : C8                                 RZ              ;RETURN IF NO CHAR
 5166/1A20 : DB 08                      GETCH:  IN      UARTD	;READ THE CHAR
 5167/1A22 : E6 7F                              ANI     7FH     ;TURN OFF PARITY
 5168/1A24 : [5162]                     	ENDIF
 5169/1A24 :                            
 5170/1A24 : =>FALSE                    	IF ACIA = 1		;FOR MC6850 ACIA
 5171/1A24 :                                    IN		ACIAS	;GET TTY STATUS
 5172/1A24 :                                    ANI		RX_MASK ;MASK FOR RXRDY
 5173/1A24 :                                    RZ              ;RETURN IF NO CHAR
 5174/1A24 :                            GETCH:  IN		ACIAD   ;READ THE CHAR
 5175/1A24 :                                    ANI		7FH     ;TURN OFF PARITY
 5176/1A24 : [5170]                     	ENDIF
 5177/1A24 : =>FALSE                    	ELSE
 5178/1A24 :                                    ;NOTE: FOLLOWING CLOBBERS REGISTERS,
 5179/1A24 :                                    ; PUSH AND POP IF FOUND TO CREATE BUGS.
 5180/1A24 :                                    CALL    BTSTAT  ;CALL BIOS
 5181/1A24 :                                    RZ              ;RETURN ON NO CHAR
 5182/1A24 :                            GETCH:  PUSH    B       ;SAVE REGS - CPM CAN CLOBBER
 5183/1A24 :                                    PUSH    D
 5184/1A24 :                                    PUSH    H
 5185/1A24 :                                    CALL    BTIN    ;CALL BIOS TO INPUT
 5186/1A24 :                                    POP     H
 5187/1A24 :                                    POP     D
 5188/1A24 :                                    POP     B
 5189/1A24 : [5161]                     	ENDIF
 5190/1A24 : FE 03                              CPI     3       ;TEST IF CONTROL C
 5191/1A26 : C2 3F 1A                           JNZ     TSTC1   ;BRIF NOT
 5192/1A29 : CD 4E 1A                           CALL    PRCNT   ;GO PRINT ^C
 5193/1A2C : 3A 76 80                           LDA     EDSW    ;GET MODE SW
 5194/1A2F : B7                                 ORA     A       ;TEST IT
 5195/1A30 : C2 CF 01                           JNZ     KEY     ;**;BRIF COMMAND MODE
 5196/1A33 : 21 2F 1E                           LXI     H,STOPM ;POINT MSG
 5197/1A36 : CD 9E 19                           CALL    TERMM   ;GO PRINT IT
 5198/1A39 : CD D2 1B                           CALL    PRLIN   ;GO PRINT LINE
 5199/1A3C : C3 CF 01                           JMP     KEY     ;GOTO READY
 5200/1A3F : FE 0F                      TSTC1:  CPI     0FH     ;TEST IF CONTROL O
 5201/1A41 : C0                                 RNZ             ;RETURN IF NOT
 5202/1A42 : CD 4E 1A                           CALL    PRCNT   ;GO PRINT ^O
 5203/1A45 : 3A 73 80                           LDA     OUTSW   ;GET OUTPUT SWTICH
 5204/1A48 : EE 01                              XRI     1       ;TOGGLE
 5205/1A4A : 32 73 80                           STA     OUTSW   ;PUT SW
 5206/1A4D : C9                                 RET             ;RETURN
 5207/1A4E :                            ;
 5208/1A4E : =1A4EH                     PRCNT   EQU     $
 5209/1A4E :                            ;
 5210/1A4E :                            ;
 5211/1A4E :                            ; PRINTS ^ AND CHAR
 5212/1A4E :                            ;
 5213/1A4E : F5                                 PUSH    PSW     ;SAVE CHAR
 5214/1A4F : 3E 5E                              MVI     A,'^'   ;GET UP ARROW
 5215/1A51 : CD 26 19                           CALL    TESTO   ;WRITE IT
 5216/1A54 : F1                                 POP     PSW     ;GET CHAR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 88 - 9/26/2024 16:17:21


 5217/1A55 : C6 40                              ADI     64      ;TRNSLATE
 5218/1A57 : C3 26 19                           JMP     TESTO   ;WRITE IT
 5219/1A5A :                            ;
 5220/1A5A : =1A5AH                     COMP2   EQU     $
 5221/1A5A :                            ;
 5222/1A5A :                            ; CONTINUATION OF COMPARE (RST 2) ROUTINE
 5223/1A5A :                            ;
 5224/1A5A : B7                                 ORA     A       ;TEST IT
 5225/1A5B : C2 62 1A                           JNZ     COMP5   ;BRIF NOT END
 5226/1A5E : AF                         COMP3:  XRA     A       ;SET EQUAL STATUS
 5227/1A5F : 7E                         COMP4:  MOV     A,M     ;GET LAST CHAR
 5228/1A60 : C1                                 POP     B       ;RESTORE B,C
 5229/1A61 : C9                                 RET             ;RETURN
 5230/1A62 : BE                         COMP5:  CMP     M       ;COMPARE THE TWO CHARS
 5231/1A63 : CA 6F 1A                           JZ      COMP6   ;BRIF EQUAL
 5232/1A66 : 78                                 MOV     A,B     ;GET COUNT
 5233/1A67 : FE 03                              CPI     3       ;GET IF >= 3
 5234/1A69 : D2 5E 1A                           JNC     COMP3   ;BRIF NOT LESS THAN 3
 5235/1A6C : C3 5F 1A                           JMP     COMP4   ;BRIF LESS THAN 3 AND NOT EQUAL
 5236/1A6F : 04                         COMP6:  INR     B       ;COUNT IT
 5237/1A70 : 13                                 INX     D       ;POINT NEXT LIT
 5238/1A71 : 23                                 INX     H       ;POINT NEXT VAR
 5239/1A72 : C3 13 00                           JMP     COMP1   ;CONTINUE
 5240/1A75 :                            ;
 5241/1A75 : =1A75H                     EOL     EQU     $
 5242/1A75 :                            ;
 5243/1A75 :                            ; TESTS IF (H,L) IS END OF LINE
 5244/1A75 :                            ; ERROR-DL IF NOT
 5245/1A75 :                            ;
 5246/1A75 : =>TRUE                     	IF ROMSTRT = 0
 5247/1A75 : CF                                 RST     1       ;SKIP TO NON BLANK
 5248/1A76 : =>FALSE                    	ELSE
 5249/1A76 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 5250/1A76 : [5246]                     	ENDIF
 5251/1A76 : CD 89 1A                           CALL    TSTEL   ;TEST IF END LINE
 5252/1A79 : C2 F0 1B                           JNZ     SNERR   ;ERROR IF NOT
 5253/1A7C : FE 3A                              CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
 5254/1A7E : C2 84 1A                           JNZ     EOL1    ;BRIF NOT
 5255/1A81 : 32 74 82                           STA     MULTI   ;SET SWITCH
 5256/1A84 : 23                         EOL1:   INX     H       ;POINT NEXT
 5257/1A85 : 22 72 82                           SHLD    ENDLI   ;SAVE POINTER
 5258/1A88 : C9                                 RET             ;RETURN
 5259/1A89 :                            ;
 5260/1A89 : =1A89H                     TSTEL   EQU     $
 5261/1A89 :                            ;
 5262/1A89 :                            ; TEST (H,L) FOR END OF STATEMENT (00H OR ':')
 5263/1A89 :                            ; RETURN WITH Z SET IF IT IS
 5264/1A89 :                            ;
 5265/1A89 : B7                                 ORA     A       ;TEST FOR ZERO
 5266/1A8A : C8                                 RZ              ;RETURN IF IS
 5267/1A8B : FE 3A                              CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
 5268/1A8D : C9                                 RET             ;RETURN
 5269/1A8E :                            ;
 5270/1A8E : =1A8EH                     NOTEO   EQU     $
 5271/1A8E :                            ;
 5272/1A8E :                            ;
 5273/1A8E :                            ; TEST IF (H,L) IS END OF LINE
 5274/1A8E :                            ; RETURN IF NOT, ERROR-DL IF IS
 5275/1A8E :                            ;
 5276/1A8E : =>TRUE                     	IF ROMSTRT = 0
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 89 - 9/26/2024 16:17:21


 5277/1A8E : CF                                 RST     1       ;SKIP TO NON BLANK
 5278/1A8F : =>FALSE                    	ELSE
 5279/1A8F :                            		CALL	RST1	;CALL TO RAM ADDRESS
 5280/1A8F : [5276]                     	ENDIF
 5281/1A8F : CD 89 1A                           CALL    TSTEL   ;TEST IF END OF LINE
 5282/1A92 : CA F0 1B                           JZ      SNERR   ;ERROR IF IS
 5283/1A95 : C9                                 RET             ;ELSE, RETURN
 5284/1A96 :                            ;
 5285/1A96 : =1A96H                     PACK    EQU     $
 5286/1A96 :                            ;
 5287/1A96 :                            ; PACK LINE NUMBER FROM (H,L) TO B,C
 5288/1A96 :                            ;
 5289/1A96 :                            ;
 5290/1A96 : 01 00 00                           LXI     B,0     ;CLEAR B AND C
 5291/1A99 : 3E 04                              MVI     A,4     ;INIT DIGIT COUNTER
 5292/1A9B : 32 8D 82                           STA     PRSW    ;SAVE A
 5293/1A9E : 7E                         PK1:    MOV     A,M     ;GET CHAR
 5294/1A9F : CD 0B 1B                           CALL    NUMER   ;TEST FOR NUMERIC
 5295/1AA2 : C0                                 RNZ             ;RETURN IF NOT NUMERIC
 5296/1AA3 : E6 0F                              ANI     0FH     ;STRIP OFF ZONE
 5297/1AA5 : 57                                 MOV     D,A     ;SAVE IT
 5298/1AA6 : 3A 8D 82                           LDA     PRSW    ;GET COUNT
 5299/1AA9 : 3D                                 DCR     A       ;SUBTRACT ONE
 5300/1AAA : FA F0 1B                           JM      SNERR   ;BRIF ERROR
 5301/1AAD : 32 8D 82                           STA     PRSW    ;SAVE CTR
 5302/1AB0 : 1E 04                              MVI     E,4     ;4 BIT SHIFT LOOP
 5303/1AB2 : 79                         PK3:    MOV     A,C     ;GET LOW BYTE
 5304/1AB3 : 17                                 RAL             ;ROTATE LEFT 1 BIT
 5305/1AB4 : 4F                                 MOV     C,A     ;REPLACE
 5306/1AB5 : 78                                 MOV     A,B     ;GET HIGH BYTE
 5307/1AB6 : 17                                 RAL             ;ROTATE LEFT 1 BIT
 5308/1AB7 : 47                                 MOV     B,A     ;REPLACE
 5309/1AB8 : 1D                                 DCR     E       ;DECR CTR
 5310/1AB9 : C2 B2 1A                           JNZ     PK3     ;LOOP
 5311/1ABC : 79                                 MOV     A,C     ;GET LOW
 5312/1ABD : B2                                 ORA     D       ;PUT DIGIT IN RIGHT HALF OF BYTE
 5313/1ABE : 4F                                 MOV     C,A     ;REPLACE
 5314/1ABF : 23                                 INX     H       ;POINT NEXT BYTE
 5315/1AC0 : C3 9E 1A                           JMP     PK1     ;LOOP
 5316/1AC3 :                            ;
 5317/1AC3 : =1AC3H                     SQUIS   EQU     $
 5318/1AC3 :                            ;
 5319/1AC3 :                            ; COMPRESS THE EXPR STACK
 5320/1AC3 :                            ; REG A CONTAINS # OF BYTES TO REMOVE STARTING AT (H,L+1)
 5321/1AC3 :                            ; CONTAINS TOTAL NUMBER OF CHARACTERS IN STACK THUS FAR
 5322/1AC3 :                            ;
 5323/1AC3 : E5                                 PUSH    H       ;SAVE H,L
 5324/1AC4 : 5F                                 MOV     E,A     ;COUNT TO E
 5325/1AC5 : 16 00                              MVI     D,0     ;ZERO HI BYTE
 5326/1AC7 : 19                                 DAD     D       ;COMPUTE START
 5327/1AC8 : EB                                 XCHG            ;PUT TO D,E
 5328/1AC9 : E1                                 POP     H       ;GET H,L
 5329/1ACA : 2F                                 CMA             ;COMPLEMENT COUNT
 5330/1ACB : 3C                                 INR     A       ;THEN 2'S COMPLEMENT
 5331/1ACC : 80                                 ADD     B       ;COMPUTE B-A
 5332/1ACD : 47                                 MOV     B,A     ;PUT TO B
 5333/1ACE : 13                         SQUI2:  INX     D       ;POINT NEXT SEND
 5334/1ACF : 23                                 INX     H       ;POINT NEXT RECEIVE
 5335/1AD0 : 1A                                 LDAX    D       ;GET A CHAR
 5336/1AD1 : 77                                 MOV     M,A     ;PUT IT DOWN
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 90 - 9/26/2024 16:17:21


 5337/1AD2 : 05                                 DCR     B       ;DECR CTR
 5338/1AD3 : C2 CE 1A                           JNZ     SQUI2   ;LOOP
 5339/1AD6 : 22 50 82                           SHLD    EXPRS   ;UPDATE NEW START OF EXPR
 5340/1AD9 : C9                                 RET             ;RETURN
 5341/1ADA :                            ;
 5342/1ADA : =1ADAH                     SKP2Z   EQU     $
 5343/1ADA :                            ;
 5344/1ADA :                            ; FIND END OF LITERAL IN (D,E)
 5345/1ADA :                            ;
 5346/1ADA : 1A                                 LDAX    D       ;GET BYTE OF LIT
 5347/1ADB : B7                                 ORA     A       ;TEST IT
 5348/1ADC : C8                                 RZ              ;RETURN IF ZERO (END)
 5349/1ADD : 13                                 INX     D       ;ELSE, POINT NEXT
 5350/1ADE : C3 DA 1A                           JMP     SKP2Z   ;LOOP
 5351/1AE1 :                            ;
 5352/1AE1 : =1AE1H                     GTEMP   EQU     $
 5353/1AE1 :                            ;
 5354/1AE1 :                            ; GETS FOUR BYTE TEMPORARY STORAGE AREA,
 5355/1AE1 :                            ; STORES THE FACC THERE,
 5356/1AE1 :                            ; PUTS ADDR OF AREA IN EXPR STACK (H,L)
 5357/1AE1 :                            ;
 5358/1AE1 : EB                                 XCHG            ;SAVE H,L IN D,E
 5359/1AE2 : E3                                 XTHL            ;EXCHANGE 0 AND RET ADDR
 5360/1AE3 : E5                                 PUSH    H       ;PUT NEW RET ADDR
 5361/1AE4 : E5                                 PUSH    H       ;DOIT IT AGAIN
 5362/1AE5 : 21 00 00                           LXI     H,0     ;ZERO H,L
 5363/1AE8 : 39                                 DAD     SP      ;GET SP ADDR IN H,L
 5364/1AE9 : 23                                 INX     H       ;PLUS ONE
 5365/1AEA : 23                                 INX     H       ;PLUS ONE MORE (POINT TO NEW AREA)
 5366/1AEB : C5                                 PUSH    B       ;SAVE CTRS
 5367/1AEC : D5                                 PUSH    D       ;SAVE EXPR ADDR
 5368/1AED : E5                                 PUSH    H       ;SAVE TEMP ADDR
 5369/1AEE : =>TRUE                     	IF ROMSTRT = 0
 5370/1AEE : DF                                 RST     3       ;GO STORE THE VALUE
 5371/1AEF : =>FALSE                    	ELSE
 5372/1AEF :                            		CALL	RST3	;GO STORE THE VALUE
 5373/1AEF : [5369]                     	ENDIF
 5374/1AEF : D1                                 POP     D       ;RESTORE TEMP ADDR
 5375/1AF0 : 2A 69 82                           LHLD    SPCTR   ;GET COUNT
 5376/1AF3 : 23                                 INX     H       ;PLUS ONE
 5377/1AF4 : 23                                 INX     H       ;ONE MORE
 5378/1AF5 : 22 69 82                           SHLD    SPCTR   ;PUT BACK
 5379/1AF8 : E1                                 POP     H       ;RESTORE EXPR ADDR
 5380/1AF9 : C1                                 POP     B       ;RESTORE CTRS
 5381/1AFA : 23                         SADR:   INX     H       ;POINT NEXT BYTE
 5382/1AFB : 72                                 MOV     M,D     ;HIGH BYTE TO EXPRSTK
 5383/1AFC : 23                                 INX     H       ;POINT NEXT
 5384/1AFD : 73                                 MOV     M,E     ;LOW BYTE TO EXPR STK
 5385/1AFE : 23                                 INX     H       ;POINT NEXT
 5386/1AFF : 36 E3                              MVI     M,0E3H  ;CODE = NUMERIC DATA
 5387/1B01 : C9                                 RET             ;RETURN
 5388/1B02 :                            ;
 5389/1B02 : =1B02H                     ALPHA   EQU     $
 5390/1B02 :                            ;
 5391/1B02 :                            ; TESTS THE CHAR AT (H,L)
 5392/1B02 :                            ; RETURNS WITH Z SET IF CHAR IS ALPHA (A-Z)
 5393/1B02 :                            ; RETURNS WITH Z OFF IF NOT ALPHA
 5394/1B02 :                            ; CHAR IS LEFT IN REG A
 5395/1B02 :                            ;
 5396/1B02 : 7E                                 MOV     A,M     ;PUT CHAR TO REG A
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 91 - 9/26/2024 16:17:21


 5397/1B03 : FE 41                              CPI     'A'     ;TEST IF A OR HIGHER
 5398/1B05 : D8                                 RC              ;RETURN IF NOT ALPHA (Z IS OFF)
 5399/1B06 : FE 5A                              CPI     'Z'     ;TEST IF Z OR LESS
 5400/1B08 : C3 11 1B                           JMP     NUMEN   ;GO WRAPUP
 5401/1B0B :                            ;
 5402/1B0B : =1B0BH                     NUMER   EQU     $
 5403/1B0B :                            ;
 5404/1B0B :                            ; TESTS THE CHAR AT (H,L)
 5405/1B0B :                            ; RETURNS WITH Z SET IF NUMERIC (0-9)
 5406/1B0B :                            ; ELSE Z IS OFF
 5407/1B0B :                            ; CHAR IS LEFT IN THE A REG
 5408/1B0B :                            ;
 5409/1B0B : 7E                                 MOV     A,M     ;GET CHAR TO REG A
 5410/1B0C : FE 30                              CPI     '0'     ;TEST IF ZERO OR GREATER
 5411/1B0E : D8                                 RC              ;RETURN IF LESS THAN ZERO
 5412/1B0F : FE 39                              CPI     '9'     ;TEST IF 9 OR LESS
 5413/1B11 : C8                         NUMEN:  RZ              ;RETURN IF 9
 5414/1B12 : D0                                 RNC             ;RETURN IF NOT NUMERIC
 5415/1B13 : BF                                 CMP     A       ;SET Z
 5416/1B14 : C9                                 RET             ;RETURN
 5417/1B15 :                            ;
 5418/1B15 : =1B15H                     SEARC   EQU     $
 5419/1B15 :                            ;
 5420/1B15 :                            ; SEARCHES FOR THE VARIABLE IN D,E
 5421/1B15 :                            ; RETURNS WITH ADDR OF DATA AREA FOR VARIABLE
 5422/1B15 :                            ;
 5423/1B15 : E5                                 PUSH    H       ;SAVE H,L
 5424/1B16 : 3A 88 82                           LDA     FNMOD   ;GET FUNCTION MODE
 5425/1B19 : B7                                 ORA     A       ;TEST IT
 5426/1B1A : C2 70 1B                           JNZ     SCH6    ;BRIF IN A FUNCTION
 5427/1B1D : 2A 91 82                   SCH0:   LHLD    DATAB   ;GET ADDR OF DATA POOL
 5428/1B20 : 7E                         SCH1:   MOV     A,M     ;GET THE BYTE
 5429/1B21 : B7                                 ORA     A       ;TEST IF END
 5430/1B22 : CA 46 1B                           JZ      SCH3    ;BRIF END
 5431/1B25 : 2B                                 DCX     H       ;POINT NEXT
 5432/1B26 : 2B                                 DCX     H       ;DITTO
 5433/1B27 : 46                                 MOV     B,M     ;GET HI LEN
 5434/1B28 : 2B                                 DCX     H       ;POINT NEXT
 5435/1B29 : 4E                                 MOV     C,M     ;GET LO LEN
 5436/1B2A : =>TRUE                     	IF ROMSTRT = 0
 5437/1B2A : E7                         		RST     4       ;ADJUST H,L
 5438/1B2B : =>FALSE                    	ELSE
 5439/1B2B :                            		CALL	RST4	;ADJUST H,L
 5440/1B2B : [5436]                     	ENDIF
 5441/1B2B : 03                                 DB      3
 5442/1B2C : 7E                                 MOV     A,M     ;LOAD 1ST CHAR
 5443/1B2D : BA                                 CMP     D       ;COMPARE 1ST CHAR
 5444/1B2E : C2 42 1B                           JNZ     SCH2    ;BRIF NOT EQUAL
 5445/1B31 : 2B                                 DCX     H       ;POINT NEXT
 5446/1B32 : 7E                                 MOV     A,M     ;LOAD 2ND DIGIT
 5447/1B33 : 23                                 INX     H       ;POINT BACK
 5448/1B34 : BB                                 CMP     E       ;COMPARE 2ND CHAR
 5449/1B35 : C2 42 1B                           JNZ     SCH2    ;BRIF NOT EQUAL
 5450/1B38 : 7A                                 MOV     A,D     ;GET HI NAME
 5451/1B39 : B7                                 ORA     A       ;TEST IT
 5452/1B3A : FA A5 1B                           JM      SCH9    ;RETURN IF MATRIX
 5453/1B3D : 09                                 DAD     B       ;POINT NEXT ENTRY
 5454/1B3E : 23                                 INX     H       ;PLUS ONE
 5455/1B3F : EB                                 XCHG            ;FLIP/FLOP
 5456/1B40 : E1                                 POP     H       ;RESTORE H
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 92 - 9/26/2024 16:17:21


 5457/1B41 : C9                                 RET             ;RETURN
 5458/1B42 : 09                         SCH2:   DAD     B       ;MINUS LEN
 5459/1B43 : C3 20 1B                           JMP     SCH1    ;LOOP
 5460/1B46 : 72                         SCH3:   MOV     M,D     ;PUT 1ST CHAR
 5461/1B47 : 2B                                 DCX     H       ;POINT NEXT
 5462/1B48 : 73                                 MOV     M,E     ;PUT 2ND CHAR
 5463/1B49 : 2B                                 DCX     H       ;POINT NEXT
 5464/1B4A : 7A                                 MOV     A,D     ;GET HI NAME
 5465/1B4B : B7                                 ORA     A       ;TEST IT
 5466/1B4C : FA 84 1B                           JM      SCH7    ;BRIF ARRAY
 5467/1B4F : 36 FF                              MVI     M,0FFH  ;HI LEN
 5468/1B51 : 2B                                 DCX     H       ;POINT NEXT
 5469/1B52 : 7B                                 MOV     A,E     ;GET LO NAME
 5470/1B53 : B7                                 ORA     A       ;TEST TYPE
 5471/1B54 : FA 5E 1B                           JM      SCH4    ;BRIF CHAR
 5472/1B57 : 36 F8                              MVI     M,0F8H  ;LO LEN
 5473/1B59 : 06 04                              MVI     B,4     ;LOOP CTR
 5474/1B5B : C3 62 1B                           JMP     SCH5    ;BRARND
 5475/1B5E : 36 FB                      SCH4:   MVI     M,0FBH  ;LO LEN
 5476/1B60 : 06 01                              MVI     B,1     ;LOOP CTR
 5477/1B62 : 2B                         SCH5:   DCX     H       ;POINT NEXT
 5478/1B63 : 36 00                              MVI     M,0     ;ZERO THE VALUE
 5479/1B65 : 05                                 DCR     B       ;DECR CTR
 5480/1B66 : C2 62 1B                           JNZ     SCH5    ;LOOP
 5481/1B69 : 2B                                 DCX     H       ;POINT NEXT
 5482/1B6A : 36 00                              MVI     M,0     ;MARK NEW END
 5483/1B6C : 23                                 INX     H       ;POINT ADDR OF VARIABLE
 5484/1B6D : EB                                 XCHG            ;PUT LOCATION TO D,E
 5485/1B6E : E1                                 POP     H       ;RESTORE H,L
 5486/1B6F : C9                                 RET             ;RETURN
 5487/1B70 : 21 6C 82                   SCH6:   LXI     H,FNARG ;POINT DUMMY ARG
 5488/1B73 : 7E                                 MOV     A,M     ;LOAD 1ST CHAR
 5489/1B74 : BA                                 CMP     D       ;COMPARE
 5490/1B75 : C2 1D 1B                           JNZ     SCH0    ;BRIF NOT EQUAL
 5491/1B78 : 23                                 INX     H       ;POINT NEXT
 5492/1B79 : 7E                                 MOV     A,M     ;LOAD 2ND CHAR
 5493/1B7A : BB                                 CMP     E       ;COMPARE
 5494/1B7B : C2 1D 1B                           JNZ     SCH0    ;BRIF NOT EQUAL
 5495/1B7E : 23                                 INX     H       ;POINT NEXT
 5496/1B7F : 56                                 MOV     D,M     ;GET HI ADDR
 5497/1B80 : 23                                 INX     H       ;POINT NEXT
 5498/1B81 : 5E                                 MOV     E,M     ;GET LO ADDR
 5499/1B82 : E1                                 POP     H       ;RESTORE H,L
 5500/1B83 : C9                                 RET             ;RETURN
 5501/1B84 : E5                         SCH7:   PUSH    H       ;SAVE ADDRESS
 5502/1B85 : 36 FE                              MVI     M,0FEH  ;MOVE HI DISP
 5503/1B87 : 2B                                 DCX     H       ;POINT NEXT
 5504/1B88 : 36 14                              MVI     M,14H   ;MOVE LO DISP
 5505/1B8A : 2B                                 DCX     H
 5506/1B8B : 36 00                              MVI     M,0     ;MOVE A ZERO
 5507/1B8D : 2B                                 DCX     H       ;POINT NEXT
 5508/1B8E : 36 0A                              MVI     M,10    ;MOVE 10
 5509/1B90 : 2B                                 DCX     H       ;POINT NEXT
 5510/1B91 : 36 00                              MVI     M,0     ;MOVE A ZERO
 5511/1B93 : 2B                                 DCX     H       ;POINT NEXT
 5512/1B94 : 36 0A                              MVI     M,10    ;MOVE A 10 (DEFAULT IS 10 X 10)
 5513/1B96 : 01 E5 01                           LXI     B,485   ;TOTAL # OF BYTES TAKEN BY ARRAY
 5514/1B99 : 2B                         SCH8:   DCX     H       ;POINT NEXT
 5515/1B9A : 36 00                              MVI     M,0     ;CLEAR ONE BYTE
 5516/1B9C : 0B                                 DCX     B       ;DCR CTR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 93 - 9/26/2024 16:17:21


 5517/1B9D : 78                                 MOV     A,B     ;GET HI
 5518/1B9E : B1                                 ORA     C       ;PLUS LO
 5519/1B9F : C2 99 1B                           JNZ     SCH8    ;LOOP
 5520/1BA2 : E1                                 POP     H       ;RESTORE PTR TO START
 5521/1BA3 : 23                                 INX     H       ;POINT LO NAME
 5522/1BA4 : 23                                 INX     H       ;POINT HI NAME
 5523/1BA5 : C1                         SCH9:   POP     B       ;NEED TO XCHANGE LAST 2 STACK ENTRIES
 5524/1BA6 : D1                                 POP     D       ;SO DOIT
 5525/1BA7 : C5                                 PUSH    B
 5526/1BA8 : D5                                 PUSH    D
 5527/1BA9 : C9                                 RET             ;RETURN
 5528/1BAA :                            ;
 5529/1BAA : =1BAAH                     VAR     EQU     $
 5530/1BAA :                            ;
 5531/1BAA :                            ;
 5532/1BAA :                            ; TEST (H,L) FOR A VARIABLE NAME
 5533/1BAA :                            ; PUTS THE NAME IN D,E IF FOUND
 5534/1BAA :                            ; ERROR SN IF NONE FOUND
 5535/1BAA :                            ;
 5536/1BAA : =>TRUE                     	IF ROMSTRT = 0
 5537/1BAA : CF                                 RST     1       ;SKIP TO NON BLANK
 5538/1BAB : =>FALSE                    	ELSE
 5539/1BAB :                            		CALL	RST1	;CALL TO RAM ADDRESS
 5540/1BAB : [5536]                     	ENDIF
 5541/1BAB : CD 02 1B                           CALL    ALPHA   ;TEST IF ALPHA
 5542/1BAE : C2 F0 1B                           JNZ     SNERR   ;BRIF NOT ALPHA
 5543/1BB1 : 57                                 MOV     D,A     ;FIRST CHAR
 5544/1BB2 : 1E 20                              MVI     E,' '   ;DEFAULT
 5545/1BB4 : 23                                 INX     H       ;POINT NEXT
 5546/1BB5 : =>TRUE                     	IF ROMSTRT = 0
 5547/1BB5 : CF                                 RST     1       ;GET 2ND CHAR
 5548/1BB6 : =>FALSE                    	ELSE
 5549/1BB6 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 5550/1BB6 : [5546]                     	ENDIF
 5551/1BB6 : CD 0B 1B                           CALL    NUMER   ;TEST IF NUMERIC
 5552/1BB9 : C2 BF 1B                           JNZ     VAR2    ;BRIF NOT NUMERIC
 5553/1BBC : 5F                                 MOV     E,A     ;SAVE 2ND CHAR
 5554/1BBD : 23                                 INX     H       ;POINT NEXT
 5555/1BBE : =>TRUE                     	IF ROMSTRT = 0
 5556/1BBE : CF                                 RST     1       ;SKIP TO NON BLANK
 5557/1BBF : =>FALSE                    	ELSE
 5558/1BBF :                            		CALL	RST1	;CALL TO RAM ADDRESS
 5559/1BBF : [5555]                     	ENDIF
 5560/1BBF : FE 24                      VAR2:   CPI     '$'     ;TEST IF STRING
 5561/1BC1 : C2 CA 1B                           JNZ     VAR3    ;BRIF NOT
 5562/1BC4 : 7B                                 MOV     A,E     ;GET 2ND CHAR
 5563/1BC5 : F6 80                              ORI     80H     ;SET TYPE
 5564/1BC7 : 5F                                 MOV     E,A     ;SAVE IT
 5565/1BC8 : 23                                 INX     H       ;SKIP $
 5566/1BC9 : C9                                 RET             ;THEN RETURN
 5567/1BCA : FE 28                      VAR3:   CPI     '('     ;TEST IF ARRAY
 5568/1BCC : C0                                 RNZ             ;RETURN IF NOT
 5569/1BCD : 7A                                 MOV     A,D     ;GET HI NAME
 5570/1BCE : F6 80                              ORI     80H     ;TURN ON D7
 5571/1BD0 : 57                                 MOV     D,A     ;RESTORE
 5572/1BD1 : C9                                 RET             ;RETURN
 5573/1BD2 :                            ;
 5574/1BD2 : =1BD2H                     PRLIN   EQU     $
 5575/1BD2 :                            ;
 5576/1BD2 :                            ; PRINTS LINE NUMBER FOLLOWED BY CR/LF
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 94 - 9/26/2024 16:17:21


 5577/1BD2 :                            ;
 5578/1BD2 : 11 77 80                           LXI     D,LINEN ;POINT AREA
 5579/1BD5 : 2A 89 82                           LHLD    LINE    ;GET ADDR OF LINE NUMBER
 5580/1BD8 : CD EA 19                           CALL    LINEO   ;GO UNPACK
 5581/1BDB : EB                                 XCHG            ;PUT TO H,L
 5582/1BDC : 36 00                              MVI     M,0     ;END OF MSG
 5583/1BDE : 21 77 80                           LXI     H,LINEN ;POINT AREA
 5584/1BE1 : C3 9E 19                           JMP     TERMM   ;GO PRINT IT
 5585/1BE4 :                            ;
 5586/1BE4 :                            ; ERROR MESSAGE ROUTINES
 5587/1BE4 :                            ; FATAL ERROR MUST BE FIRST
 5588/1BE4 :                            ;
 5589/1BE4 : =0FEH                      EM      EQU     0FEH
 5590/1BE4 :                            ;
 5591/1BE4 :                            ULERR:
 5592/1BE4 : =>TRUE                     	IF ROMSTRT = 0
 5593/1BE4 : F7                         		RST     6       ;CALL ERROR ROUTINE
 5594/1BE5 : 55 4C FE F7                        DB      "UL",EM,FATAL   ;NOTE FATAL = CODE FOR RST 6
 5595/1BE9 : =1BE8H                     ZMERR   EQU     $-1             ;LOG(X<=0),SQR(-X),0 DIVIDE
 5596/1BE9 : 4F 46 FE F7                        DB      "OF",EM,FATAL
 5597/1BED : =1BECH                     STERR   EQU     $-1             ;ERROR IN EXPRESSION STACK
 5598/1BED : 53 54 FE F7                        DB      "ST",EM,FATAL
 5599/1BF1 : =1BF0H                     SNERR   EQU     $-1             ;DELIMITER ERROR
 5600/1BF1 : 53 4E FE F7                        DB      "SN",EM,FATAL
 5601/1BF5 : =1BF4H                     RTERR   EQU     $-1             ;RETURN & NO GOSUB
 5602/1BF5 : 52 54 FE F7                        DB      "RT",EM,FATAL
 5603/1BF9 : =1BF8H                     DAERR   EQU     $-1             ;OUT OF DATA
 5604/1BF9 : 44 41 FE F7                        DB      "DA",EM,FATAL
 5605/1BFD : =1BFCH                     NXERR   EQU     $-1             ;NEXT & NO FOR / >8 FOR'S
 5606/1BFD : 4E 58 FE F7                        DB      "NX",EM,FATAL
 5607/1C01 : =1C00H                     CVERR   EQU     $-1             ;CONVERSION ERROR
 5608/1C01 : 43 56 FE F7                        DB      "CV",EM,FATAL
 5609/1C05 : =1C04H                     CKERR   EQU     $-1             ;CHECKSUM ERROR
 5610/1C05 : 43 4B FE F7                        DB      "CK",EM,FATAL
 5611/1C09 : =>FALSE                    	ELSE
 5612/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5613/1C09 :                                    DB      "UL",EM
 5614/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5615/1C09 :                            ZMERR   EQU     $-3             ;LOG(X<=0),SQR(-X),0 DIVIDE
 5616/1C09 :                                    DB      "OF",EM
 5617/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5618/1C09 :                            STERR   EQU     $-3             ;ERROR IN EXPRESSION STACK
 5619/1C09 :                                    DB      "ST",EM
 5620/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5621/1C09 :                            SNERR   EQU     $-3             ;DELIMITER ERROR
 5622/1C09 :                                    DB      "SN",EM
 5623/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5624/1C09 :                            RTERR   EQU     $-3             ;RETURN & NO GOSUB
 5625/1C09 :                                    DB      "RT",EM
 5626/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5627/1C09 :                            DAERR   EQU     $-3             ;OUT OF DATA
 5628/1C09 :                                    DB      "DA",EM
 5629/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5630/1C09 :                            NXERR   EQU     $-3             ;NEXT & NO FOR / >8 FOR'S
 5631/1C09 :                                    DB      "NX",EM
 5632/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5633/1C09 :                            CVERR   EQU     $-3             ;CONVERSION ERROR
 5634/1C09 :                                    DB      "CV",EM
 5635/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5636/1C09 :                            CKERR   EQU     $-3             ;CHECKSUM ERROR
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 95 - 9/26/2024 16:17:21


 5637/1C09 :                                    DB      "CK",EM
 5638/1C09 :                            		CALL	RST6			;CALL ERROR ROUTINE
 5639/1C09 : [5592]                     	ENDIF
 5640/1C09 :                            ;
 5641/1C09 :                            ; NON-FATAL ERRORS
 5642/1C09 :                            ;
 5643/1C09 : =1C08H                     OVERR   EQU     $-1             ;OVERFLOW ERROR
 5644/1C09 : 4F 56 FE                           DB      "OV",EM
 5645/1C0C : C9                                 RET                     ;RETURN TO ROUTINE
 5646/1C0D :                            UNERR:
 5647/1C0D : =>TRUE                     	IF ROMSTRT = 0
 5648/1C0D : F7                         		RST     6       ;CALL ERROR ROUTINE
 5649/1C0E : =>FALSE                    	ELSE
 5650/1C0E :                            		CALL	RST6	;CALL ERROR ROUTINE
 5651/1C0E : [5647]                     	ENDIF
 5652/1C0E : 55 4E FE                           DB      "UN",EM
 5653/1C11 : C9                                 RET
 5654/1C12 :                            ;
 5655/1C12 :                            ; CONTINUATION OF ERROR MESSAGE ROUTINE (RST 6)
 5656/1C12 :                            ;
 5657/1C12 : CD 9E 19                   ERROR:  CALL    TERMM   ;PRINT 'XX'
 5658/1C15 : E5                                 PUSH    H       ;SAVE RETURN
 5659/1C16 : 21 3E 1E                           LXI     H,ERRMS ;PRINT 'ERROR IN LINE'
 5660/1C19 : CD 9E 19                           CALL    TERMM
 5661/1C1C : CD D2 1B                           CALL    PRLIN   ;PRINT LINE #
 5662/1C1F : E1                                 POP     H
 5663/1C20 : 23                                 INX     H       ;RETURN ADDRESS
 5664/1C21 : 7E                                 MOV     A,M     ;GET INSTRUCTION
 5665/1C22 : FE F7                              CPI     FATAL   ;IS IT AN RST 6?
 5666/1C24 : CA CF 01                           JZ      KEY     ;IF ZERO, YES, ABORT
 5667/1C27 : C1                                 POP     B       ;RESTORE REGISTERS
 5668/1C28 : D1                                 POP     D
 5669/1C29 : F1                                 POP     PSW
 5670/1C2A : E3                                 XTHL
 5671/1C2B : C9                                 RET
 5672/1C2C :                                    ;
 5673/1C2C :                            ;
 5674/1C2C :                            ; MOVE THE STRING FROM (D,E) TO (H,L) COUNT IN B
 5675/1C2C :                            ;
 5676/1C2C :                            ;
 5677/1C2C : 06 04                      CPY4D:  MVI     B,4
 5678/1C2E : 1A                         COPYD:  LDAX    D       ;GET A BYTE
 5679/1C2F : 77                                 MOV     M,A     ;MOVE IT
 5680/1C30 : 23                                 INX     H       ;POINT NEXT
 5681/1C31 : 13                                 INX     D       ;DITTO
 5682/1C32 : 05                                 DCR     B       ;DECR CTR
 5683/1C33 : C2 2E 1C                           JNZ     COPYD   ;LOOP
 5684/1C36 : C9                                 RET             ;THEN RETURN
 5685/1C37 :                            ;
 5686/1C37 :                            ;
 5687/1C37 :                            ; MOVE THE STRING FROM (H,L) TO (D,E) COUNT IN B
 5688/1C37 :                            ;
 5689/1C37 :                            ;
 5690/1C37 : 06 04                      CPY4H:  MVI     B,4
 5691/1C39 : EB                         COPYH:  XCHG            ;FLIP/FLOP
 5692/1C3A : CD 2E 1C                           CALL    COPYD   ;GO COPY
 5693/1C3D : EB                                 XCHG            ;FLIP/FLOP BACK
 5694/1C3E : C9                                 RET             ;RETURN
 5695/1C3F :                            ;
 5696/1C3F : =1C3FH                     ZEROM   EQU     $
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 96 - 9/26/2024 16:17:21


 5697/1C3F :                            ;
 5698/1C3F :                            ; MOVES A STRING OF BINARY ZEROS, COUNT IN B
 5699/1C3F :                            ;
 5700/1C3F : 36 00                              MVI     M,0     ;MOVE A ZERO
 5701/1C41 : 23                                 INX     H       ;POINT NEXT
 5702/1C42 : 05                                 DCR     B       ;DECR CTR
 5703/1C43 : C2 3F 1C                           JNZ     ZEROM   ;LOOP
 5704/1C46 : C9                                 RET             ;RETURN
 5705/1C47 :                            ;
 5706/1C47 : =1C47H                     FBIN    EQU     $
 5707/1C47 :                            ;
 5708/1C47 :                            ;
 5709/1C47 :                            ; CONVERT FLOAT ACC TO UNSIGNED BINARY NUMBER IN A REG
 5710/1C47 :                            ; RETURNS 0 IN A REG IF FACC<0 OR FACC>255
 5711/1C47 :                            ;
 5712/1C47 :                            ;
 5713/1C47 : E5                                 PUSH    H       ;SAVE H,L
 5714/1C48 : D5                                 PUSH    D       ;SAVE D,E
 5715/1C49 : CD 30 1F                           CALL    FACDE   ;CONVERT FACC TO D,E
 5716/1C4C : AF                                 XRA     A       ;ZERO A
 5717/1C4D : B2                                 ORA     D       ;TEST HIGH VALUE
 5718/1C4E : C2 52 1C                           JNZ     FBIN1   ;BRIF NOT ZERO
 5719/1C51 : 7B                                 MOV     A,E     ;VALUE TO A
 5720/1C52 : D1                         FBIN1:  POP     D       ;RESTORE D,E
 5721/1C53 : E1                                 POP     H       ;RESTORE H,L
 5722/1C54 : C9                                 RET             ;RETURN
 5723/1C55 :                            ;
 5724/1C55 : =1C55H                     ARG     EQU     $
 5725/1C55 :                            ;
 5726/1C55 :                            ; GET NEXT ARGUMENT FROM POLISH STACK
 5727/1C55 :                            ;
 5728/1C55 : 2A 52 82                           LHLD    ADDR1   ;GET ADDRESS
 5729/1C58 : 23                                 INX     H       ;POINT NEXT
 5730/1C59 : 56                                 MOV     D,M     ;GET HI ADDRESS
 5731/1C5A : 23                                 INX     H       ;POINT NEXT
 5732/1C5B : 5E                                 MOV     E,M     ;GET LO ADDRESS
 5733/1C5C : 23                                 INX     H       ;POINT TYPE
 5734/1C5D : 22 52 82                           SHLD    ADDR1   ;GET ADDRESS
 5735/1C60 : 2B                                 DCX     H       ;POINT BACK
 5736/1C61 : C3 5A 13                           JMP     EVLD    ;CALL EVLOAD AND RETURN
 5737/1C64 :                            ;
 5738/1C64 :                            ;
 5739/1C64 : =1C64H                     ARGNU   EQU     $
 5740/1C64 :                            ;
 5741/1C64 : CD 55 1C                           CALL    ARG     ;GET ARGUMENT
 5742/1C67 : C3 47 1C                           JMP     FBIN    ;THEN CONVERT FACC TO BIN
 5743/1C6A :                            ;
 5744/1C6A : =1C6AH                     BINFL   EQU     $
 5745/1C6A :                            ;
 5746/1C6A :                            ; CONVERT D,E TO FLOATING POINT NUMBER IN FAC
 5747/1C6A :                            ;
 5748/1C6A :                            ;
 5749/1C6A : 21 58 82                           LXI     H,FACC  ;POINT ACC
 5750/1C6D : 36 18                              MVI     M,24    ;MAX BITS
 5751/1C6F : 23                                 INX     H       ;POINT NEXT
 5752/1C70 : 36 00                              MVI     M,0     ;CLEAR MSB
 5753/1C72 : 23                                 INX     H       ;POINT NEXT
 5754/1C73 : 72                                 MOV     M,D     ;MOVE MID
 5755/1C74 : 23                                 INX     H       ;POINT NEXT
 5756/1C75 : 73                                 MOV     M,E     ;MOVE LSB
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 97 - 9/26/2024 16:17:21


 5757/1C76 : C3 B4 16                           JMP     FNORM   ;GO NORMALIZE & RETURN
 5758/1C79 :                            ;
 5759/1C79 :                            ; FUNCTION TABLE. FORMAT IS:
 5760/1C79 :                            ;     DB <LITERAL>,0
 5761/1C79 :                            ;     DW <ADDRESS>
 5762/1C79 :                            ;     DB <FUNCTION TYPE>
 5763/1C79 :                            ;
 5764/1C79 :                            ; TABLE IS TERMINATED WITH A '00'
 5765/1C79 :                            ;
 5766/1C79 : =1C79H                     FUNCT   EQU     $
 5767/1C79 : 41 42 53 00                        DB      "ABS",0
 5768/1C7D : 9E 0B                              DW      ABS
 5769/1C7F : AB                                 DB      0ABH
 5770/1C80 : 53 51 52 00                        DB      "SQR",0
 5771/1C84 : FE 0B                              DW      SQR
 5772/1C86 : AB                                 DB      0ABH
 5773/1C87 : 49 4E 54 00                        DB      "INT",0
 5774/1C8B : B9 0B                              DW      INT
 5775/1C8D : AB                                 DB      0ABH
 5776/1C8E : 53 47 4E 00                        DB      "SGN",0
 5777/1C92 : A7 0B                              DW      SGN
 5778/1C94 : AB                                 DB      0ABH
 5779/1C95 :                            
 5780/1C95 :                            ;        DB      "AND",0
 5781/1C95 :                            ;        DW      LOGAND
 5782/1C95 :                            ;        DB      0ABH
 5783/1C95 :                            
 5784/1C95 :                            ;        DB      "OR",0
 5785/1C95 :                            ;        DW      LOGOR
 5786/1C95 :                            ;        DB      0ABH
 5787/1C95 :                            
 5788/1C95 : 52 4E 44 00                RNDLI:  DB      "RND",0
 5789/1C99 : 5B 0C                              DW      RND
 5790/1C9B : AB                                 DB      0ABH
 5791/1C9C : 53 49 4E 00                        DB      "SIN",0
 5792/1CA0 : 18 0A                              DW      SIN
 5793/1CA2 : AB                                 DB      0ABH
 5794/1CA3 : 43 4F 53 00                        DB      "COS",0
 5795/1CA7 : 8A 0A                              DW      COS
 5796/1CA9 : AB                                 DB      0ABH
 5797/1CAA : 54 41 4E 00                        DB      "TAN",0
 5798/1CAE : 93 0A                              DW      TAN
 5799/1CB0 : AB                                 DB      0ABH
 5800/1CB1 : 41 54 4E 00                        DB      "ATN",0
 5801/1CB5 : AB 0A                              DW      ATN
 5802/1CB7 : AB                                 DB      0ABH
 5803/1CB8 : 49 4E 50 00                        DB      "INP",0
 5804/1CBC : E1 0C                              DW      INP
 5805/1CBE : AB                                 DB      0ABH
 5806/1CBF : 4C 4E 00                           DB      "LN",0
 5807/1CC2 : EA 0A                              DW      LN
 5808/1CC4 : AB                                 DB      0ABH
 5809/1CC5 : 4C 4F 47 00                        DB      "LOG",0
 5810/1CC9 : 38 0B                              DW      LOG
 5811/1CCB : AB                                 DB      0ABH
 5812/1CCC : 45 58 50 00                        DB      "EXP",0
 5813/1CD0 : 41 0B                              DW      EXP
 5814/1CD2 : AB                                 DB      0ABH
 5815/1CD3 : 50 4F 53 00                        DB      "POS",0
 5816/1CD7 : F7 0C                              DW      POS
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 98 - 9/26/2024 16:17:21


 5817/1CD9 : AB                                 DB      0ABH
 5818/1CDA : 4C 45 4E 00                        DB      "LEN",0
 5819/1CDE : 60 0D                              DW      LENFN
 5820/1CE0 : AB                                 DB      0ABH
 5821/1CE1 : 43 48 52 24 00                     DB      "CHR$",0
 5822/1CE6 : 66 0D                              DW      CHRFN
 5823/1CE8 : CB                                 DB      0CBH
 5824/1CE9 : 41 53 43 49 49 00                  DB      "ASCII",0
 5825/1CEF : 71 0D                              DW      ASCII
 5826/1CF1 : AB                                 DB      0ABH
 5827/1CF2 : 4E 55 4D 24 00                     DB      "NUM$",0
 5828/1CF7 : 7E 0D                              DW      NUMFN
 5829/1CF9 : CB                                 DB      0CBH
 5830/1CFA : 56 41 4C 00                        DB      "VAL",0
 5831/1CFE : 91 0D                              DW      VAL
 5832/1D00 : AB                                 DB      0ABH
 5833/1D01 : 53 50 41 43 45 24 00               DB      "SPACE$",0
 5834/1D08 : B8 0D                              DW      SPACE
 5835/1D0A : CB                                 DB      0CBH
 5836/1D0B : 53 54 52 49 4E 47 24 00            DB      "STRING$",0
 5837/1D13 : C8 0D                              DW      STRFN
 5838/1D15 : D3                                 DB      0D3H
 5839/1D16 : 4C 45 46 54 24 00                  DB      "LEFT$",0
 5840/1D1C : DC 0D                              DW      LEFT
 5841/1D1E : D3                                 DB      0D3H
 5842/1D1F : 52 49 47 48 54 24 00               DB      "RIGHT$",0
 5843/1D26 : E5 0D                              DW      RIGHT
 5844/1D28 : D3                                 DB      0D3H
 5845/1D29 : 4D 49 44 24 00                     DB      "MID$",0
 5846/1D2E : EE 0D                              DW      MIDFN
 5847/1D30 : DB                                 DB      0DBH
 5848/1D31 : 49 4E 53 54 52 00                  DB      "INSTR",0
 5849/1D37 : 28 0E                              DW      INSTR
 5850/1D39 : BB                                 DB      0BBH
 5851/1D3A : 50 45 45 4B 00                     DB      "PEEK",0
 5852/1D3F : 4A 20                              DW      PEEK
 5853/1D41 : AB                                 DB      0ABH
 5854/1D42 : =>TRUE                     	IF      LARGE = 1
 5855/1D42 : 00 00 00 00                        DB      0,0,0,0 ;ROOM FOR ONE MORE FUNCTION
 5856/1D46 : 00 00 00 00                        DB      0,0,0,0
 5857/1D4A : [5854]                     	ENDIF
 5858/1D4A : 00                                 DB      0       ;END OF FUNCTION TABLE
 5859/1D4B :                            ;
 5860/1D4B :                            ; PROGRAM CONSTANTS
 5861/1D4B :                            ;
 5862/1D4B : 13 14 00                   PCHOF:  DB      19,20,0
 5863/1D4E : 3F FD                      RNDP:   DB      3FH,0FDH        ;16381
 5864/1D50 : 3F EB                              DB      3FH,0EBH        ;16363
 5865/1D52 : 3F DD                              DB      3FH,0DDH        ;16349
 5866/1D54 : 1B EC                      NRNDX:  DB      1BH,0ECH
 5867/1D56 : 33 D3                              DB      33H,0D3H
 5868/1D58 : 1A 85                              DB      1AH,85H
 5869/1D5A : 2B 1E                              DB      2BH,1EH
 5870/1D5C : 57 48 41 54 00             WHATL:  DB      "WHAT",0
 5871/1D61 : =1D61H                     VERS    EQU     $       ;VERSION MESSAGE
 5872/1D61 : =>TRUE                     	IF LARGE = 1
 5873/1D61 : 0D 0A 42 41 53 49 43 20 39         DB      0DH,0AH,"BASIC 9K VERS 1.42 "
      1D6A : 4B 20 56 45 52 53 20 31 2E
      1D73 : 34 32 20                  
 5874/1D76 : =>FALSE                    	IF ACIA = 1
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 99 - 9/26/2024 16:17:21


 5875/1D76 :                            		DB		"(6850 ACIA)"
 5876/1D76 : =>TRUE                     	ELSE
 5877/1D76 : 28 38 32 35 31 20 55 41 52 		DB		"(8251 UART)"
      1D7F : 54 29                     
 5878/1D81 : [5874]                     	ENDIF
 5879/1D81 : 00                         		DB		0
 5880/1D82 : 08 20 08 FE                RBOUT:  DB      08H,20H,08H,0FEH ;RUBOUT SEQUENCE (9K ONLY)
 5881/1D86 : =>FALSE                    	ELSE
 5882/1D86 :                                    DB      0DH,0AH,"BASIC 8K VERS 1.42 "
 5883/1D86 :                            	IF ACIA = 1
 5884/1D86 :                            		DB		"(6850 ACIA)"
 5885/1D86 :                            	ELSE
 5886/1D86 :                            		DB		"(8251 UART)"
 5887/1D86 : [5883]                     	ENDIF
 5888/1D86 :                            		DB		0
 5889/1D86 : [5872]                     	ENDIF
 5890/1D86 : 4C 49 4E 45 00             LLINE:  DB      "LINE",0
 5891/1D8B : 54 41 42 00                TABLI:  DB      "TAB",0
 5892/1D8F : 53 54 45 50 00             STEPL:  DB      "STEP",0
 5893/1D94 : 54 48 45 4E 00             THENL:  DB      "THEN",0
 5894/1D99 : 50 49 00                   PILIT:  DB      "PI",0
 5895/1D9C : 02 80 00 00                TWO:    DB      02H,80H,00H,00H    ;CONSTANT:  2
 5896/1DA0 : 04 A0 00 00                TEN:    DB      04H,0A0H,00H,00H   ;CONSTANT:  10
 5897/1DA4 : 02 C9 0F D7                PI:     DB      02H,0C9H,0FH,0D7H  ;CONSTANT:  3.141593
 5898/1DA8 : 00 C9 0F D7                QTRPI:  DB      00H,0C9H,0FH,0D7H  ;CONSTANT:  0.7853892
 5899/1DAC : 80 FF FF FF                NEGON:  DB      80H,0FFH,0FFH,0FFH ;CONSTANT: -0.9999999
 5900/1DB0 : 00 B1 72 16                LN2C:   DB      00H,0B1H,72H,16H   ;CONSTANT:  0.6931472
 5901/1DB4 : 00 97 14 EB                SQC1:   DB      00H,97H,14H,0EBH   ;CONSTANT:  0.59016206
 5902/1DB8 : 7F D5 A9 56                SQC2:   DB      7FH,0D5H,0A9H,56H  ;CONSTANT:  0.41730759
 5903/1DBC :                            ;
 5904/1DBC :                            ; THE FOLLOWING CONSTANTS MUST BE IN THIS ORDER ***********
 5905/1DBC :                            ;
 5906/1DBC :                            ;       CONSTANT WITH EXPONENT OF 1
 5907/1DBC :                            ;       COEFFICIENT OF FIRST TERM
 5908/1DBC :                            ;       ...
 5909/1DBC :                            ;       COEEFICIENT OF NTH TERM
 5910/1DBC :                            ;
 5911/1DBC :                            ; SINCE ALL COEFFICIENTS ARE LESS THAN 1,
 5912/1DBC :                            ; THE ITERATION LOOP USES THE
 5913/1DBC :                            ; CONSTANT WITH EXPONENT 1 TO TERMINATE THE EVALUATION.
 5914/1DBC :                            ;
 5915/1DBC : 01 B5 04 F3                SQC3:   DB      01H,0B5H,04H,0F3H    ;CONSTANT:  1.41421356
 5916/1DC0 : FF AA 95 BC                        DB      0FFH,0AAH,95H,0BCH   ;CONSTANT: -0.3331738
 5917/1DC4 : 7E CA D5 20                        DB      7EH,0CAH,0D5H,20H    ;CONSTANT:  0.1980787
 5918/1DC8 : FE 87 82 D6                        DB      0FEH,87H,82H,0D6H    ;CONSTANT: -0.1323351
 5919/1DCC : 7D A3 13 1C                        DB      7DH,0A3H,13H,1CH     ;CONSTANT:  0.07962632
 5920/1DD0 : FC 89 A6 B8                        DB      0FCH,89H,0A6H,0B8H   ;CONSTANT: -0.03360627
 5921/1DD4 : 79 DF 3A 9E                ATNCO:  DB      79H,0DFH,3AH,9EH     ;CONSTANT:  0.006812411
 5922/1DD8 :                            ;
 5923/1DD8 : 01 C9 0F D7                HALFP:  DB      01H,0C9H,0FH,0D7H    ;CONSTANT:  1.570796
 5924/1DDC : 80 A5 5D DE                        DB      80H,0A5H,5DH,0DEH    ;CONSTANT: -0.64596371
 5925/1DE0 : 7D A3 34 55                        DB      7DH,0A3H,34H,55H     ;CONSTANT:  0.076589679
 5926/1DE4 : F9 99 38 60                        DB      0F9H,99H,38H,60H     ;CONSTANT: -0.0046737656
 5927/1DE8 : 74 9E D7 B6                SINCO:  DB      74H,9EH,0D7H,0B6H    ;CONSTANT:  0.00015148419
 5928/1DEC :                            ;
 5929/1DEC : 01 80                      ONE:    DB      001H,080H
 5930/1DEE : 00 00                      NULLI:  DB      00H,00H              ;CONSTANT:  1.0
 5931/1DF0 : 00 FF FE C1                        DB      00H,0FFH,0FEH,0C1H   ;CONSTANT:  0.99998103
 5932/1DF4 : FF FF BA B0                        DB      0FFH,0FFH,0BAH,0B0H  ;CONSTANT: -0.4994712
 5933/1DF8 : 7F A8 0E 2B                        DB      7FH,0A8H,0EH,2BH     ;CONSTANT:  0.3282331
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 100 - 9/26/2024 16:17:21


 5934/1DFC : FE E7 4B 55                        DB      0FEH,0E7H,4BH,55H    ;CONSTANT: -0.2258733
 5935/1E00 : 7E 89 DE E3                        DB      7EH,89H,0DEH,0E3H    ;CONSTANT:  0.134693
 5936/1E04 : FC E1 C5 78                        DB      0FCH,0E1H,0C5H,078H  ;CONSTANT: -0.05511996
 5937/1E08 : 7A B0 3F AE                LNCO:   DB      7AH,0B0H,3FH,0AEH    ;CONSTANT:  0.01075737
 5938/1E0C :                            ;
 5939/1E0C : 01 B8 AA 3B                LN2E:   DB      001H,0B8H,0AAH,03BH  ;CONSTANT:  1.44269504
 5940/1E10 : 00 B1 6F E6                        DB      000H,0B1H,06FH,0E6H  ;C=.69311397
 5941/1E14 : 7E F6 2F 70                        DB      07EH,0F6H,02FH,070H  ;C=.24041548
 5942/1E18 : 7C E1 C2 AE                        DB      07CH,0E1H,0C2H,0AEH  ;C=.05511732
 5943/1E1C : 7A A0 BB 7E                        DB      07AH,0A0H,0BBH,07EH  ;C=.00981033
 5944/1E20 : 77 CA 09 CB                EXPCO:  DB      077H,0CAH,009H,0CBH  ;C=.00154143
 5945/1E24 :                            ;
 5946/1E24 : 7F DE 5B D0                LNC:    DB      07FH,0DEH,05BH,0D0H     ;C=LOG BASE 10 OF E
 5947/1E28 : =1E28H                     READY   EQU     $
 5948/1E28 : FD                                 DB      0FDH
 5949/1E29 : 52 45 41 44 59 00                  DB      "READY",0
 5950/1E2F : =1E2FH                     STOPM   EQU     $
 5951/1E2F : FD                                 DB      0FDH
 5952/1E30 : 53 54 4F 50 20 41 54 20 4C         DB      "STOP AT LINE ",0FEH
      1E39 : 49 4E 45 20 FE            
 5953/1E3E : 20 45 52 52 4F 52 20 49 4E ERRMS:  DB      " ERROR IN LINE ",0FEH
      1E47 : 20 4C 49 4E 45 20 FE      
 5954/1E4E :                            ;
 5955/1E4E :                            ; VERB (STATEMENT/COMMAND) TABLE
 5956/1E4E :                            ; FORMAT IS: DB 'VERB',0
 5957/1E4E :                            ;            DW ADDR
 5958/1E4E :                            ;            DB 'NEXT VERB',0
 5959/1E4E :                            ;            ETC
 5960/1E4E :                            ;  END OF TABLE IS MARKED BY DB 0
 5961/1E4E :                            ;
 5962/1E4E : =1E4EH                     JMPTB   EQU     $
 5963/1E4E : 4C 49 53 54 00                     DB      "LIST",0
 5964/1E53 : 39 02                              DW      LIST
 5965/1E55 : 52 55 4E 00                        DB      "RUN",0
 5966/1E59 : D2 01                              DW      RUNCM
 5967/1E5B : 58 45 51 00                        DB      "XEQ",0
 5968/1E5F : D7 01                              DW      XEQ
 5969/1E61 : 4E 45 57 00                        DB      "NEW",0
 5970/1E65 : 96 01                              DW      NEW
 5971/1E67 : 43 4F 4E 00                        DB      "CON",0
 5972/1E6B : C5 02                              DW      CONTI
 5973/1E6D : =>FALSE                    	IF IMSAI
 5974/1E6D :                                    DB      "TAPE",0
 5975/1E6D :                                    DW      TAPE
 5976/1E6D :                                    DB      "SAVE",0
 5977/1E6D :                                    DW      SAVE
 5978/1E6D :                            KEYL:   DB      "KEY",0
 5979/1E6D :                                    DW      KEY
 5980/1E6D : [5973]                     	ENDIF
 5981/1E6D : 46 52 45 00                        DB      "FRE",0
 5982/1E71 : AE 01                              DW      FREE
 5983/1E73 : 49 46 00                           DB      "IF",0
 5984/1E76 : C0 04                              DW      IFSTM
 5985/1E78 : 52 45 41 44 00                     DB      "READ",0
 5986/1E7D : B8 07                              DW      READ
 5987/1E7F : 52 45 53 54 4F 52 45 00            DB      "RESTORE",0
 5988/1E87 : ED 02                              DW      RESTO
 5989/1E89 : 44 41 54 41 00             DATAL:  DB      "DATA",0
 5990/1E8E : E9 01                              DW      RUN
 5991/1E90 : 46 4F 52 00                        DB      "FOR",0
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 101 - 9/26/2024 16:17:21


 5992/1E94 : BC 03                              DW      FOR
 5993/1E96 : 4E 45 58 54 00             NEXTL:  DB      "NEXT",0
 5994/1E9B : 69 06                              DW      NEXT
 5995/1E9D : 47 4F 53 55 42 00          GOSBL:  DB      "GOSUB",0
 5996/1EA3 : 11 03                              DW      GOSUB
 5997/1EA5 : 52 45 54 55 52 4E 00               DB      "RETURN",0
 5998/1EAC : F9 02                              DW      RETUR
 5999/1EAE : 49 4E 50 55 54 00                  DB      "INPUT",0
 6000/1EB4 : F8 06                              DW      INPUT
 6001/1EB6 : 50 52 49 4E 54 00                  DB      "PRINT",0
 6002/1EBC : 2C 03                              DW      PRINT
 6003/1EBE : 47 4F                      GOTOL:  DB      "GO"
 6004/1EC0 : 54 4F 00                   TOLIT:  DB      "TO",0
 6005/1EC3 : CD 02                              DW      GOTO
 6006/1EC5 : 4C 45 54 00                        DB      "LET",0
 6007/1EC9 : C8 05                              DW      LET
 6008/1ECB : 53 54 4F 50 00                     DB      "STOP",0
 6009/1ED0 : 49 08                              DW      STOP
 6010/1ED2 : 45 4E 44 00                        DB      "END",0
 6011/1ED6 : CC 01                              DW      ENDIT
 6012/1ED8 : 52 45 4D 00                        DB      "REM",0
 6013/1EDC : E9 01                              DW      RUN
 6014/1EDE : 21 00                              DB      "!",0
 6015/1EE0 : E9 01                              DW      RUN
 6016/1EE2 : 3F 00                              DB      "?",0
 6017/1EE4 : 2C 03                              DW      PRINT
 6018/1EE6 : 52 41 4E 44 4F 4D 49 5A 45         DB      "RANDOMIZE",0
      1EEF : 00                        
 6019/1EF0 : 76 08                              DW      RANDO
 6020/1EF2 : 4F 4E 00                           DB      "ON",0
 6021/1EF5 : 8C 08                              DW      ON
 6022/1EF7 : 4F 55 54 00                        DB      "OUT",0
 6023/1EFB : 21 08                              DW      OUTP
 6024/1EFD : 44 49 4D 00                        DB      "DIM",0
 6025/1F01 : 88 09                              DW      DIM
 6026/1F03 : 43 48 41 4E 47 45 00               DB      "CHANGE",0
 6027/1F0A : 01 09                              DW      CHANG
 6028/1F0C : 44 45 46                   DEFLI:  DB      "DEF"
 6029/1F0F : 46 4E 00                   FNLIT:  DB      "FN",0
 6030/1F12 : E9 01                              DW      RUN
 6031/1F14 : =>FALSE                    	IF      CPM = 1
 6032/1F14 :                                    DB      "DDT",0
 6033/1F14 :                                    DW      DDT
 6034/1F14 : [6031]                     	ENDIF
 6035/1F14 : 42 59 45 00                        DB      "BYE",0
 6036/1F18 : 00 00                              DW      BOOT
 6037/1F1A : 50 4F 4B 45 00                     DB      "POKE",0
 6038/1F1F : 55 20                              DW      POKE
 6039/1F21 : 43 41 4C 4C 00                     DB      "CALL",0
 6040/1F26 : 73 20                              DW      JUMP
 6041/1F28 : =>TRUE                             IF      LARGE = 1  ;INCLUDE ONLY IN 8K+ VERSION
 6042/1F28 : 45 44 49 54 00                     DB      "EDIT",0
 6043/1F2D : A6 1F                              DW      FIX
 6044/1F2F : =>FALSE                    	IF IMSAI = 1
 6045/1F2F :                                    DB      "CLOAD",0
 6046/1F2F :                                    DW      CLOAD
 6047/1F2F :                                    DB      "CSAVE",0
 6048/1F2F :                                    DW      CSAVE
 6049/1F2F : [6044]                     	ENDIF
 6050/1F2F : [6041]                             ENDIF
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 102 - 9/26/2024 16:17:21


 6051/1F2F : =>FALSE                    	IF HUNTER = 1
 6052/1F2F :                                    DB      "BAUD",0
 6053/1F2F :                                    DW      BAUD
 6054/1F2F : [6051]                     	ENDIF
 6055/1F2F : 00                                 DB      0       ;END OF TABLE
 6056/1F30 :                            ;
 6057/1F30 :                            ; DDT COMMAND, CPM ONLY
 6058/1F30 :                            ;
 6059/1F30 : =>FALSE                    	IF CPM = 1
 6060/1F30 :                            DDT:    RST     7
 6061/1F30 :                                    JMP     RDY
 6062/1F30 : [6059]                     	ENDIF
 6063/1F30 :                            ;
 6064/1F30 : =1F30H                     FACDE   EQU     $
 6065/1F30 :                            ;
 6066/1F30 :                            ; THIS ROUTINE CONVERTS THE FACC TO AN ADDRESS IN D,E
 6067/1F30 :                            ;
 6068/1F30 : CD B9 0B                           CALL    INT     ;INTEGERIZE THE FACC
 6069/1F33 : 3A 58 82                           LDA     FACC    ;GET THE EXPONENT
 6070/1F36 : B7                                 ORA     A       ;TEST IT
 6071/1F37 : FA 08 1C                           JM      OVERR   ;BRIF NEGATIVE ADDRESS
 6072/1F3A : D6 10                              SUI     16      ;SUBTRACT MAX EXPONENT
 6073/1F3C : CA 52 1F                           JZ      FDE2    ;BRIF EQUAL MAX
 6074/1F3F : F2 08 1C                           JP      OVERR   ;BRIF GREATER THAN 64K
 6075/1F42 : 2F                                 CMA             ;2'S COMPLIMENT OF A YIELDS..
 6076/1F43 : 3C                                 INR     A       ;16-A
 6077/1F44 : 4F                                 MOV     C,A     ;SAVE SHIFT COUNT
 6078/1F45 : AF                         FDE1:   XRA     A       ;CLEAR CARRY
 6079/1F46 : 21 59 82                           LXI     H,FACC+1        ;POINT MANTISSA
 6080/1F49 : 06 02                              MVI     B,2     ;WORDS TO SHIFT
 6081/1F4B : CD D2 18                           CALL    FSHFT   ;GO SHIFT FACC+1 AND FACC+2
 6082/1F4E : 0D                                 DCR     C       ;REDUCE COUNT
 6083/1F4F : C2 45 1F                           JNZ     FDE1    ;LOOP TILL COMPLETE
 6084/1F52 : 21 59 82                   FDE2:   LXI     H,FACC+1        ;POINT HIGH BYTE
 6085/1F55 : 56                                 MOV     D,M     ;LOAD D
 6086/1F56 : 23                                 INX     H       ;POINT LOW BYTE
 6087/1F57 : 5E                                 MOV     E,M     ;LOADE E
 6088/1F58 : C9                                 RET             ;RETURN
 6089/1F59 :                            ;
 6090/1F59 :                            ;
 6091/1F59 : =1F59H                     LOCAT   EQU     $
 6092/1F59 :                            ;
 6093/1F59 :                            ; THIS ROUTINE SEARCHES FOR A LINE IN THE PROGRAM FILE.
 6094/1F59 :                            ; Z SET, C RESET==>LINE FOUND. ADDRESS IS IN H,L
 6095/1F59 :                            ; C SET, Z RESET==>NOT FOUND. H,L POINT TO NEXT LINE
 6096/1F59 :                            ; C SET, Z SET==>NOT FOUND. H,L POINT AT END OF PROGRAM
 6097/1F59 :                            ;
 6098/1F59 : 21 96 82                           LXI     H,BEGPR ;POINT START
 6099/1F5C : 7E                         FIND1:  MOV     A,M     ;FETCH LENGTH OF LINE
 6100/1F5D : E5                                 PUSH    H       ;SAVE POINTER
 6101/1F5E : B7                                 ORA     A       ;TEST
 6102/1F5F : CA 7E 1F                           JZ      FIND3   ;BRIF END
 6103/1F62 : 23                                 INX     H       ;POINT LINE #
 6104/1F63 : 7E                                 MOV     A,M     ;FETCH HI #
 6105/1F64 : B8                                 CMP     B       ;COMPARE TO REQUESTED
 6106/1F65 : DA 76 1F                           JC      FIND2   ;BRIF LOW
 6107/1F68 : C2 7E 1F                           JNZ     FIND3   ;BRIF PAST AND NOT FOUND
 6108/1F6B : 23                                 INX     H       ;POINT LO #
 6109/1F6C : 7E                                 MOV     A,M     ;FETCH IT
 6110/1F6D : B9                                 CMP     C       ;COMPARE TO REQUESTED
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 103 - 9/26/2024 16:17:21


 6111/1F6E : DA 76 1F                           JC      FIND2   ;BRIF LOW
 6112/1F71 : C2 7E 1F                           JNZ     FIND3   ;BRIF PAST AND NOT FOUND
 6113/1F74 : E1                                 POP     H       ;POINT BEGIN IF MATCH
 6114/1F75 : C9                                 RET             ;RETURN
 6115/1F76 :                            ;
 6116/1F76 :                            ; BUMP H,L TO NEXT LINE
 6117/1F76 :                            ;
 6118/1F76 : E1                         FIND2:  POP     H       ;POINT START OF LINE
 6119/1F77 : 5E                                 MOV     E,M     ;LENGHT TO E
 6120/1F78 : 16 00                              MVI     D,0     ;CLEAR D
 6121/1F7A : 19                                 DAD     D       ;BUMP H,L
 6122/1F7B : C3 5C 1F                           JMP     FIND1   ;CONTINUE
 6123/1F7E :                            ;
 6124/1F7E :                            ; LINE NOT FOUND
 6125/1F7E :                            ;
 6126/1F7E : 37                         FIND3:  STC             ;SET CARRY
 6127/1F7F : E1                                 POP     H       ;POINT LINE JUST PAST REQUESTED
 6128/1F80 : C9                                 RET             ;RETURN
 6129/1F81 :                            ;
 6130/1F81 :                            ;
 6131/1F81 : =1F81H                     SEEK    EQU     $
 6132/1F81 :                            ;
 6133/1F81 :                            ;  THIS CODE FINDS AN ENTRY IN THE TABLE POINTED TO BY D,E.
 6134/1F81 :                            ;  THE SOUGHT ENTRY IS POINTED TO BY H,L.
 6135/1F81 :                            ;
 6136/1F81 : E5                         SEEK1:  PUSH    H       ;SAVE ADDRESS OF STRING
 6137/1F82 : 1A                                 LDAX    D       ;GET BYTE FROM TABLE
 6138/1F83 : B7                                 ORA     A       ;TEST IT
 6139/1F84 : CA A4 1F                           JZ      SEEK3   ;BRIF END OF TABLE
 6140/1F87 : =>TRUE                     	IF ROMSTRT = 0
 6141/1F87 : D7                                 RST     2       ;GO COMPARE
 6142/1F88 : =>FALSE                    	ELSE
 6143/1F88 :                            		CALL	RST2	;GO COMPARE
 6144/1F88 : [6140]                     	ENDIF
 6145/1F88 : C2 94 1F                           JNZ     SEEK2   ;BRIF NOT FOUND
 6146/1F8B : E3                                 XTHL            ;PUT CURRENT H,L ON STACK
 6147/1F8C : CD DA 1A                           CALL    SKP2Z   ;FIND END TO LITERAL IN TABLE
 6148/1F8F : 13                                 INX     D       ;POINT LOW BYTE
 6149/1F90 : E1                                 POP     H       ;RESTORE LINE POINTER
 6150/1F91 : 3C                                 INR     A       ;PUT 1 IN A
 6151/1F92 : B7                                 ORA     A       ;RESET Z BIT
 6152/1F93 : C9                                 RET             ;RETURN
 6153/1F94 : CD DA 1A                   SEEK2:  CALL    SKP2Z   ;FIND END OF TABLE LITERAL
 6154/1F97 : 13                                 INX     D       ;
 6155/1F98 : 13                                 INX     D       ;POINT NEXT LIT IN TABLE
 6156/1F99 : 13                                 INX     D       ;
 6157/1F9A : E1                                 POP     H       ;GET ORIGINAL STRING
 6158/1F9B : 1A                                 LDAX    D       ;GET BYTE
 6159/1F9C : 17                                 RAL             ;HIGH BIT TO CARRY
 6160/1F9D : D2 81 1F                           JNC     SEEK1   ;NOT A FUNCTION SEARCH
 6161/1FA0 : 13                                 INX     D       ;POINT NEXT BYTE IN FUNCTION TABLE
 6162/1FA1 : C3 81 1F                           JMP     SEEK1   ;CONTINUE SEARCH
 6163/1FA4 : E1                         SEEK3:  POP     H       ;RESTORE ORIGINAL STRING
 6164/1FA5 : C9                                 RET             ;RETURN
 6165/1FA6 :                            
 6166/1FA6 : =>TRUE                             IF      LARGE   ;ASSEMBLE THE REMAINDAR ONLY FOR 8+K
 6167/1FA6 :                            ;
 6168/1FA6 :                            ;
 6169/1FA6 :                            ; EDIT COMMAND
 6170/1FA6 :                            ; EDIT <LINE #><DELIMITER><OLD TEXT><DELIMITER><NEW TEXT>
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 104 - 9/26/2024 16:17:21


 6171/1FA6 :                            ;
 6172/1FA6 : =1FA6H                     FIX:    EQU     $
 6173/1FA6 : =>TRUE                     	IF ROMSTRT = 0
 6174/1FA6 : CF                                 RST     1       ;SKIP TO NON BLANK
 6175/1FA7 : =>FALSE                    	ELSE
 6176/1FA7 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 6177/1FA7 : [6173]                     	ENDIF
 6178/1FA7 : CD 96 1A                           CALL    PACK    ;GET LINE # IN B,C
 6179/1FAA : =>TRUE                     	IF ROMSTRT = 0
 6180/1FAA : CF                                 RST     1       ;SKIP TO NON BLANK
 6181/1FAB : =>FALSE                    	ELSE
 6182/1FAB :                            		CALL	RST1	;CALL TO RAM ADDRESS
 6183/1FAB : [6179]                     	ENDIF
 6184/1FAB : 22 54 82                           SHLD    ADDR2   ;SAVE COMMAND POINTER
 6185/1FAE : CD 59 1F                           CALL    LOCAT   ;SEARCH FOR LINE # IN PROGRAM
 6186/1FB1 : DA E4 1B                           JC      ULERR   ;BRIF NOT FOUND
 6187/1FB4 : E5                                 PUSH    H       ;SAVE ADDR OF EXISTING LINE <SOURCE>
 6188/1FB5 : C5                                 PUSH    B       ;SAVE LINE #
 6189/1FB6 : 46                                 MOV     B,M     ;GET LENGTH OF <SOURCE>
 6190/1FB7 : EB                                 XCHG            ;D,E POINT <SOURCE>
 6191/1FB8 : 21 20 81                           LXI     H,STRIN ;POINT STRING BUFFER
 6192/1FBB : CD 2E 1C                           CALL    COPYD   ;<SOURCE> TO STRING BUFFER
 6193/1FBE : 3A 20 81                           LDA     STRIN   ;LENGTH OF <SOURCE> TO A
 6194/1FC1 : D6 02                              SUI     2       ;ADJUST
 6195/1FC3 : 32 20 81                           STA     STRIN   ;STORE
 6196/1FC6 : 11 CF 80                           LXI     D,IOBUF+1       ;POINT BUFFER
 6197/1FC9 : 2A 54 82                           LHLD    ADDR2   ;FETCH COMMAND POINTER
 6198/1FCC : 46                                 MOV     B,M     ;FETCH <DELIMITER>
 6199/1FCD :                            ;
 6200/1FCD :                            ; FIND LENGTH OF <OLD TEXT>. STORE IT IN IOBUF.
 6201/1FCD :                            ;
 6202/1FCD : 0E 00                              MVI     C,0     ;INITIAL LENGTH
 6203/1FCF : 23                         FIX1:   INX     H       ;POINT NEXT CHARACTER
 6204/1FD0 : 7E                                 MOV     A,M     ;FETCH
 6205/1FD1 : B7                                 ORA     A       ;TEST
 6206/1FD2 : CA F0 1B                           JZ      SNERR   ;MISSING 2ND <DELIMITER>.
 6207/1FD5 : B8                                 CMP     B       ;TEST
 6208/1FD6 : CA DF 1F                           JZ      FIX2    ;BRIF 2ND <DELIMITER> FOUND
 6209/1FD9 : 0C                                 INR     C       ;ELSE, BUMP C
 6210/1FDA : 12                                 STAX    D       ;STORE CHARACTER IN IOBUF
 6211/1FDB : 13                                 INX     D       ;BUMP IOBUF POINTER
 6212/1FDC : C3 CF 1F                           JMP     FIX1    ;CONTINUE
 6213/1FDF :                            ;
 6214/1FDF :                            ; GET READY TO SEARCH <SOURCE> FOR <OLD TEXT>
 6215/1FDF :                            ;
 6216/1FDF : 79                         FIX2:   MOV     A,C     ;LENGTH OF <OT> TO A
 6217/1FE0 : 32 CE 80                           STA     IOBUF   ;STORE
 6218/1FE3 : 22 54 82                           SHLD    ADDR2   ;SAVE COMMAND POINTER
 6219/1FE6 : 3E 03                              MVI     A,3     ;SEARCH WILL START IN POS 3.
 6220/1FE8 : 2A 93 82                           LHLD    PROGE   ;POINT END OF PROGRAM
 6221/1FEB : 23                                 INX     H       ;BUMP TWICE
 6222/1FEC : 23                                 INX     H
 6223/1FED : 22 52 82                           SHLD    ADDR1   ;SAVE EXPR. STACK POINTER
 6224/1FF0 : 23                                 INX     H       ;POINT NEXT
 6225/1FF1 : 11 CE 80                           LXI     D,IOBUF ;POINT BUFFER AREA
 6226/1FF4 : 72                                 MOV     M,D     ;STORE ADDRESS
 6227/1FF5 : 23                                 INX     H
 6228/1FF6 : 73                                 MOV     M,E
 6229/1FF7 : 21 20 81                           LXI     H,STRIN ; POINT <SOURCE>
 6230/1FFA :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 105 - 9/26/2024 16:17:21


 6231/1FFA :                            ; USE THE INSTR ROUTINE TO SEARCH
 6232/1FFA :                            ;
 6233/1FFA : CD 37 0E                           CALL    INST2   ;GO SEARCH
 6234/1FFD : 7B                                 MOV     A,E     ;RESULT TO A
 6235/1FFE : B7                                 ORA     A       ;TEST
 6236/1FFF : CA F8 1B                           JZ      DAERR   ;BR IF NOT FOUND
 6237/2002 : 4F                                 MOV     C,A     ;SAVE POSITION IN C
 6238/2003 : 3D                                 DCR     A       ;ADJUST
 6239/2004 : 47                                 MOV     B,A     ;COPY TO B
 6240/2005 : 21 21 81                           LXI     H,STRIN+1       ;POINT <OLD SOURCE>
 6241/2008 : 11 CF 80                           LXI     D,IOBUF+1       ;PIONT <NEW LINE AREA>
 6242/200B : CD 39 1C                           CALL    COPYH   ;COPY <OLD SOURCE> UP TO <OLD TEXT>
 6243/200E : D5                                 PUSH    D       ;SAVE DEST POINTER
 6244/200F :                            ;
 6245/200F :                            ; SKIP OVER <OLD TEXT> IN <SOURCE>
 6246/200F :                            ;
 6247/200F : 16 00                              MVI     D,0     ;CLEAR D
 6248/2011 : 3A CE 80                           LDA     IOBUF   ;GET LENGTH OF <OT>
 6249/2014 : 5F                                 MOV     E,A     ;LENGTH TO E
 6250/2015 : 19                                 DAD     D       ;BUMP H,L PAST <OT>
 6251/2016 : D1                                 POP     D       ;RESTORE <DEST> POINTER
 6252/2017 : E5                                 PUSH    H       ;SAVE <REMAINING SOURCE> POINTER
 6253/2018 :                            ;
 6254/2018 :                            ; APPEND <NEW TEXT> TO <DEST>
 6255/2018 :                            ;
 6256/2018 : 2A 54 82                           LHLD    ADDR2   ;FETCH COMMAND POINTER
 6257/201B : 23                         FIX3:   INX     H       ;POINT NEXT
 6258/201C : 7E                                 MOV     A,M     ;FETCH CHARACTER
 6259/201D : B7                                 ORA     A       ;TEST IT
 6260/201E : CA 27 20                           JZ      FIX4    ;BRIF NO MORE <NEW TEXT>
 6261/2021 : 0C                                 INR     C       ;BUMP LENGTH COUNT
 6262/2022 : 12                                 STAX    D       ;STORE CHARACTER
 6263/2023 : 13                                 INX     D       ;BUMP <DEST> POINTER
 6264/2024 : C3 1B 20                           JMP     FIX3    ;CONTINUE
 6265/2027 :                            ;
 6266/2027 :                            ; APPEND <REMAINING SOURCE> TO <DEST>
 6267/2027 :                            ;
 6268/2027 : E1                         FIX4:   POP     H       ;GET REMAINING SOURCE POINTER
 6269/2028 : 7E                         FIX4A:  MOV     A,M     ;FETCH CHARACTER
 6270/2029 : B7                                 ORA     A       ;TEST
 6271/202A : CA 34 20                           JZ      FIX5    ;BRIF DONE
 6272/202D : 12                                 STAX    D       ;STORE CHARACTER
 6273/202E : 0C                                 INR     C       ;BUMP CHAR COUNT
 6274/202F : 13                                 INX     D       ;BUMP DEST POINTER
 6275/2030 : 23                                 INX     H       ;BUMP <SOURCE> POINTER
 6276/2031 : C3 28 20                           JMP     FIX4A   ;CONTINUE
 6277/2034 :                            ;
 6278/2034 :                            ; PREPARE <DEST> FOR SUBMISSION AS NEW LINE
 6279/2034 :                            ;
 6280/2034 : 12                         FIX5:   STAX    D       ;BUFFER TERMINATOR
 6281/2035 : 0C                                 INR     C       ;BUMP LENGTH COUNT
 6282/2036 : 79                                 MOV     A,C     ;FETCH COUNT
 6283/2037 : 32 CE 80                           STA     IOBUF   ;STORE IT
 6284/203A : 47                                 MOV     B,A     ;COPY COUNT TO B
 6285/203B : 21 7C 80                           LXI     H,IMMED ;POINT NEW LINE AREA
 6286/203E : 11 CE 80                           LXI     D,IOBUF ;POINT WHERE IT IS NOW
 6287/2041 : CD 2E 1C                           CALL    COPYD   ;COPY IT
 6288/2044 : C1                                 POP     B       ;RESTORE LINE #
 6289/2045 : E1                                 POP     H       ;RESTORE PROGRAM POINTER
 6290/2046 : E5                                 PUSH    H       ;SAVE IT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 106 - 9/26/2024 16:17:21


 6291/2047 : C3 0B 01                           JMP     EDIT2   ;PROCESS AS NEW LINE
 6292/204A :                            ;
 6293/204A : =>FALSE                    	IF IMSAI = 1
 6294/204A :                            ;
 6295/204A :                            ; TAPE CASSETTE COMMANDS
 6296/204A :                            ;
 6297/204A :                            ;
 6298/204A :                            ;       TAPE CASSETTE EQUATES
 6299/204A :                            ;
 6300/204A :                            SWCH    EQU     0FFH    ;SWITCH PORT
 6301/204A :                            CASC    EQU     3       ;STATUS PORT FOR TARBELL
 6302/204A :                            CASD    EQU     0       ;DATA PORT
 6303/204A :                            CFLAG   EQU     4       ;DATA FLAG FOR TARBELL ON MIO
 6304/204A :                            ;
 6305/204A :                            ; CASSETTE FILE FORMAT
 6306/204A :                            ;
 6307/204A :                            ;    EACH RECORD:
 6308/204A :                            ;       TYPE BYTE: 4 FOR BASIC PROGRAM,
 6309/204A :                            ;                  PLUS BIT 7 ON IF DATA NOT HEADER RECORD
 6310/204A :                            ;       LENGTH BYTE: # DATA BYTES (1-128)
 6311/204A :                            ;       2 BYTES OF CHECKSUM
 6312/204A :                            ;
 6313/204A :                            ;    EACH FILE BEGINS WITH A HEADER RECORD
 6314/204A :                            ;       TYPE 4
 6315/204A :                            ;       LENGTH: 7
 6316/204A :                            ;           5 CHARS FILENAME, BLANK-FILLED
 6317/204A :                            ;           2 BYTES TOTAL LENGTH OF DATA IN FILE
 6318/204A :                            ;       2 BYTES OF CHECKSUM
 6319/204A :                            ;
 6320/204A :                            ;    AND HAS N DATA RECORDS
 6321/204A :                            ;       TYPE: 84
 6322/204A :                            ;       LENGTH: 128 EXCEPT LAST RECORD MAY BE LESS
 6323/204A :                            ;       DATA: NEXT (LENGTH) BYTES OF IMAGE OF PROGRAM AREA
 6324/204A :                            ;       CHECKSUM: 2 BYTES, 2'S COMPLEMENT OF SUM OF BYTES
 6325/204A :                            ;
 6326/204A :                            ;    FILES OF TYPE OTHER THAN 4 ARE IGNORED BY BASIC
 6327/204A :                            ;
 6328/204A :                            ; HARDWARE USED:
 6329/204A :                            ;       IMSAI MIO BOARD, CASSETTE DATA ON PORT 0,
 6330/204A :                            ;       STATUS ON PORT 3,
 6331/204A :                            ;       CASSETTE READY JUMPERED TO BIT 2 OF PORT 3.
 6332/204A :                            ;
 6333/204A :                            ;
 6334/204A :                            ;       TAPE UTILITY ROUTINE
 6335/204A :                            ;
 6336/204A :                            ; WATCH         WAIT FOR TARBELL READY OR CONTROL-C
 6337/204A :                            ;
 6338/204A :                            WATCH:  PUSH B          ;SAVE REGS - CPM STATUS CALL CAN CLOBBER
 6339/204A :                                    PUSH D
 6340/204A :                                    PUSH H
 6341/204A :                                    CALL    TSTCC   ;TEST FOR CNTRL-C
 6342/204A :                                    POP H           ;RESTORE REGS IN CPM DEBUGGING MODE
 6343/204A :                                    POP D
 6344/204A :                                    POP B
 6345/204A :                                    IN      CASC    ;READ STATUS PORT
 6346/204A :                                    ANI     CFLAG   ;TEST
 6347/204A :                                    JZ      WATCH   ;LOOP TILL RE^AADY
 6348/204A :                                    RET
 6349/204A :                            ;
 6350/204A :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 107 - 9/26/2024 16:17:21


 6351/204A :                            ; CASI          CASSETTE INPUT TO A-REGISTER
 6352/204A :                            ;
 6353/204A :                            CASI:   CALL    WATCH   ;WAIT TIL READY
 6354/204A :                                    IN      CASD    ;READ FROM DATA PORT
 6355/204A :                                    RET
 6356/204A :                            ;
 6357/204A :                            ;
 6358/204A :                            ; RECO          WRITE A RECORD TO THE TARBELL.
 6359/204A :                            ;               D,E==>TYPE, LENGTH BYTES
 6360/204A :                            ;               H,L==>START OF SOURCE
 6361/204A :                            ;               RETURNS UPDATED SOURCE POINTER IN DE
 6362/204A :                            ;
 6363/204A :                            RECO:   MOV     A,D     ;TYPE BYTE
 6364/204A :                                    CALL    CASO    ;WRITE IT
 6365/204A :                                    MOV     A,E     ;COUNT
 6366/204A :                                    CALL    CASO    ;WRITE IT
 6367/204A :                                    MOV     B,E     ;COUNT
 6368/204A :                                    XCHG            ;SOURCE NOW IN DE
 6369/204A :                                    LXI     H,0     ;INITIAL CHECKSUM
 6370/204A :                            NCHAR:  LDAX    D       ;FETCH NEXT CHAR
 6371/204A :                                    CALL    CASO    ;WRITE IT
 6372/204A :                                    INX     D       ;PNT NEXT CHAR
 6373/204A :                                    CALL    CKSUM   ;ADD TO CKSUM, PUT ADD IN LIGHTS
 6374/204A :                                    DCR     B       ;REDUCE COUNT
 6375/204A :                                    JNZ     NCHAR   ;LOOP ON COUNT
 6376/204A :                                    DCX     H       ;ADJUST HL FOR COMPLIMENT
 6377/204A :                                    MOV     A,H     ;WRITE CHECKSUM
 6378/204A :                                    CMA
 6379/204A :                                    CALL    CASO
 6380/204A :                                    MOV     A,L
 6381/204A :                                    CMA
 6382/204A :                                    ;WRITE LAST BYTE & RETURN
 6383/204A :                            ;
 6384/204A :                            ;
 6385/204A :                            ; CASO          CASSETTE OUTPUT BYTE FROM A-REGISTER
 6386/204A :                            ;
 6387/204A :                            CASO:   PUSH PSW
 6388/204A :                                    CALL WATCH      ;WAIT TILL READY
 6389/204A :                                    POP PSW
 6390/204A :                                    OUT CASD        ;WRITE TO DATA PORT
 6391/204A :                                    RET
 6392/204A :                            ;
 6393/204A :                            ;
 6394/204A :                            ; CKSUM         CALCULATE THE CHECKSUM:
 6395/204A :                            ;               ADD A TO HL
 6396/204A :                            ;       ALSO OUTPUS HI ADDR TO SENSE LIGHTS
 6397/204A :                            ;
 6398/204A :                            CKSUM:  ADD     L       ;ADD PREVIOUS LO
 6399/204A :                                    MOV     L,A     ;SAVE NEW LO
 6400/204A :                                    RNC
 6401/204A :                                    INR     H       ;PROPAGATE CARRY
 6402/204A :                            ;
 6403/204A :                            ;
 6404/204A :                            ; SENSE         OUTPUT HI ADDR FROM D TO LIGHTS
 6405/204A :                            ;
 6406/204A :                            SENSE:  MOV     A,D
 6407/204A :                                    CMA
 6408/204A :                                    OUT     SWCH
 6409/204A :                                    RET
 6410/204A :                            ;
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 108 - 9/26/2024 16:17:21


 6411/204A :                            ;
 6412/204A :                            ; RECI          INPUT A RECORD FROM THE TARBELL
 6413/204A :                            ;       TAKES A BUFFER POINTER IN HL
 6414/204A :                            ;       RETURNS UPDATED POINTER IN DE,
 6415/204A :                            ;               RECORD TYPE IN A, RECORD LENGTH IN C
 6416/204A :                            ;               CLOBBERS B,H,L
 6417/204A :                            ;
 6418/204A :                            RECI:   CALL    CASI    ;GET TYPE
 6419/204A :                                    PUSH    PSW     ;SAVE TYPE TO RETURN TO CALLER
 6420/204A :                                    CALL    CASI    ;GET LENGTH
 6421/204A :                                    MOV     C,A     ;STORE LEN
 6422/204A :                                    MOV     B,A     ;IN B ALSO
 6423/204A :                                    XCHG            ;PUT DESTINATION PTR IN DE
 6424/204A :                                    LXI     H,0     ;INITIAL CHECKSUM
 6425/204A :                            RECI1:  CALL    CASI    ;INPUT BYTE
 6426/204A :                                    STAX    D       ;STORE IT
 6427/204A :                            	INX	D
 6428/204A :                                    CALL    CKSUM   ;UPDATE CKSUM, PUT ADDR IN LIGHTS
 6429/204A :                                    DCR     B       ;LOOP ON COUNT
 6430/204A :                                    JNZ     RECI1
 6431/204A :                                    PUSH    D       ;SAVE DESTINATION PTR
 6432/204A :                                    CALL    CASI    ;INPUT CHECKSUM
 6433/204A :                                    MOV     D,A
 6434/204A :                                    CALL    CASI
 6435/204A :                                    MOV     E,A
 6436/204A :                                    DAD     D       ;COMPARE
 6437/204A :                                    MOV     A,H
 6438/204A :                                    ORA     L
 6439/204A :                                    JNZ     CKERR   ;BRIF CHECKSUM ERROR
 6440/204A :                                    POP     D       ;RESTORE DEST PTR
 6441/204A :                                    POP     PSW     ;RESTORE RECORD TYPE BYTE
 6442/204A :                                    RET
 6443/204A :                            ;
 6444/204A :                            ;
 6445/204A :                            ; CSAVE COMMAND
 6446/204A :                            ;
 6447/204A :                            		IF ROMSTRT = 0
 6448/204A :                            CSAVE:  RST     1       ;SKIP ANY SPACES
 6449/204A :                            		ELSE
 6450/204A :                            CSAVE:	CALL	RST1	;CALL TO RAM ADDRESS
 6451/204A : [6447]                     		ENDIF
 6452/204A :                                    MVI     A,10H   ;ENABLE WRITE
 6453/204A :                                    OUT     CASC
 6454/204A :                                    PUSH    H       ;SAVE PTR
 6455/204A :                                    MVI     B,255   ;WRITE INITIAL 255 NULLS
 6456/204A :                                    XRA     A
 6457/204A :                            NULS:   CALL    CASO
 6458/204A :                                    DCR     B
 6459/204A :                                    JNZ     NULS
 6460/204A :                                    MVI     A,3CH   ;START BYTE
 6461/204A :                                    CALL    CASO
 6462/204A :                                    MVI     B,32    ;32 SYNC BYTES
 6463/204A :                                    MVI     A,0E6H  ;SYNC BYTE VALUE
 6464/204A :                            SYNCS:  CALL    CASO
 6465/204A :                                    DCR     B
 6466/204A :                                    JNZ     SYNCS
 6467/204A :                                    LXI     H,IOBUF ;POINT BUFFER
 6468/204A :                                    MVI     B,5     ;FILE NAME LENGTH
 6469/204A :                                    POP     D       ;RESTORE CMD PTR
 6470/204A :                            FNAME:  MVI     M,20H   ;DEFAULT BLANK
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 109 - 9/26/2024 16:17:21


 6471/204A :                                    LDAX    D       ;FETCH FILE NAME
 6472/204A :                                    ORA     A       ;TEST
 6473/204A :                                    JZ      BLANK
 6474/204A :                                    MOV     M,A     ;STORE CHAR
 6475/204A :                                    INX     D       ;NAME PTR
 6476/204A :                            BLANK:  INX     H       ;BUFFER PTR
 6477/204A :                                    DCR     B       ;COUNT
 6478/204A :                                    JNZ     FNAME
 6479/204A :                            ;
 6480/204A :                            ; CALCULATE LGTH OF PROGRAM FILE&WRITE IT ON THE HEADER
 6481/204A :                            ;
 6482/204A :                                    LXI     D,BEGPR ;BEGINNING OF PROGRAM
 6483/204A :                                    LHLD    PROGE   ;END
 6484/204A :                                    MOV     A,L
 6485/204A :                                    SUB     E
 6486/204A :                                    MOV     L,A
 6487/204A :                                    MOV     A,H
 6488/204A :                                    SBB     D
 6489/204A :                                    MOV     H,A
 6490/204A :                                    INX     H       ;PLUS 1 TO GET # OF BYTES INCLUSIVE
 6491/204A :                                    PUSH    H       ;SAVE FOR LATER
 6492/204A :                                    SHLD    IOBUF+5 ;STUFF LENGTH
 6493/204A :                                    LXI     D,407H  ;TYPE AND LEN OF HEADER RECORD
 6494/204A :                                                    ;TYPE 4: BASIC PROG FILE, HEADER RCD
 6495/204A :                                    LXI     H,IOBUF
 6496/204A :                                    CALL    RECO    ;WRITE RECORD
 6497/204A :                            ;
 6498/204A :                            ; WRITE PROGRAM FILE
 6499/204A :                            ;
 6500/204A :                                    LXI     H,BEGPR ;POINT START OF PROGRAM
 6501/204A :                            NXTRC:  XTHL            ;GET REMAINING LENGTH
 6502/204A :                                    MOV     A,H     ;GET HI REMAINING
 6503/204A :                                    ORA     L       ;TEST FOR DONE
 6504/204A :                                    JZ      ERITE   ;BRIF DONE
 6505/204A :                                    LXI     D,0FF80H;-128
 6506/204A :                                    DAD     D       ;SUBTRACT RECORD LENGTH
 6507/204A :                                    JC      RITE    ;IF CARRY, NOT AT END
 6508/204A :                                    MOV     A,L     ;GET LOW
 6509/204A :                                    ANI     7FH     ;NUMBER BYTES LEFT
 6510/204A :                                    MOV     E,A     ;COUNT
 6511/204A :                                    LXI     H,0     ;REMAINING BYTES
 6512/204A :                            RITE:   XTHL            ;RESTORE H
 6513/204A :                                    MVI     D,084H  ;TYPE BYTE: 80=DATA RECORD (NOT
 6514/204A :                                                    ;FILE HDR), 4=BASIC PROGRAM FILE.
 6515/204A :                                    CALL    RECO    ;WRITE
 6516/204A :                                    XCHG            ;SAVE SOURCE PTR
 6517/204A :                                    JMP     NXTRC
 6518/204A :                            ERITE:  POP     H       ;CLEAN STACK
 6519/204A :                            ;
 6520/204A :                            ;
 6521/204A :                            ; BELL          RING USER'S CHIMES
 6522/204A :                            ;
 6523/204A :                            BELL:   MVI     A,7     ;CODE FOR BELL
 6524/204A :                                    CALL    TESTO
 6525/204A :                                    JMP     RDY
 6526/204A :                                    ; CLOAD         LOAD A PROGRAM FROM THE TARBELL
 6527/204A :                            ;
 6528/204A :                            CLOAD:
 6529/204A :                            NULL1:  MVI     A,60H   ;MIO CONTROL TO READ BY BITS
 6530/204A :                                    OUT     CASC    ;WRITE TO STATUS PORT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 110 - 9/26/2024 16:17:21


 6531/204A :                            NULLS:  CALL    CASI    ;READ LEADING NULLS
 6532/204A :                                    OUT     SWCH    ;PUT IN LIGHTS
 6533/204A :                                    CPI     0E6H    ;WAIT FOR FIRST SYNC BYTE
 6534/204A :                                    JNZ     NULLS
 6535/204A :                                    MVI     A,20H   ;MIO CONTROL TO READ BY BYTES
 6536/204A :                                    OUT     CASC    ;WRITE TO STATUS PORT
 6537/204A :                                    MVI     B,31    ;NUMBER REMAINING SYNC BYTES
 6538/204A :                            SYNC:   CALL    CASI    ;READ PAST SYNC
 6539/204A :                                    OUT     SWCH
 6540/204A :                                    CPI     0E6H
 6541/204A :                                    JNZ     NULL1   ;TRY FOR MORE NULLS
 6542/204A :                                    DCR     B
 6543/204A :                                    JNZ     SYNC
 6544/204A :                                    LXI     H,IOBUF ;POINT BUFFER
 6545/204A :                                    CALL    RECI    ;READ A RECORD
 6546/204A :                                    CPI     4       ;TEST TYPE BYTE: IS IT BASIC PROGRAM
 6547/204A :                                                    ;..FILE HEADER RECORD?
 6548/204A :                                    JNZ     NULL1   ;NO, START OVER, KEEP LOOKING
 6549/204A :                                    LHLD    IOBUF+5 ;LOAD LENGTH OF PROGRAM FILE
 6550/204A :                                    PUSH    H       ;SAVE
 6551/204A :                                    LXI     H,BEGPR
 6552/204A :                            NXTR:   CALL    RECI    ;READ RECORD
 6553/204A :                                    CPI     84H     ;IS IT BASIC PROGRAM FILE DATA RECORD
 6554/204A :                                    JNZ     CKERR   ;NO, SOMETHING'S WRONG.
 6555/204A :                                    POP     H       ;LENGTH
 6556/204A :                                    ;SUBTRACT 0,C  FROM HL
 6557/204A :                                    MOV     A,L
 6558/204A :                                    SUB     C
 6559/204A :                                    MOV     L,A
 6560/204A :                                    MOV     A,H
 6561/204A :                                    MVI     C,0
 6562/204A :                                    SBB     C
 6563/204A :                                    MOV     H,A
 6564/204A :                                    ORA     L       ;TEST RESULT FOR 0
 6565/204A :                                    XCHG            ;BUFFER ADDR TO HL
 6566/204A :                                    PUSH    D       ;SAVE REMAINING LENGTH
 6567/204A :                                    JNZ     NXTR    ;JIF NOT DONE READING DATA
 6568/204A :                                    POP     D       ;CLEAR STACK
 6569/204A :                            ;LOADING DONE. SET POINTER TO END OF PROGRAM.
 6570/204A :                                    XRA     A
 6571/204A :                                    MOV     M,A     ;EXTRA 0 FOR PARANOISA
 6572/204A :                                    DCX     H       ;POINT LAST RECORD BYTE (SHOULD BE 0)
 6573/204A :                                    SHLD    PROGE   ;SAVE END OF PROG FOR EDIT, LIST, &C
 6574/204A :                                    STA     IOBUF+5 ;MARK END OF FILE NAME FOR TYPEOUT
 6575/204A :                            ;TYPE FILE NAME
 6576/204A :                                    LDA     IOBUF
 6577/204A :                                    CPI     20H     ;TEST FOR NO NAME
 6578/204A :                                    CNZ     TERMO   ;PRINT NAME IF THERE
 6579/204A :                                    JMP     BELL
 6580/204A : [6293]                         ENDIF
 6581/204A : [6166]                     	ENDIF
 6582/204A :                            ;
 6583/204A : =204AH                     PEEK    EQU     $
 6584/204A :                            ;
 6585/204A :                            ; STMT: A=PEEK(X). RETURNS DECIMAL VALUE OF MEMORY ADDRESS X.
 6586/204A :                            ;
 6587/204A : CD 30 1F                           CALL    FACDE   ;GET ADDRESS IN D,E
 6588/204D : EB                                 XCHG            ;ADDRESS TO H,L
 6589/204E : 11 00 00                           LXI     D,0     ;CLEAR D,E
 6590/2051 : 5E                                 MOV     E,M     ;PUT MEMORY BYTE IN E
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 111 - 9/26/2024 16:17:21


 6591/2052 : C3 6A 1C                           JMP     BINFL   ;CONVERT D,E TO BINARY AND RETURN
 6592/2055 :                            ;
 6593/2055 : =2055H                     POKE    EQU     $
 6594/2055 :                            ;
 6595/2055 :                            ; STMT: POKE <ADDRESS>,<VALUE>.  PUTS IN MEMORY ADDRESS.
 6596/2055 :                            ;
 6597/2055 : CD 57 0F                           CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
 6598/2058 : 7E                                 MOV     A,M     ;LOAD NEXT CHARACTER
 6599/2059 : FE 2C                              CPI     ','     ;TEST
 6600/205B : C2 F0 1B                           JNZ     SNERR   ;BRIF ERROR
 6601/205E : 23                                 INX     H       ;POINT NEXT
 6602/205F : E5                                 PUSH    H       ;SAVE H,L
 6603/2060 : CD 30 1F                           CALL    FACDE   ;PUT ADDRESS IN D,E
 6604/2063 : E1                                 POP     H       ;RESTORE H,L
 6605/2064 : D5                                 PUSH    D       ;SAVE ADDRESS
 6606/2065 : CD 57 0F                           CALL    EXPR    ;EVALUATE VALUE EXPRESSION
 6607/2068 : CD 75 1A                           CALL    EOL     ;TEST FOR END OF LINE
 6608/206B : CD 47 1C                           CALL    FBIN    ;CONVERT FACC TO A REGISTER VALUE
 6609/206E : E1                                 POP     H       ;GET D,E ADDRESS IN H,L
 6610/206F : 77                                 MOV     M,A     ;MOVE BYTE
 6611/2070 : C3 E9 01                           JMP     RUN     ;CONTINUE
 6612/2073 :                            ;
 6613/2073 :                            ;
 6614/2073 : =2073H                     JUMP    EQU     $
 6615/2073 :                            ;
 6616/2073 :                            ; STMT: CALL <ADDRESS>. EXECUTES CODE AT MEMORY ADDRESS.
 6617/2073 :                            ;
 6618/2073 : CD 57 0F                           CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
 6619/2076 : CD 75 1A                           CALL    EOL     ;TEST FOR END OF LINE
 6620/2079 : CD 30 1F                           CALL    FACDE   ;CONVERT FACC TO ADDRESS IN D,E
 6621/207C : 21 E9 01                           LXI     H,RUN   ;MAKE INTO SUBROUTINE
 6622/207F : E5                                 PUSH    H
 6623/2080 : EB                                 XCHG            ;MOVE ADDRESS TO HL
 6624/2081 : E9                                 PCHL            ;EXECUTE USER'S ROUTINE
 6625/2082 :                            ;
 6626/2082 : =>FALSE                    	IF HUNTER = 1
 6627/2082 :                            ;
 6628/2082 :                            BAUD    EQU     $
 6629/2082 :                            ;
 6630/2082 :                            ; SOFTWARE BAUD SELECTION ON SIO BOARDS MODIFIED BY
 6631/2082 :                            ; W. HARTER, COYOTE COMPUTERS, DAVIS, CALIF.
 6632/2082 :                            ;
 6633/2082 :                            ; COMMAND 'BAUD <RATE>' WHERE <RATE>=110,300,1200,2400,9600
 6634/2082 :                            ;
 6635/2082 :                            	IF ROMSTRT = 0
 6636/2082 :                                    RST     1       ;SKIP TO NON BLANK
 6637/2082 :                            	ELSE
 6638/2082 :                            		CALL	RST1	;CALL TO RAM ADDRESS
 6639/2082 : [6635]                     	ENDIF
 6640/2082 :                                    LXI     D,BAUDS+6       ;POINT BAUD TABLE
 6641/2082 :                                    CALL    SEEK    ;GO SEARCH BAUD TABLE
 6642/2082 :                                    JZ      CVERR   ;BRIF RATE NOT FOUND
 6643/2082 :                                    DCX     H       ;ADJUST POINTER
 6644/2082 :                            BAUD1:  INX     H       ;LOOK AT CHARACTER
 6645/2082 :                                    CALL    NUMER   ;TEST FOR DIGIT
 6646/2082 :                                    JZ      BAUD1   ;LOOP PAST RATE
 6647/2082 :                                    CALL    EOL     ;TEST FOR END OF LINE
 6648/2082 :                                    XCHG            ;POINT ADDRESS OF CONTROL BYTES
 6649/2082 :                                    MOV     E,M     ;LOW BYTE TO E
 6650/2082 :                                    INX     H       ;POINT NEXT
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 112 - 9/26/2024 16:17:21


 6651/2082 :                                    MOV     D,M     ;HIGH BYTE TO D
 6652/2082 :                                    LDA     EDSW    ;GET MODE SWITCH
 6653/2082 :                                    ORA     A       ;TEST IT
 6654/2082 :                                    JNZ     SETIT   ;BRIF IMMEDIATE MODE
 6655/2082 :                                    LXI     H,BAUDS ;POINT 'BAUD'
 6656/2082 :                                    CALL    TERMM   ;WRITE IT
 6657/2082 :                                    PUSH    D       ;SAVE ADDRESS OF CONTROL BYTES
 6658/2082 :                                    LXI     H,IOBUF ;POINT BUFFER
 6659/2082 :                                    MVI     B,4     ;LOAD COUNT
 6660/2082 :                                    CALL    COPYD   ;COPY RATE TO IOBUF
 6661/2082 :                                    MVI     M,0     ;TERMINATE MESSAGE
 6662/2082 :                                    CALL    TERMO   ;WRITE IT
 6663/2082 :                                    POP     D       ;RESTORE CONTROL BYTES
 6664/2082 :                            SETIT:  LXI     H,4     ;LOAD OFFSET
 6665/2082 :                                    DAD     D       ;PIONT 1ST CONTROL BYTE
 6666/2082 :                                    MVI     A,40H   ;LOAD RESET
 6667/2082 :                                    OUT     TTY+1   ;WRITE IT
 6668/2082 :                                    MVI     A,M     ;MODE BYTE
 6669/2082 :                                    OUT     TTY+1   ;WRITE IT
 6670/2082 :                                    MVI     A,17H   ;ENABLE BYTE
 6671/2082 :                                    OUT     TTY+1   ;WRITE IT
 6672/2082 :                                    INX     H       ;POINT SPEED BYTE
 6673/2082 :                                    MOV     A,M     ;LOAD IT
 6674/2082 :                                    OUT     8       ;WRITE IT
 6675/2082 :                            BAUD2:  IN      TTY+1   ;READ STATUS
 6676/2082 :                                    ANI     2       ;TEST
 6677/2082 :                                    JZ      BAUD2   ;WAIT FOR ACKNOWLEDGMENT
 6678/2082 :                                    IN      TTY     ;READ AND DISCARD
 6679/2082 :                                    LDA     EDSW    ;GET MODE SWITCH
 6680/2082 :                                    ORA     A       ;TEST IT
 6681/2082 :                                    JZ      RUN     ;BRIF RUN MODE
 6682/2082 :                                    JMP     GETCM   ;BRIF IMMEDIATE MODE
 6683/2082 :                            BAUDS:  DB      "BAUD",0FEH     ;BAUD MESSAGE
 6684/2082 :                            ;
 6685/2082 :                            ; BAUD TABLE.
 6686/2082 :                            ;
 6687/2082 :                            B110:   DB      "110 ",0FAH,2,0
 6688/2082 :                                    DW      B110
 6689/2082 :                            B300:   DB      "300 ",0FBH,0
 6690/2082 :                                    DW      B300
 6691/2082 :                            B1200:  DB      "1200",0FAH,0
 6692/2082 :                                    DW      B1200
 6693/2082 :                            B2400:  DB      "2400",0FAH,32,0
 6694/2082 :                                    DW      B2400
 6695/2082 :                            B9600:  DB      "9600",0FAH,34,0
 6696/2082 :                                    DW      B9600
 6697/2082 :                                    DB      0       ;END OF BAUD TABLE
 6698/2082 :                            ;
 6699/2082 : [6626]                             ENDIF
 6700/2082 :                            ;
 6701/2082 : =>FALSE                    	IF CPM 			    ;CPM INITIALIZATION STORES
 6702/2082 :                                                    ;...BIOS JUMP TABLE HERE
 6703/2082 :                            BTSTAT: DS      3       ;JMP TO BIOS CONSOLE STATUS
 6704/2082 :                            BTIN:   DS      3       ;JMP TO BIOS CONSOLE INPUT
 6705/2082 :                            BTOUT:  DS      3       ;JMP TO BIOS CONSOLE OUTPUT
 6706/2082 : [6701]                         ENDIF
 6707/2082 : =2081H                     ROMEND  EQU     $-1
 6708/2082 :                            ;
 6709/8000 :                                    ORG     RAMSTRT ;RAM STARTS OF 32K BOUNDARY
 6710/8000 : =>TRUE                     	IF LARGE = 1 || CPM = 1 ;ADJUST START OF RAM IF 8+K
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 113 - 9/26/2024 16:17:21


 6711/8000 :                                    ORG     RAMSTRT ;RAM STARTS OF 32K BOUNDARY
 6712/8000 : [6710]                     	ENDIF
 6713/8000 :                            ;
 6714/8000 :                            ; ALL CODE ABOVE THIS POINT IS READ ONLY AND CAN BE PROM'ED
 6715/8000 :                            ;
 6716/8000 :                            ;
 6717/8000 : =8000H                     RAM     EQU     $
 6718/8000 :                            ;
 6719/8000 : =8000H                     BZERO   EQU     $
 6720/8000 :                            FORNE:  DS      1       ;# ENTRYS IN TABLE (MUST BE HERE)
 6721/8001 :                                    DS      112     ;ROOM FOR 8 NESTS (MUST BE HERE)
 6722/8071 :                            TAPES:  DS      1       ;TAPE SWITCH (MUST BE HERE)
 6723/8072 :                            DIMSW:  DS      1       ;DIM SWITCH (MUST BE HERE)
 6724/8073 :                            OUTSW:  DS      1       ;OUTPUT SWITCH (MUST BE HERE)
 6725/8074 :                            ILSW:   DS      1       ;INPUT LINE SWITCH (MUST BE HERE)
 6726/8075 :                            RUNSW:  DS      1       ;RUN SWITCH(MUST BE HERE)
 6727/8076 :                            EDSW:   DS      1       ;MODE SWITCH(MUST BE HERE)
 6728/8077 : =8077H                     EZERO   EQU     $
 6729/8077 :                            ;
 6730/8077 :                            LINEN:  DS      5
 6731/807C :                            IMMED:  DS      82      ;IMMEDIATE COMMAND STORAGE AREA
 6732/80CE :                            IOBUF:  DS      82      ;INPUT/OUTPUT BUFFER
 6733/8120 :                            STRIN:  DS      256     ;STRING BUFFER AREA
 6734/8220 :                            OUTA:   DS      3       ;*** FILLED IN AT RUN TIME
 6735/8223 :                            INDX:   DS      2       ;HOLDS VARIABLE NAME OF FOR/NEXT
 6736/8225 :                            REL:    DS      1       ;HOLDS THE RELATION IN AN IF STMT
 6737/8226 :                            IFTYP:  DS      1       ;HOLDS TYPE CODE OF LEFT SIDE
 6738/8227 :                            TVAR1:  DS      4       ;TEMP STORAGE
 6739/822B :                            TVAR2:  DS      4       ;DITTO
 6740/822F :                            TEMP1:  DS      4       ;TEMP STORAGE FOR FUNCTIONS
 6741/8233 :                            TEMP2:  DS      4
 6742/8237 :                            TEMP3:  DS      4
 6743/823B :                            TEMP4:  DS      4
 6744/823F :                            TEMP5:  DS      4
 6745/8243 :                            TEMP6:  DS      4
 6746/8247 :                            TEMP7:  DS      4
 6747/824B :                            LINEL:  DS      2       ;HOLDS MIN LINE NUMBER IN LIST
 6748/824D :                            LINEH:  DS      2       ;HOLDS MAX LINE NUMBER IN LIST
 6749/824F :                            PROMP:  DS      1       ;HOLDS PROMPT CHAR
 6750/8250 :                            EXPRS:  DS      2       ;HOLDS ADDR OF EXPRESSION
 6751/8252 :                            ADDR1:  DS      2       ;HOLDS TEMP ADDRESS
 6752/8254 :                            ADDR2:  DS      2       ;HOLDS TEMP ADDRESS
 6753/8256 :                            ADDR3:  DS      2       ;HOLDS STMT ADD DURING EXPR EVAL
 6754/8258 :                            FACC:   DS      4
 6755/825C :                            FTEMP:  DS      12
 6756/8268 :                            PARCT:  DS      1
 6757/8269 :                            SPCTR:  DS      2
 6758/826B :                            CMACT:  DS      1       ;COUNT OF COMMAS
 6759/826C :                            FNARG:  DS      4       ;SYMBOLIC ARG & ADDRESS
 6760/8270 :                            STMT:   DS      2       ;HOLDS ADDR OF CURRENT STATEMENT
 6761/8272 :                            ENDLI:  DS      2       ;HOLDS ADDR OF MULTI STMT PTR
 6762/8274 :                            MULTI:  DS      1       ;SWITCH 0=NO, 1=MULTI STMT LINE
 6763/8275 :                            DEXP:   DS      1
 6764/8276 :                            COLUM:  DS      1       ;CURRENT TTY COLUMN
 6765/8277 :                            RNDX:   DS      2       ;RANDOM VARIABLE STORAGE
 6766/8279 :                            RNDY:   DS      2       ;THE RND<X>,TRND<X>,AND RNDSW
 6767/827B :                            RNDZ:   DS      2       ;MUST BE KEPT IN ORDER
 6768/827D :                            RNDS:   DS      2
 6769/827F :                            TRNDX:  DS      2
 6770/8281 :                            TRNDY:  DS      2
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 114 - 9/26/2024 16:17:21


 6771/8283 :                            TRNDZ:  DS      2
 6772/8285 :                            TRNDS:  DS      2
 6773/8287 :                            RNDSW:  DS      1
 6774/8288 :                            FNMOD:  DS      1       ;SWITCH, 0=NOT, <>0 = IN DEF FN
 6775/8289 :                            LINE:   DS      2       ;HOLD ADD OF PREV LINE NUM
 6776/828B :                            STACK:  DS      2       ;HOLDS ADDR OF START OF RETURN STACK
 6777/828D :                            PRSW:   DS      1       ;ON=PRINT ENDED WITH , OR ;
 6778/828E :                            NS:     DS      1       ;HOLDS LAST TYPE (NUMERIC/STRING)
 6779/828F :                            DATAP:  DS      2       ;ADDRESS OF CURRENT DATA STMT
 6780/8291 :                            DATAB:  DS      2       ;ADDRESS OF DATA POOL
 6781/8293 :                            PROGE:  DS      2       ;ADDRESS OF PROGRAM END
 6782/8295 :                            ;
 6783/8295 : =>FALSE                    	IF CPM = 1
 6784/8295 :                            ;TEMPORARY CODE FOR INITIALIZATION HERE
 6785/8295 :                            ;
 6786/8295 :                            INITC:  LHLD    BOOT+1  ;PTR TO BIOS TABLE
 6787/8295 :                                    LXI     D,CSTAT ;OFFSET OF CONSOLE QUERY ENTRY
 6788/8295 :                                    DAD     D       ;POINT INTO BIO JUMP TABLE
 6789/8295 :                                    LXI     D,BTSTAT;POINT INTO BASIC JMP TABLE
 6790/8295 :                                    MVI     B,9     ;COUNT
 6791/8295 :                                    CALL    COPYH   ;MOVE BIOS TABLE INTO BASIC
 6792/8295 :                                    MVI     A,0C3H  ;JMP OP CODE
 6793/8295 :                                    LXI     H,RST1
 6794/8295 :                            		STA		8H
 6795/8295 :                            		SHLD	9H
 6796/8295 :                                    LXI		H,RST2
 6797/8295 :                            		STA		10H
 6798/8295 :                            		SHLD	11H
 6799/8295 :                                    LXI		H,RST3
 6800/8295 :                            		STA		18H
 6801/8295 :                            		SHLD	19H
 6802/8295 :                                    LXI		H,RST4
 6803/8295 :                            		STA		20H
 6804/8295 :                            		SHLD	21H
 6805/8295 :                                    LXI		H,RST5
 6806/8295 :                            		STA		28H
 6807/8295 :                            		SHLD	29H
 6808/8295 :                                    LXI		H,RST6
 6809/8295 :                            		STA		30H
 6810/8295 :                            		SHLD	31H
 6811/8295 :                                    LHLD    BDOS+1  ;LOCATE TOP OF RAM
 6812/8295 :                                    JMP     INIT1   ;CONTINUE AS IN NON-CPM VERSION
 6813/8295 : [6783]                     	ENDIF
 6814/8295 :                            ;
 6815/8295 :                            ;
 6816/8295 :                                    DS      1       ;DATA STATEMENT FLAG (MUST BE HERE)
 6817/8296 :                            BEGPR:
 6818/8296 :                            ;
 6819/8296 :                                    END
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 115 - 9/26/2024 16:17:21


  Symbol Table (* = unused):
  --------------------------

 ABS :                         0B9E - |  ACIA :                           0 - |
*ACIAINI :                        1 - |  ADDR1 :                       8252 C |
 ADDR2 :                       8254 C |  ADDR3 :                       8256 C |
 ALPHA :                       1B02 - |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ARG :                         1C55 - |  ARGNU :                       1C64 - |
 ASCII :                       0D71 - |  ATN :                         0AAB - |
 ATN1 :                        0ABA C |  ATNCO :                       1DD4 C |
*BASIC :                          0 C | *BDOS :                           5 - |
 BEGPR :                       8296 C |  BINFL :                       1C6A - |
 BOOT :                           0 - |  BZERO :                       8000 - |
*CASESENSITIVE :                  0 - |  CERCE :                       10E2 C |
 CHA1 :                         92A C |  CHA2 :                         93F C |
 CHA3 :                         96F C |  CHANG :                        901 - |
 CHRFN :                       0D66 - | *CKERR :                       1C04 - |
 CMACT :                       826B C |  COLUM :                       8276 C |
*COMP :                          10 C |  COMP1 :                         13 C |
 COMP2 :                       1A5A - |  COMP3 :                       1A5E C |
 COMP4 :                       1A5F C |  COMP5 :                       1A62 C |
 COMP6 :                       1A6F C |  CONC2 :                       0D13 C |
 CONC3 :                       0D1B C |  CONC4 :                       0D23 C |
 CONC5 :                       0D39 C |  CONC6 :                       0D4D C |
 CONCA :                       0CFD - | *CONSTPI :        3.141592653589793 - |
 CONTI :                        2C5 - |  COPYD :                       1C2E C |
 COPYH :                       1C39 C |  COS :                         0A8A - |
 CPM :                            0 - |  CPY4D :                       1C2C C |
 CPY4H :                       1C37 C |  CR1 :                         1910 C |
 CRLF :                        1935 C | *CSTAT :                          3 - |
 CVERR :                       1C00 - |  DAERR :                       1BF8 - |
 DATAB :                       8291 C |  DATAL :                       1E89 C |
 DATAP :                       828F C | *DATE :                 "9/26/2024" - |
 DEFLI :                       1F0C C |  DEXP :                        8275 C |
 DIM :                          988 - |  DIM1 :                         9A6 C |
 DIM2 :                         9D8 C |  DIM3 :                         9E3 C |
 DIM4 :                         9EE C |  DIMSW :                       8072 C |
 DV8 :                         1293 C |  ECHO :                        1992 C |
 ED7A :                         14B C |  ED7B :                         154 C |
 EDIT1 :                        0F6 C |  EDIT2 :                        10B C |
 EDIT3 :                        111 C |  EDIT5 :                        122 C |
 EDIT6 :                        137 C |  EDIT7 :                        143 C |
 EDIT8 :                        11D C |  EDM1 :                        1374 C |
 EDM2A :                       1383 C |  EDM3 :                        1387 C |
 EDM4 :                        139B C |  EDSW :                        8076 C |
 ELOOP :                       0B74 C |  EM :                           0FE - |
 ENDIT :                        1CC - |  ENDLI :                       8272 C |
 ENDXP :                       1122 C |  EOL :                         1A75 - |
 EOL1 :                        1A84 C |  ERRMS :                       1E3E C |
 ERROR :                       1C12 C |  EV1 :                         1197 C |
 EV10 :                        12D0 C |  EV11 :                        1329 C |
 EV1A :                        119F C |  EV2 :                         11A7 C |
 EV2A :                        11C7 C |  EV3 :                         11DE - |
 EV3A :                        11FF C |  EV4 :                         1223 C |
 EV4A :                        1237 C |  EV4B :                        1242 C |
 EV5 :                         124F C |  EV6 :                         126D C |
 EV7 :                         1289 C |  EV9 :                         129E C |
 EVAL :                        1191 C |  EVCOM :                       134E C |
 EVLD :                        135A C |  EVLD1 :                       136B C |
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 116 - 9/26/2024 16:17:21


 EVNEG :                       133A C |  EVPS :                        0A62 C |
 EVPS1 :                       0A6C C |  EVPS2 :                       0A73 C |
 EXEC :                         172 - |  EXEC1 :                        182 C |
 EXP :                         0B41 - |  EXP1 :                        0B5B C |
 EXPCO :                       1E20 C |  EXPR :                        0F57 - |
 EXPRS :                       8250 C |  EZERO :                       8077 - |
 FACC :                        8258 C |  FACDE :                       1F30 - |
 FAD1 :                        18C8 C |  FADD :                        160E - |
 FADD3 :                       162D C |  FADD4 :                       163A C |
 FADD6 :                       165D C |  FADD7 :                       165F C |
 FADD9 :                       166B - |  FADDA :                       1693 - |
 FADDJ :                       12F2 C |  FADDT :                       18C7 C |
 FADT3 :                       18C5 C |  FALS :                         1E9 - |
*FALSE :                          0 - |  FATAL :                        0F7 - |
 FBIN :                        1C47 - |  FBIN1 :                       1C52 C |
 FDE1 :                        1F45 C |  FDE2 :                        1F52 C |
 FDEC :                        0CF1 C |  FDIV :                        1772 - |
 FDIV3 :                       1791 C |  FDIV5 :                       17A7 C |
 FDIV6 :                       17C1 C |  FDIV7 :                       17C7 C |
 FDIV8 :                       17D5 C |  FEXP :                        18B3 - |
 FIN :                         1405 - |  FIN2 :                        1415 C |
 FIN3 :                        143B C |  FIN4 :                        1443 C |
 FIN5 :                        1445 C |  FIN6 :                        1452 C |
 FIN7 :                        1457 C |  FIN8 :                        145F C |
 FIN8A :                       1477 C |  FIN9 :                        1479 C |
 FINB :                        1495 C |  FIND :                        14BC C |
 FIND0 :                       14BF C |  FIND1 :                       1F5C C |
 FIND2 :                       1F76 C |  FIND3 :                       1F7E C |
 FIX :                         1FA6 - |  FIX1 :                        1FCF C |
 FIX2 :                        1FDF C |  FIX3 :                        201B C |
 FIX4 :                        2027 C |  FIX4A :                       2028 C |
 FIX5 :                        2034 C | *FLOATMAX :      1.797693134866E308 - |
 FMTEN :                       14AC C |  FMUL :                        16EF - |
 FMUL5 :                       1719 C |  FMUL6 :                       1725 C |
 FMUL7 :                       172B C |  FMUL8 :                       1741 C |
 FMUL9 :                       1747 C |  FN :                          0E88 - |
 FN2 :                         0ECA C |  FN3 :                         0EE8 C |
 FN4 :                         0EF0 C |  FNARG :                       826C C |
 FND3 :                        0C81 C |  FNEG1 :                       16A1 C |
 FNEG2 :                       16A8 C |  FNL :                         1015 C |
 FNL3 :                        102D C |  FNLIT :                       1F0F C |
 FNMOD :                       8288 C |  FNORM :                       16B4 - |
 FNRM1 :                       16C6 C |  FNRM2 :                       16D0 C |
 FNRM3 :                       16DC C |  FOR :                          3BC - |
 FOR1 :                         401 C |  FOR2 :                         405 C |
 FOR4 :                         429 C |  FOR5 :                         435 C |
 FOR6 :                         445 C |  FOR7 :                         451 C |
 FOR8 :                         458 C |  FOR9 :                         489 C |
 FORA :                         4B7 C |  FORNE :                       8000 C |
 FOUT :                        14C7 - |  FOUT0 :                       14D8 C |
 FOUT2 :                       14E2 C |  FOUT3 :                       14F3 C |
 FOUT4 :                       14FE C |  FOUT5 :                       150E C |
 FOUT6 :                       1514 C |  FOUT7 :                       1537 C |
 FOUT9 :                       1547 C |  FOUTA :                       1556 C |
 FOUTB :                       1559 C |  FOUTC :                       155E C |
 FOUTD :                       1563 C |  FOUTH :                       1570 C |
 FOUTI :                       1587 C |  FOUTJ :                       158B C |
 FOUTK :                       15AA C |  FOUTL :                       15AD C |
 FOUTM :                       15B0 C |  FOUTN :                       15C8 C |
 FOUTO :                       15D3 C |  FOUTP :                       15D4 C |
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 117 - 9/26/2024 16:17:21


 FOUTQ :                       15E0 C |  FOUTR :                       15E8 C |
 FOUTS :                       15F6 C |  FOUTT :                       1600 C |
 FOUTU :                       1534 C |  FOUTV :                       14ED C |
 FOV1 :                        1854 C |  FOVUN :                       1848 - |
 FREE :                         1AE - |  FSB1 :                        18BB C |
 FSHFT :                       18D2 - |  FSUB :                        16E3 - |
 FSUBT :                       18BA - |  FTEMP :                       825C C |
 FTEST :                       18A5 - |  FUNC0 :                       0FF2 C |
 FUNC4 :                       100D C |  FUNCT :                       1C79 - |
 GETCH :                       1A20 C |  GETCM :                        0D7 - |
 GETS1 :                       17F4 C |  GETS2 :                       1805 C |
 GETS3 :                       1806 C |  GETS4 :                       1816 C |
 GETS5 :                       1818 C |  GETS8 :                       1826 C |
 GETS9 :                       1843 C |  GETST :                       17E4 C |
 GOSBL :                       1E9D C |  GOSU1 :                        31A C |
 GOSUB :                        311 C |  GOTO :                         2CD C |
 GOTO2 :                        2DD C |  GOTOL :                       1EBE C |
 GTEMP :                       1AE1 - |  HALFP :                       1DD8 C |
*HAS64 :                          1 - |  HUNTER :                         0 - |
 IF1 :                          4DE C |  IF2 :                          4E2 C |
 IF3 :                          4E6 C |  IF4 :                          4EF C |
 IF5 :                          4F7 C |  IF6 :                          501 C |
 IF8 :                          539 C |  IF9 :                          547 C |
 IFF :                          57F C |  IFG :                          588 C |
 IFH :                          591 C |  IFI :                          599 C |
 IFJ :                          5A7 C |  IFK :                          5AD C |
 IFL :                          5B4 C |  IFM :                          5BE C |
 IFN :                          5C3 C |  IFSTM :                        4C0 - |
 IFTYP :                       8226 C |  ILSW :                        8074 C |
 IMMED :                       807C C |  IMSAI :                          0 - |
*INCPC :                         20 C |  INDX :                        8223 C |
 INIT1 :                         7E C |  INIT2 :                         95 C |
 INIT3 :                        0A2 C |  INP :                         0CE1 - |
 INPL :                         77C - |  INPL1 :                        79E C |
 INPL2 :                        7AA C |  INPU1 :                        70A C |
 INPU2 :                        715 C |  INPU3 :                        719 C |
 INPU4 :                        724 C |  INPU5 :                        737 C |
 INPU6 :                        738 C |  INPU7 :                        74C C |
 INPU8 :                        75F C |  INPU9 :                        764 C |
 INPUA :                        773 C |  INPUB :                        76D C |
 INPUT :                        6F8 - |  INS :                         1158 C |
 INS1 :                        1159 C |  INST1 :                       0E32 C |
 INST2 :                       0E37 C |  INST3 :                       0E3E C |
 INST5 :                       0E5A C |  INST6 :                       0E5E C |
 INST8 :                       0E69 C |  INST9 :                       0E7A C |
 INSTA :                       0E83 C |  INSTR :                       0E28 - |
 INT :                         0BB9 - |  INT2 :                        0BC7 C |
 INT3 :                        0BD6 C |  INT4 :                        0BE0 C |
 INT5 :                        0BE6 C |  IOBUF :                       80CE C |
 IRAM :                         15F C |  JMPTB :                       1E4E - |
 JUMP :                        2073 - |  KEY :                          1CF C |
 LARGE :                          1 - |  LDALP :                       0F86 C |
 LDDTN :                       1068 C |  LDDTP :                       107C C |
 LDF :                         0F76 C |  LDFN :                        0FCB C |
 LDFN1 :                       0FD1 C |  LDFNC :                       1056 C |
*LDFPA :                         28 C |  LDNUM :                       0F73 C |
 LDPI :                        104C C |  LDRND :                       103A C |
 LDV :                         0FB5 C |  LDV1 :                        0F9D C |
 LDV2 :                        0FAA C |  LDV2A :                       13AE C |
 LEFT :                        0DDC - |  LENFN :                       0D60 - |
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 118 - 9/26/2024 16:17:21


 LET :                          5C8 - |  LET1 :                         5E3 C |
 LET2 :                         5FD C |  LET2A :                        608 C |
 LET3 :                         614 C |  LET4 :                         622 C |
 LET5 :                         62E C |  LET6 :                         63B C |
 LET7 :                         650 C |  LET8 :                         65D C |
 LET9 :                         660 C |  LINE :                        8289 C |
 LINEH :                       824D C |  LINEL :                       824B C |
 LINEN :                       8077 C |  LINEO :                       19EA - |
 LIST :                         239 - |  LIST1 :                        269 C |
 LIST2 :                        26C C |  LIST4 :                        28C C |
 LIST5 :                        29C C |  LIST6 :                        2A6 C |
 LIST7 :                        2AC C |  LIST8 :                        2BC C |
*LISTON :                         1 - |  LIT1 :                        1096 C |
 LIT2 :                        10BA C |  LIT3 :                        10D6 C |
 LITST :                       1090 C |  LLINE :                       1D86 C |
 LN :                          0AEA - |  LN0 :                         0B03 C |
 LN1 :                         0B0F C |  LN2 :                         0B14 C |
 LN2C :                        1DB0 C |  LN2E :                        1E0C C |
 LNC :                         1E24 C |  LNCO :                        1E08 C |
 LOCAT :                       1F59 - |  LOG :                         0B38 - |
 LOOKD :                       0F6C - |  LOOKO :                       10F4 C |
 LOUT :                        19F5 - | *MACEXP :                         7 - |
 MDSGN :                       1756 C |  MID0 :                        0DF8 C |
 MID1 :                        0E06 C |  MID2 :                        0E13 C |
 MID3 :                        0E17 C |  MID4 :                        0E1F C |
 MIDFN :                       0DEE - | *MOMCPU :                      8085 - |
*MOMCPUNAME :                "8085" - |  MON85 :                          0 - |
 MSTRCLK :                        1 - |  MULTI :                       8274 C |
 NEG :                         0C51 - |  NEGON :                       1DAC C |
*NESTMAX :                      100 - |  NEW :                          196 - |
*NEW0 :                         1A1 C |  NEW1 :                         1A6 C |
 NEXT :                         669 C |  NEXT1 :                        67F C |
 NEXT2 :                        68A C |  NEXT3 :                        693 C |
 NEXT5 :                        6CE C |  NEXT6 :                        6D2 C |
 NEXT7 :                        6C6 C |  NEXTL :                       1E96 C |
 NOTBS :                       1971 - |  NOTCH :                       1987 C |
 NOTCO :                       194E C |  NOTCR :                       1940 C |
 NOTEO :                       1A8E - |  NOTZ1 :                       1A03 C |
 NOTZ2 :                       1A13 C |  NRNDX :                       1D54 C |
 NS :                          828E C |  NULLI :                       1DEE C |
 NUM1 :                        0D89 C |  NUMEN :                       1B11 C |
 NUMER :                       1B0B - |  NUMFN :                       0D7E - |
 NXERR :                       1BFC - |  ON :                           88C - |
 ON3 :                          8B2 C |  ON3A :                         8B3 C |
 ON4 :                          8C6 C |  ON5 :                          8D0 C |
 ON6 :                          8D4 C |  ON7 :                          8E0 C |
 ON8 :                          8E9 C |  ON9 :                          8F4 C |
 ONE :                         1DEC C |  OP1 :                         112F C |
 OP2 :                         116E C |  OP3 :                         1183 C |
 OP4 :                         118E C |  OPLP1 :                       113A C |
 OPLP2 :                       113E C |  OT1 :                         199E C |
 OT2 :                         19AD C |  OT4 :                         19BC C |
 OUTA :                        8220 C |  OUTP :                         821 - |
 OUTSW :                       8073 C |  OVERR :                       1C08 - |
 PACK :                        1A96 - |  PARCT :                       8268 C |
*PCHOF :                       1D4B C |  PEEK :                        204A - |
 PI :                          1DA4 C |  PILIT :                       1D99 C |
 PK1 :                         1A9E C |  PK3 :                         1AB2 C |
 POKE :                        2055 - |  POS :                         0CF7 - |
 POWER :                       12FA C |  PRCNT :                       1A4E - |
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 119 - 9/26/2024 16:17:21


*PRERR :                         30 C |  PRIN2 :                        362 C |
 PRIN4 :                        32D C |  PRIN5 :                        36D C |
 PRIN6 :                        376 C |  PRIN7 :                        360 C |
 PRIN8 :                        381 C |  PRIN9 :                        384 C |
 PRINA :                        38A C |  PRINB :                        3A1 C |
 PRINC :                        3AA C |  PRINT :                        32C - |
 PRLIN :                       1BD2 - |  PROGE :                       8293 C |
 PROMP :                       824F C |  PROTC :                        0AC C |
 PRSW :                        828D C |  PT_SUPP :                        0 - |
 QTRPI :                       1DA8 C |  RAM :                         8000 - |
*RAMEND :                     0F800 - |  RAMSTRT :                     8000 - |
 RANDO :                        876 - |  RBOUT :                       1D82 C |
 RDY :                          0D1 - | *RDYM :                         0CE C |
 READ :                         7B8 - |  READ1 :                        7C7 C |
 READ2 :                        7E2 C |  READ3 :                        7F2 C |
 READ4 :                        7F7 C |  READ5 :                        803 C |
 READ6 :                        80A C |  READ7 :                        81A C |
 READ8 :                        81B C |  READY :                       1E28 - |
 REDIM :                        9F4 C |  REDM1 :                       0A0A C |
 REIN :                        18DE C |  REL :                         8225 C |
*RELAXED :                        0 - |  RESTO :                        2ED C |
 RETUR :                        2F9 C |  RIGHT :                       0DE5 - |
 RND :                         0C5B - |  RND1 :                        0C6D C |
 RND2 :                        0C73 C |  RND4 :                        0C90 C |
 RND5 :                        0C9C C |  RND6 :                        0CA4 C |
 RND7 :                        0CD8 C |  RNDLI :                       1C95 C |
 RNDP :                        1D4E C |  RNDS :                        827D C |
 RNDSW :                       8287 C |  RNDX :                        8277 C |
*RNDY :                        8279 C |  RNDZ :                        827B C |
*ROMEND :                      2081 - |  ROMSTRT :                        0 - |
 RSSGN :                       1768 C |  RST1 :                           8 C |
*RST2 :                          10 C | *RST3 :                          18 C |
*RST4 :                          20 C |  RST4A :                         3B C |
 RST4B :                         44 C |  RST5 :                          28 C |
*RST6 :                          30 C |  RTERR :                       1BF4 - |
*RUBOUT :                        7F - |  RUN :                          1E9 C |
 RUN1 :                         1F9 C |  RUN2 :                         203 C |
 RUN3 :                         215 C |  RUN4 :                         216 C |
 RUN7 :                         22D C |  RUNCM :                        1D2 C |
 RUNSW :                       8075 C |  RX_MASK :                        2 - |
 SADR :                        1AFA C |  SCH0 :                        1B1D C |
 SCH1 :                        1B20 C |  SCH2 :                        1B42 C |
 SCH3 :                        1B46 C |  SCH4 :                        1B5E C |
 SCH5 :                        1B62 C |  SCH6 :                        1B70 C |
 SCH7 :                        1B84 C |  SCH8 :                        1B99 C |
 SCH9 :                        1BA5 C |  SEARC :                       1B15 - |
*SEEK :                        1F81 - |  SEEK1 :                       1F81 C |
 SEEK2 :                       1F94 C |  SEEK3 :                       1FA4 C |
*SFPA :                          18 C |  SGN :                         0BA7 - |
 SGN1 :                        0BAD C |  SIN :                         0A18 - |
 SIN1 :                        0A20 C |  SIN3A :                       0A4F C |
 SINCO :                       1DE8 C |  SKP2Z :                       1ADA - |
 SKPP :                        1078 C |  SNERR :                       1BF0 - |
 SPAC1 :                       0DC0 C |  SPACE :                       0DB8 - |
 SPCTR :                       8269 C |  SQC1 :                        1DB4 C |
 SQC2 :                        1DB8 C |  SQC3 :                        1DBC C |
 SQR :                         0BFE - |  SQR1 :                        0C3B C |
 SQUI2 :                       1ACE C |  SQUIS :                       1AC3 - |
 STACK :                       828B C |  STEPL :                       1D8F C |
 STERR :                       1BEC - |  STMT :                        8270 C |
 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 120 - 9/26/2024 16:17:21


 STOP :                         849 - |  STOPM :                       1E2F - |
 STR11 :                       0DD5 C |  STRFN :                       0DC8 - |
 STRIN :                       8120 C |  SUB1 :                        186F C |
 SUB2 :                        187A C |  SUB3 :                        1884 C |
 SUB4 :                        1893 C |  SUBSC :                       185C - |
 SVSGN :                       1760 C |  TABLI :                       1D8B C |
 TABST :                       19C0 - |  TAN :                         0A93 - |
 TAPES :                       8071 C | *TBASE :                        100 - |
 TBLP :                        19CF C |  TBLP2 :                       19D6 C |
 TBON :                        19DB C |  TBSPA :                       19E0 C |
 TEMP1 :                       822F C |  TEMP2 :                       8233 C |
 TEMP3 :                       8237 C |  TEMP4 :                       823B C |
 TEMP5 :                       823F C | *TEMP6 :                       8243 C |
 TEMP7 :                       8247 C |  TEN :                         1DA0 C |
 TERMI :                       18DB - |  TERMM :                       199E - |
 TERMO :                       1996 - |  TEST1 :                       1927 C |
 TESTO :                       1926 - |  THENL :                       1D94 C |
*TIME :                  "16:17:20" - |  TOLIT :                       1EC0 C |
 TREAD :                       18F4 - | *TRNDS :                       8285 C |
 TRNDX :                       827F C | *TRNDY :                       8281 C |
*TRNDZ :                       8283 C |  TRU :                          558 C |
*TRUE :                           1 - | *TSTC :                           8 C |
 TSTC1 :                       1A3F C |  TSTCC :                       1A1B - |
 TSTEL :                       1A89 - |  TVAR1 :                       8227 C |
 TVAR2 :                       822B C |  TWO :                         1D9C C |
 TX_MASK :                        1 - |  UART :                           1 - |
 UARTB :                          8 - |  UARTC :                          9 - |
 UARTD :                          8 - |  UARTINI :                        1 - |
 UARTS :                          9 - |  ULERR :                       1BE4 C |
 UNERR :                       1C0D C |  VAL :                         0D91 - |
 VAL1 :                        0D9D C |  VAL2 :                        0DA6 C |
 VAR :                         1BAA - |  VAR2 :                        1BBF C |
 VAR3 :                        1BCA C |  VERS :                        1D61 - |
*VERSION :                     142F - |  WHATL :                       1D5C C |
 XEQ :                          1D7 - | *XSQR :                        131F C |
 Z1 :                          1A09 C |  Z2 :                          1A19 C |
*Z80SYNTAX :                      0 - |  ZEROM :                       1C3F - |
 ZMERR :                       1BE8 - |

    667 symbols
     46 unused symbols

 AS V1.42 Beta [Bld 276] - Source File 8kbasic-mini85.asm - Page 121 - 9/26/2024 16:17:21


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.12 seconds assembly time

   6820 lines source file
      2 passes
      0 errors
      0 warnings
