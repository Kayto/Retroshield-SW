 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 1 - 9/26/2024 12:44:33


    1/   0 :                            ;*************************************************************
    2/   0 :                            ; 
    3/   0 :                            ;                 TINY BASIC FOR INTEL 8080
    4/   0 :                            ;                       VERSION 2.0
    5/   0 :                            ;                     BY LI-CHEN WANG
    6/   0 :                            ;                  MODIFIED AND TRANSLATED
    7/   0 :                            ;                    TO INTEL MNEMONICS
    8/   0 :                            ;                     BY ROGER RAUSKOLB
    9/   0 :                            ;                      10 OCTOBER,1976
   10/   0 :                            ;                        @COPYLEFT
   11/   0 :                            ;                   ALL WRONGS RESERVED
   12/   0 :                            ; 
   13/   0 :                            ;*************************************************************
   14/   0 :                            ; 
   15/   0 :                            ; *** ZERO PAGE SUBROUTINES ***
   16/   0 :                            ; 
   17/   0 :                            ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
   18/   0 :                            ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
   19/   0 :                            ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
   20/   0 :                            ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
   21/   0 :                            ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
   22/   0 :                            ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
   23/   0 :                            ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
   24/   0 :                            ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
   25/   0 :                            ; 
   26/   0 :                            DWA     MACRO WHERE
   27/   0 :                                    DB   (WHERE >> 8) + 128
   28/   0 :                                    DB   WHERE & 0FFH
   29/   0 :                                    ENDM
   30/   0 :                            ;
   31/   0 :                                    ORG  0H
   32/   0 : 31 00 14                   START:  LXI  SP,STACK                   ;*** COLD START ***
   33/   3 : 3E FF                              MVI  A,0FFH
   34/   5 : C3 42 06                           JMP  INIT
   35/   8 :                            ;
   36/   8 : E3                                 XTHL                            ;*** TSTC OR RST 1 ***
   37/   9 : EF                                 RST  5                          ;IGNORE BLANKS AND
   38/   A : BE                                 CMP  M                          ;TEST CHARACTER
   39/   B : C3 68 00                           JMP  TC1                        ;REST OF THIS IS AT TC1
   40/   E :                            ;
   41/   E : 3E 0D                      CRLF:   MVI  A,CR                       ;*** CRLF ***
   42/  10 :                            ;
   43/  10 : F5                                 PUSH PSW                        ;*** OUTC OR RST 2 ***
   44/  11 : 3A 00 10                           LDA  OCSW                       ;PRINT CHARACTER ONLY
   45/  14 : B7                                 ORA  A                          ;IF OCSW SWITCH IS ON
   46/  15 : C3 6B 06                           JMP  OC2                        ;REST OF THIS IS AT OC2
   47/  18 :                            ;
   48/  18 : CD 71 03                           CALL EXPR2                      ;*** EXPR OR RST 3 ***
   49/  1B : E5                                 PUSH H                          ;EVALUATE AN EXPRESSION
   50/  1C : C3 2D 03                           JMP  EXPR1                      ;REST OF IT AT EXPR1
   51/  1F : 57                                 DB   'W'
   52/  20 :                            ;
   53/  20 : 7C                                 MOV  A,H                        ;*** COMP OR RST 4 ***
   54/  21 : BA                                 CMP  D                          ;COMPARE HL WITH DE
   55/  22 : C0                                 RNZ                             ;RETURN CORRECT C AND
   56/  23 : 7D                                 MOV  A,L                        ;Z FLAGS
   57/  24 : BB                                 CMP  E                          ;BUT OLD A IS LOST
   58/  25 : C9                                 RET
   59/  26 : 41 4E                              DB   "AN"
   60/  28 :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 2 - 9/26/2024 12:44:33


   61/  28 : 1A                         SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
   62/  29 : FE 20                              CPI  20H                        ;IGNORE BLANKS
   63/  2B : C0                                 RNZ                             ;IN TEXT (WHERE DE->)
   64/  2C : 13                                 INX  D                          ;AND RETURN THE FIRST
   65/  2D : C3 28 00                           JMP  SS1                        ;NON-BLANK CHAR. IN A
   66/  30 :                            ;
   67/  30 : F1                                 POP  PSW                        ;*** FINISH/RST 6 ***
   68/  31 : CD B3 04                           CALL FIN                        ;CHECK END OF COMMAND
   69/  34 : C3 C6 04                           JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
   70/  37 : 47                                 DB   'G'
   71/  38 :                            ;
   72/  38 : EF                                 RST  5                          ;*** TSTV OR RST 7 ***
   73/  39 : D6 40                              SUI  40H                        ;TEST VARIABLES
   74/  3B : D8                                 RC                              ;C:NOT A VARIABLE
   75/  3C : C2 58 00                           JNZ  TV1                        ;NOT "@" ARRAY
   76/  3F : 13                                 INX  D                          ;IT IS THE "@" ARRAY
   77/  40 : CD 1A 04                           CALL PARN                       ;@ SHOULD BE FOLLOWED
   78/  43 : 29                                 DAD  H                          ;BY (EXPR) AS ITS INDEX
   79/  44 : DA 9F 00                           JC   QHOW                       ;IS INDEX TOO BIG?
   80/  47 : D5                                 PUSH D                          ;WILL IT OVERWRITE
   81/  48 : EB                                 XCHG                            ;TEXT?
   82/  49 : CD 59 04                           CALL SIZE                       ;FIND SIZE OF FREE
   83/  4C : E7                                 RST  4                          ;AND CHECK THAT
   84/  4D : DA F4 04                           JC   ASORRY                     ;IF SO, SAY "SORRY"
   85/  50 : 21 66 13                           LXI  H,VARBGN                   ;IF NOT GET ADDRESS
   86/  53 : CD 7C 04                           CALL SUBDE                      ;OF @(EXPR) AND PUT IT
   87/  56 : D1                                 POP  D                          ;IN HL
   88/  57 : C9                                 RET                             ;C FLAG IS CLEARED
   89/  58 : FE 1B                      TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
   90/  5A : 3F                                 CMC                             ;IF NOT RETURN C FLAG
   91/  5B : D8                                 RC
   92/  5C : 13                                 INX  D                          ;IF A THROUGH Z
   93/  5D : 21 66 13                           LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
   94/  60 : 07                                 RLC                             ;THAT VARIABLE
   95/  61 : 85                                 ADD  L                          ;AND RETURN IT IN HL
   96/  62 : 6F                                 MOV  L,A                        ;WITH C FLAG CLEARED
   97/  63 : 3E 00                              MVI  A,0
   98/  65 : 8C                                 ADC  H
   99/  66 : 67                                 MOV  H,A
  100/  67 : C9                                 RET
  101/  68 :                            ;
  102/  68 :                            ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
  103/  68 :                            ;       RST  5                          ;THIS IS AT LOC. 8
  104/  68 :                            ;       CMP  M                          ;AND THEN JUMP HERE
  105/  68 : 23                         TC1:    INX  H                          ;COMPARE THE BYTE THAT
  106/  69 : CA 73 00                           JZ   TC2                        ;FOLLOWS THE RST INST.
  107/  6C : C5                                 PUSH B                          ;WITH THE TEXT (DE->)
  108/  6D : 4E                                 MOV  C,M                        ;IF NOT =, ADD THE 2ND
  109/  6E : 06 00                              MVI  B,0                        ;BYTE THAT FOLLOWS THE
  110/  70 : 09                                 DAD  B                          ;RST TO THE OLD PC
  111/  71 : C1                                 POP  B                          ;I.E., DO A RELATIVE
  112/  72 : 1B                                 DCX  D                          ;JUMP IF NOT =
  113/  73 : 13                         TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
  114/  74 : 23                                 INX  H                          ;AND CONTINUE
  115/  75 : E3                                 XTHL
  116/  76 : C9                                 RET
  117/  77 :                            ;
  118/  77 : 21 00 00                   TSTNUM: LXI  H,0                        ;*** TSTNUM ***
  119/  7A : 44                                 MOV  B,H                        ;TEST IF THE TEXT IS
  120/  7B : EF                                 RST  5                          ;A NUMBER
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 3 - 9/26/2024 12:44:33


  121/  7C : FE 30                      TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
  122/  7E : D8                                 RC                              ;B AND HL
  123/  7F : FE 3A                              CPI  3AH                        ;IF NUMBERS, CONVERT
  124/  81 : D0                                 RNC                             ;TO BINARY IN HL AND
  125/  82 : 3E F0                              MVI  A,0F0H                     ;SET B TO # OF DIGITS
  126/  84 : A4                                 ANA  H                          ;IF H>255, THERE IS NO
  127/  85 : C2 9F 00                           JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
  128/  88 : 04                                 INR  B                          ;B COUNTS # OF DIGITS
  129/  89 : C5                                 PUSH B
  130/  8A : 44                                 MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
  131/  8B : 4D                                 MOV  C,L
  132/  8C : 29                                 DAD  H                          ;WHERE 10* IS DONE BY
  133/  8D : 29                                 DAD  H                          ;SHIFT AND ADD
  134/  8E : 09                                 DAD  B
  135/  8F : 29                                 DAD  H
  136/  90 : 1A                                 LDAX D                          ;AND (DIGIT) IS FROM
  137/  91 : 13                                 INX  D                          ;STRIPPING THE ASCII
  138/  92 : E6 0F                              ANI  0FH                        ;CODE
  139/  94 : 85                                 ADD  L
  140/  95 : 6F                                 MOV  L,A
  141/  96 : 3E 00                              MVI  A,0
  142/  98 : 8C                                 ADC  H
  143/  99 : 67                                 MOV  H,A
  144/  9A : C1                                 POP  B
  145/  9B : 1A                                 LDAX D                          ;DO THIS DIGIT AFTER
  146/  9C : F2 7C 00                           JP   TN1                        ;DIGIT. S SAYS OVERFLOW
  147/  9F : D5                         QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
  148/  A0 : 11 A6 00                   AHOW:   LXI  D,HOW
  149/  A3 : C3 CA 04                           JMP  ERROR
  150/  A6 : 48 4F 57 3F                HOW:    DB   "HOW?"
  151/  AA : 0D                                 DB   CR
  152/  AB : 4F 4B                      OK:     DB   "OK"
  153/  AD : 0D                                 DB   CR
  154/  AE : 57 48 41 54 3F             WHAT:   DB   "WHAT?"
  155/  B3 : 0D                                 DB   CR
  156/  B4 : 53 4F 52 52 59             SORRY:  DB   "SORRY"
  157/  B9 : 0D                                 DB   CR
  158/  BA :                            ;
  159/  BA :                            ;*************************************************************
  160/  BA :                            ;
  161/  BA :                            ; *** MAIN ***
  162/  BA :                            ;
  163/  BA :                            ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
  164/  BA :                            ; AND STORES IT IN THE MEMORY.
  165/  BA :                            ;
  166/  BA :                            ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
  167/  BA :                            ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
  168/  BA :                            ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
  169/  BA :                            ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
  170/  BA :                            ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
  171/  BA :                            ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
  172/  BA :                            ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
  173/  BA :                            ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
  174/  BA :                            ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
  175/  BA :                            ;
  176/  BA :                            ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
  177/  BA :                            ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
  178/  BA :                            ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
  179/  BA :                            ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
  180/  BA :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 4 - 9/26/2024 12:44:33


  181/  BA :                            ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
  182/  BA :                            ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
  183/  BA :                            ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
  184/  BA :                            ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
  185/  BA :                            ;
  186/  BA :                            ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
  187/  BA :                            ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
  188/  BA :                            ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
  189/  BA :                            ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
  190/  BA :                            ;
  191/  BA : 31 00 14                   RSTART: LXI  SP,STACK
  192/  BD : CD 0E 00                   ST1:    CALL CRLF                       ;AND JUMP TO HERE
  193/  C0 : 11 AB 00                           LXI  D,OK                       ;DE->STRING
  194/  C3 : 97                                 SUB  A                          ;A=0
  195/  C4 : CD 60 05                           CALL PRTSTG                     ;PRINT STRING UNTIL CR
  196/  C7 : 21 CE 00                           LXI  H,ST2+1                    ;LITERAL 0
  197/  CA : 22 01 10                           SHLD CURRNT                     ;CURRENT->LINE # = 0
  198/  CD : 21 00 00                   ST2:    LXI  H,0
  199/  D0 : 22 09 10                           SHLD LOPVAR
  200/  D3 : 22 03 10                           SHLD STKGOS
  201/  D6 : 3E 3E                      ST3:    MVI  A,3EH                      ;PROMPT '>' AND
  202/  D8 : CD FA 04                           CALL GETLN                      ;READ A LINE
  203/  DB : D5                                 PUSH D                          ;DE->END OF LINE
  204/  DC : 11 9D 13                           LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
  205/  DF : CD 77 00                           CALL TSTNUM                     ;TEST IF IT IS A NUMBER
  206/  E2 : EF                                 RST  5
  207/  E3 : 7C                                 MOV  A,H                        ;HL=VALUE OF THE # OR
  208/  E4 : B5                                 ORA  L                          ;0 IF NO # WAS FOUND
  209/  E5 : C1                                 POP  B                          ;BC->END OF LINE
  210/  E6 : CA 37 07                           JZ   DIRECT
  211/  E9 : 1B                                 DCX  D                          ;BACKUP DE AND SAVE
  212/  EA : 7C                                 MOV  A,H                        ;VALUE OF LINE # THERE
  213/  EB : 12                                 STAX D
  214/  EC : 1B                                 DCX  D
  215/  ED : 7D                                 MOV  A,L
  216/  EE : 12                                 STAX D
  217/  EF : C5                                 PUSH B                          ;BC,DE->BEGIN, END
  218/  F0 : D5                                 PUSH D
  219/  F1 : 79                                 MOV  A,C
  220/  F2 : 93                                 SUB  E
  221/  F3 : F5                                 PUSH PSW                        ;A=# OF BYTES IN LINE
  222/  F4 : CD 38 05                           CALL FNDLN                      ;FIND THIS LINE IN SAVE
  223/  F7 : D5                                 PUSH D                          ;AREA, DE->SAVE AREA
  224/  F8 : C2 0B 01                           JNZ  ST4                        ;NZ:NOT FOUND, INSERT
  225/  FB : D5                                 PUSH D                          ;Z:FOUND, DELETE IT
  226/  FC : CD 54 05                           CALL FNDNXT                     ;FIND NEXT LINE
  227/  FF :                                                                    ;DE->NEXT LINE
  228/  FF : C1                                 POP  B                          ;BC->LINE TO BE DELETED
  229/ 100 : 2A 15 10                           LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
  230/ 103 : CD E5 05                           CALL MVUP                       ;MOVE UP TO DELETE
  231/ 106 : 60                                 MOV  H,B                        ;TXTUNF->UNFILLED AREA
  232/ 107 : 69                                 MOV  L,C
  233/ 108 : 22 15 10                           SHLD TXTUNF                     ;UPDATE
  234/ 10B : C1                         ST4:    POP  B                          ;GET READY TO INSERT
  235/ 10C : 2A 15 10                           LHLD TXTUNF                     ;BUT FIRST CHECK IF
  236/ 10F : F1                                 POP  PSW                        ;THE LENGTH OF NEW LINE
  237/ 110 : E5                                 PUSH H                          ;IS 3 (LINE # AND CR)
  238/ 111 : FE 03                              CPI  3                          ;THEN DO NOT INSERT
  239/ 113 : CA BA 00                           JZ   RSTART                     ;MUST CLEAR THE STACK
  240/ 116 : 85                                 ADD  L                          ;COMPUTE NEW TXTUNF
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 5 - 9/26/2024 12:44:33


  241/ 117 : 6F                                 MOV  L,A
  242/ 118 : 3E 00                              MVI  A,0
  243/ 11A : 8C                                 ADC  H
  244/ 11B : 67                                 MOV  H,A                        ;HL->NEW UNFILLED AREA
  245/ 11C : 11 66 13                           LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
  246/ 11F : E7                                 RST  4                          ;IS ENOUGH SPACE
  247/ 120 : D2 F3 04                           JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
  248/ 123 : 22 15 10                           SHLD TXTUNF                     ;OK, UPDATE TXTUNF
  249/ 126 : D1                                 POP  D                          ;DE->OLD UNFILLED AREA
  250/ 127 : CD EE 05                           CALL MVDOWN
  251/ 12A : D1                                 POP  D                          ;DE->BEGIN, HL->END
  252/ 12B : E1                                 POP  H
  253/ 12C : CD E5 05                           CALL MVUP                       ;MOVE NEW LINE TO SAVE
  254/ 12F : C3 D6 00                           JMP  ST3                        ;AREA
  255/ 132 :                            ;
  256/ 132 :                            ;*************************************************************
  257/ 132 :                            ;
  258/ 132 :                            ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
  259/ 132 :                            ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
  260/ 132 :                            ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
  261/ 132 :                            ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
  262/ 132 :                            ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
  263/ 132 :                            ;
  264/ 132 :                            ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
  265/ 132 :                            ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
  266/ 132 :                            ; GO BACK TO 'RSTART'.
  267/ 132 :                            ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
  268/ 132 :                            ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
  269/ 132 :                            ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
  270/ 132 :                            ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
  271/ 132 :                            ;*************************************************************
  272/ 132 :                            ;
  273/ 132 :                            ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
  274/ 132 :                            ;
  275/ 132 :                            ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
  276/ 132 :                            ;
  277/ 132 :                            ; 'STOP(CR)' GOES BACK TO 'RSTART'
  278/ 132 :                            ;
  279/ 132 :                            ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
  280/ 132 :                            ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
  281/ 132 :                            ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
  282/ 132 :                            ;
  283/ 132 :                            ; THERE ARE 3 MORE ENTRIES IN 'RUN':
  284/ 132 :                            ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
  285/ 132 :                            ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
  286/ 132 :                            ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
  287/ 132 :                            ;
  288/ 132 :                            ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
  289/ 132 :                            ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
  290/ 132 :                            ;
  291/ 132 : CD C2 04                   NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
  292/ 135 : 21 17 10                           LXI  H,TXTBGN
  293/ 138 : 22 15 10                           SHLD TXTUNF
  294/ 13B :                            ;
  295/ 13B : CD C2 04                   STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
  296/ 13E : C3 BA 00                           JMP  RSTART
  297/ 141 :                            ;
  298/ 141 : CD C2 04                   RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
  299/ 144 : 11 17 10                           LXI  D,TXTBGN                   ;FIRST SAVED LINE
  300/ 147 :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 6 - 9/26/2024 12:44:33


  301/ 147 : 21 00 00                   RUNNXL: LXI  H,0                        ;*** RUNNXL ***
  302/ 14A : CD 40 05                           CALL FNDLP                      ;FIND WHATEVER LINE #
  303/ 14D : DA BA 00                           JC   RSTART                     ;C:PASSED TXTUNF, QUIT
  304/ 150 :                            ;
  305/ 150 : EB                         RUNTSL: XCHG                            ;*** RUNTSL ***
  306/ 151 : 22 01 10                           SHLD CURRNT                     ;SET 'CURRENT'->LINE #
  307/ 154 : EB                                 XCHG
  308/ 155 : 13                                 INX  D                          ;BUMP PASS LINE #
  309/ 156 : 13                                 INX  D
  310/ 157 :                            ;
  311/ 157 : CD 83 06                   RUNSML: CALL CHKIO                      ;*** RUNSML ***
  312/ 15A : 21 BC 06                           LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
  313/ 15D : C3 3A 07                           JMP  EXEC                       ;AND EXECUTE IT
  314/ 160 :                            ;
  315/ 160 : DF                         GOTO:   RST  3                          ;*** GOTO EXPR ***
  316/ 161 : D5                                 PUSH D                          ;SAVE FOR ERROR ROUTINE
  317/ 162 : CD C2 04                           CALL ENDCHK                     ;MUST FIND A CR
  318/ 165 : CD 38 05                           CALL FNDLN                      ;FIND THE TARGET LINE
  319/ 168 : C2 A0 00                           JNZ  AHOW                       ;NO SUCH LINE #
  320/ 16B : F1                                 POP  PSW                        ;CLEAR THE PUSH DE
  321/ 16C : C3 50 01                           JMP  RUNTSL                     ;GO DO IT
  322/ 16F :                            ;
  323/ 16F :                            ;*************************************************************
  324/ 16F :                            ;
  325/ 16F :                            ; *** LIST *** & PRINT ***
  326/ 16F :                            ;
  327/ 16F :                            ; LIST HAS TWO FORMS:
  328/ 16F :                            ; 'LIST(CR)' LISTS ALL SAVED LINES
  329/ 16F :                            ; 'LIST #(CR)' START LIST AT THIS LINE #
  330/ 16F :                            ; YOU CAN STOP THE LISTING BY CONTROL C KEY
  331/ 16F :                            ;
  332/ 16F :                            ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
  333/ 16F :                            ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
  334/ 16F :                            ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
  335/ 16F :                            ;
  336/ 16F :                            ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
  337/ 16F :                            ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
  338/ 16F :                            ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
  339/ 16F :                            ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
  340/ 16F :                            ; SPECIFIED, 6 POSITIONS WILL BE USED.
  341/ 16F :                            ;
  342/ 16F :                            ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
  343/ 16F :                            ; DOUBLE QUOTES.
  344/ 16F :                            ;
  345/ 16F :                            ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
  346/ 16F :                            ;
  347/ 16F :                            ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
  348/ 16F :                            ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
  349/ 16F :                            ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
  350/ 16F :                            ;
  351/ 16F : CD 77 00                   LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
  352/ 172 : CD C2 04                           CALL ENDCHK                     ;IF NO # WE GET A 0
  353/ 175 : CD 38 05                           CALL FNDLN                      ;FIND THIS OR NEXT LINE
  354/ 178 : DA BA 00                   LS1:    JC   RSTART                     ;C:PASSED TXTUNF
  355/ 17B : CD D2 05                           CALL PRTLN                      ;PRINT THE LINE
  356/ 17E : CD 83 06                           CALL CHKIO                      ;STOP IF HIT CONTROL-C
  357/ 181 : CD 40 05                           CALL FNDLP                      ;FIND NEXT LINE
  358/ 184 : C3 78 01                           JMP  LS1                        ;AND LOOP BACK
  359/ 187 :                            ;
  360/ 187 : 0E 06                      PRINT:  MVI  C,6                        ;C = # OF SPACES
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 7 - 9/26/2024 12:44:33


  361/ 189 : CF                                 RST  1                          ;IF NULL LIST & ";"
  362/ 18A : 3B                                 DB   3BH
  363/ 18B : 06                                 DB   PR2-$-1
  364/ 18C : CD 0E 00                           CALL CRLF                       ;GIVE CR-LF AND
  365/ 18F : C3 57 01                           JMP  RUNSML                     ;CONTINUE SAME LINE
  366/ 192 : CF                         PR2:    RST  1                          ;IF NULL LIST (CR)
  367/ 193 : 0D                                 DB   CR
  368/ 194 : 06                                 DB   PR0-$-1
  369/ 195 : CD 0E 00                           CALL CRLF                       ;ALSO GIVE CR-LF AND
  370/ 198 : C3 47 01                           JMP  RUNNXL                     ;GO TO NEXT LINE
  371/ 19B : CF                         PR0:    RST  1                          ;ELSE IS IT FORMAT?
  372/ 19C : 23                                 DB   '#'
  373/ 19D : 05                                 DB   PR1-$-1
  374/ 19E : DF                                 RST  3                          ;YES, EVALUATE EXPR.
  375/ 19F : 4D                                 MOV  C,L                        ;AND SAVE IT IN C
  376/ 1A0 : C3 A9 01                           JMP  PR3                        ;LOOK FOR MORE TO PRINT
  377/ 1A3 : CD 6C 05                   PR1:    CALL QTSTG                      ;OR IS IT A STRING?
  378/ 1A6 : C3 B6 01                           JMP  PR8                        ;IF NOT, MUST BE EXPR.
  379/ 1A9 : CF                         PR3:    RST  1                          ;IF ",", GO FIND NEXT
  380/ 1AA : 2C                                 DB   ','
  381/ 1AB : 06                                 DB   PR6-$-1
  382/ 1AC : CD B3 04                           CALL FIN                        ;IN THE LIST.
  383/ 1AF : C3 9B 01                           JMP  PR0                        ;LIST CONTINUES
  384/ 1B2 : CD 0E 00                   PR6:    CALL CRLF                       ;LIST ENDS
  385/ 1B5 : F7                                 RST  6
  386/ 1B6 : DF                         PR8:    RST  3                          ;EVALUATE THE EXPR
  387/ 1B7 : C5                                 PUSH B
  388/ 1B8 : CD 92 05                           CALL PRTNUM                     ;PRINT THE VALUE
  389/ 1BB : C1                                 POP  B
  390/ 1BC : C3 A9 01                           JMP  PR3                        ;MORE TO PRINT?
  391/ 1BF :                            ;
  392/ 1BF :                            ;*************************************************************
  393/ 1BF :                            ;
  394/ 1BF :                            ; *** GOSUB *** & RETURN ***
  395/ 1BF :                            ;
  396/ 1BF :                            ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
  397/ 1BF :                            ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
  398/ 1BF :                            ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
  399/ 1BF :                            ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
  400/ 1BF :                            ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
  401/ 1BF :                            ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
  402/ 1BF :                            ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
  403/ 1BF :                            ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
  404/ 1BF :                            ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
  405/ 1BF :                            ;
  406/ 1BF :                            ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
  407/ 1BF :                            ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
  408/ 1BF :                            ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
  409/ 1BF :                            ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
  410/ 1BF :                            ;
  411/ 1BF : CD 19 06                   GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
  412/ 1C2 : DF                                 RST  3                          ;PARAMETERS
  413/ 1C3 : D5                                 PUSH D                          ;AND TEXT POINTER
  414/ 1C4 : CD 38 05                           CALL FNDLN                      ;FIND THE TARGET LINE
  415/ 1C7 : C2 A0 00                           JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
  416/ 1CA : 2A 01 10                           LHLD CURRNT                     ;FOUND IT, SAVE OLD
  417/ 1CD : E5                                 PUSH H                          ;'CURRNT' OLD 'STKGOS'
  418/ 1CE : 2A 03 10                           LHLD STKGOS
  419/ 1D1 : E5                                 PUSH H
  420/ 1D2 : 21 00 00                           LXI  H,0                        ;AND LOAD NEW ONES
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 8 - 9/26/2024 12:44:33


  421/ 1D5 : 22 09 10                           SHLD LOPVAR
  422/ 1D8 : 39                                 DAD  SP
  423/ 1D9 : 22 03 10                           SHLD STKGOS
  424/ 1DC : C3 50 01                           JMP  RUNTSL                     ;THEN RUN THAT LINE
  425/ 1DF : CD C2 04                   RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
  426/ 1E2 : 2A 03 10                           LHLD STKGOS                     ;OLD STACK POINTER
  427/ 1E5 : 7C                                 MOV  A,H                        ;0 MEANS NOT EXIST
  428/ 1E6 : B5                                 ORA  L
  429/ 1E7 : CA C6 04                           JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
  430/ 1EA : F9                                 SPHL                            ;ELSE, RESTORE IT
  431/ 1EB : E1                                 POP  H
  432/ 1EC : 22 03 10                           SHLD STKGOS                     ;AND THE OLD 'STKGOS'
  433/ 1EF : E1                                 POP  H
  434/ 1F0 : 22 01 10                           SHLD CURRNT                     ;AND THE OLD 'CURRNT'
  435/ 1F3 : D1                                 POP  D                          ;OLD TEXT POINTER
  436/ 1F4 : CD FD 05                           CALL POPA                       ;OLD "FOR" PARAMETERS
  437/ 1F7 : F7                                 RST  6                          ;AND WE ARE BACK HOME
  438/ 1F8 :                            ;
  439/ 1F8 :                            ;*************************************************************
  440/ 1F8 :                            ;
  441/ 1F8 :                            ; *** FOR *** & NEXT ***
  442/ 1F8 :                            ;
  443/ 1F8 :                            ; 'FOR' HAS TWO FORMS:
  444/ 1F8 :                            ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
  445/ 1F8 :                            ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
  446/ 1F8 :                            ; EXP3=1.  (I.E., WITH A STEP OF +1.)
  447/ 1F8 :                            ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
  448/ 1F8 :                            ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
  449/ 1F8 :                            ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
  450/ 1F8 :                            ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
  451/ 1F8 :                            ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
  452/ 1F8 :                            ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
  453/ 1F8 :                            ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
  454/ 1F8 :                            ; BEFORE THE NEW ONE OVERWRITES IT.
  455/ 1F8 :                            ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
  456/ 1F8 :                            ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
  457/ 1F8 :                            ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
  458/ 1F8 :                            ; (PURGED FROM THE STACK..)
  459/ 1F8 :                            ;
  460/ 1F8 :                            ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
  461/ 1F8 :                            ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
  462/ 1F8 :                            ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
  463/ 1F8 :                            ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
  464/ 1F8 :                            ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
  465/ 1F8 :                            ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
  466/ 1F8 :                            ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
  467/ 1F8 :                            ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
  468/ 1F8 :                            ; IS PURGED AND EXECUTION CONTINUES.
  469/ 1F8 :                            ;
  470/ 1F8 : CD 19 06                   FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
  471/ 1FB : CD A0 04                           CALL SETVAL                     ;SET THE CONTROL VAR.
  472/ 1FE : 2B                                 DCX  H                          ;HL IS ITS ADDRESS
  473/ 1FF : 22 09 10                           SHLD LOPVAR                     ;SAVE THAT
  474/ 202 : 21 12 07                           LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
  475/ 205 : C3 3A 07                           JMP  EXEC                       ;FOR THE WORD 'TO'
  476/ 208 : DF                         FR1:    RST  3                          ;EVALUATE THE LIMIT
  477/ 209 : 22 0D 10                           SHLD LOPLMT                     ;SAVE THAT
  478/ 20C : 21 18 07                           LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
  479/ 20F : C3 3A 07                           JMP EXEC                        ;FOR THE WORD 'STEP'
  480/ 212 : DF                         FR2:    RST  3                          ;FOUND IT, GET STEP
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 9 - 9/26/2024 12:44:33


  481/ 213 : C3 19 02                           JMP  FR4
  482/ 216 : 21 01 00                   FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
  483/ 219 : 22 0B 10                   FR4:    SHLD LOPINC                     ;SAVE THAT TOO
  484/ 21C : 2A 01 10                   FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
  485/ 21F : 22 0F 10                           SHLD LOPLN
  486/ 222 : EB                                 XCHG                            ;AND TEXT POINTER
  487/ 223 : 22 11 10                           SHLD LOPPT
  488/ 226 : 01 0A 00                           LXI  B,0AH                      ;DIG INTO STACK TO
  489/ 229 : 2A 09 10                           LHLD LOPVAR                     ;FIND 'LOPVAR'
  490/ 22C : EB                                 XCHG
  491/ 22D : 60                                 MOV  H,B
  492/ 22E : 68                                 MOV  L,B                        ;HL=0 NOW
  493/ 22F : 39                                 DAD  SP                         ;HERE IS THE STACK
  494/ 230 : 3E                                 DB   3EH
  495/ 231 : 09                         FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
  496/ 232 : 7E                                 MOV  A,M                        ;GET THAT OLD 'LOPVAR'
  497/ 233 : 23                                 INX  H
  498/ 234 : B6                                 ORA  M
  499/ 235 : CA 52 02                           JZ   FR8                        ;0 SAYS NO MORE IN IT
  500/ 238 : 7E                                 MOV  A,M
  501/ 239 : 2B                                 DCX  H
  502/ 23A : BA                                 CMP  D                          ;SAME AS THIS ONE?
  503/ 23B : C2 31 02                           JNZ  FR7
  504/ 23E : 7E                                 MOV  A,M                        ;THE OTHER HALF?
  505/ 23F : BB                                 CMP  E
  506/ 240 : C2 31 02                           JNZ  FR7
  507/ 243 : EB                                 XCHG                            ;YES, FOUND ONE
  508/ 244 : 21 00 00                           LXI  H,0H
  509/ 247 : 39                                 DAD  SP                         ;TRY TO MOVE SP
  510/ 248 : 44                                 MOV  B,H
  511/ 249 : 4D                                 MOV  C,L
  512/ 24A : 21 0A 00                           LXI  H,0AH
  513/ 24D : 19                                 DAD  D
  514/ 24E : CD EE 05                           CALL MVDOWN                     ;AND PURGE 10 WORDS
  515/ 251 : F9                                 SPHL                            ;IN THE STACK
  516/ 252 : 2A 11 10                   FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
  517/ 255 : EB                                 XCHG
  518/ 256 : F7                                 RST  6                          ;AND CONTINUE
  519/ 257 :                            ;
  520/ 257 : FF                         NEXT:   RST  7                          ;GET ADDRESS OF VAR.
  521/ 258 : DA C6 04                           JC   QWHAT                      ;NO VARIABLE, "WHAT?"
  522/ 25B : 22 05 10                           SHLD VARNXT                     ;YES, SAVE IT
  523/ 25E : D5                         NX0:    PUSH D                          ;SAVE TEXT POINTER
  524/ 25F : EB                                 XCHG
  525/ 260 : 2A 09 10                           LHLD LOPVAR                     ;GET VAR. IN 'FOR'
  526/ 263 : 7C                                 MOV  A,H
  527/ 264 : B5                                 ORA  L                          ;0 SAYS NEVER HAD ONE
  528/ 265 : CA C7 04                           JZ   AWHAT                      ;SO WE ASK: "WHAT?"
  529/ 268 : E7                                 RST  4                          ;ELSE WE CHECK THEM
  530/ 269 : CA 76 02                           JZ   NX3                        ;OK, THEY AGREE
  531/ 26C : D1                                 POP  D                          ;NO, LET'S SEE
  532/ 26D : CD FD 05                           CALL POPA                       ;PURGE CURRENT LOOP
  533/ 270 : 2A 05 10                           LHLD VARNXT                     ;AND POP ONE LEVEL
  534/ 273 : C3 5E 02                           JMP  NX0                        ;GO CHECK AGAIN
  535/ 276 : 5E                         NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
  536/ 277 : 23                                 INX  H
  537/ 278 : 56                                 MOV  D,M                        ;DE=VALUE OF VAR.
  538/ 279 : 2A 0B 10                           LHLD LOPINC
  539/ 27C : E5                                 PUSH H
  540/ 27D : 7C                                 MOV  A,H
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 10 - 9/26/2024 12:44:33


  541/ 27E : AA                                 XRA  D
  542/ 27F : 7A                                 MOV  A,D
  543/ 280 : 19                                 DAD  D                          ;ADD ONE STEP
  544/ 281 : FA 88 02                           JM   NX4
  545/ 284 : AC                                 XRA  H
  546/ 285 : FA AA 02                           JM   NX5
  547/ 288 : EB                         NX4:    XCHG
  548/ 289 : 2A 09 10                           LHLD LOPVAR                     ;PUT IT BACK
  549/ 28C : 73                                 MOV  M,E
  550/ 28D : 23                                 INX  H
  551/ 28E : 72                                 MOV  M,D
  552/ 28F : 2A 0D 10                           LHLD LOPLMT                     ;HL->LIMIT
  553/ 292 : F1                                 POP  PSW                        ;OLD HL
  554/ 293 : B7                                 ORA  A
  555/ 294 : F2 98 02                           JP   NX1                        ;STEP > 0
  556/ 297 : EB                                 XCHG                            ;STEP < 0
  557/ 298 : CD 98 04                   NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
  558/ 29B : D1                                 POP  D                          ;RESTORE TEXT POINTER
  559/ 29C : DA AC 02                           JC   NX2                        ;OUTSIDE LIMIT
  560/ 29F : 2A 0F 10                           LHLD LOPLN                      ;WITHIN LIMIT, GO
  561/ 2A2 : 22 01 10                           SHLD CURRNT                     ;BACK TO THE SAVED
  562/ 2A5 : 2A 11 10                           LHLD LOPPT                      ;'CURRNT' AND TEXT
  563/ 2A8 : EB                                 XCHG                            ;POINTER
  564/ 2A9 : F7                                 RST  6
  565/ 2AA : E1                         NX5:    POP  H
  566/ 2AB : D1                                 POP  D
  567/ 2AC : CD FD 05                   NX2:    CALL POPA                       ;PURGE THIS LOOP
  568/ 2AF : F7                                 RST  6
  569/ 2B0 :                            ;
  570/ 2B0 :                            ;*************************************************************
  571/ 2B0 :                            ;
  572/ 2B0 :                            ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
  573/ 2B0 :                            ;
  574/ 2B0 :                            ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
  575/ 2B0 :                            ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
  576/ 2B0 :                            ;
  577/ 2B0 :                            ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
  578/ 2B0 :                            ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
  579/ 2B0 :                            ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
  580/ 2B0 :                            ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
  581/ 2B0 :                            ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
  582/ 2B0 :                            ; EXECUTION CONTINUES AT THE NEXT LINE.
  583/ 2B0 :                            ;
  584/ 2B0 :                            ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
  585/ 2B0 :                            ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
  586/ 2B0 :                            ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
  587/ 2B0 :                            ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
  588/ 2B0 :                            ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
  589/ 2B0 :                            ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
  590/ 2B0 :                            ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
  591/ 2B0 :                            ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
  592/ 2B0 :                            ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
  593/ 2B0 :                            ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
  594/ 2B0 :                            ;
  595/ 2B0 :                            ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
  596/ 2B0 :                            ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
  597/ 2B0 :                            ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
  598/ 2B0 :                            ; THIS IS HANDLED IN 'INPERR'.
  599/ 2B0 :                            ;
  600/ 2B0 :                            ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 11 - 9/26/2024 12:44:33


  601/ 2B0 :                            ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
  602/ 2B0 :                            ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
  603/ 2B0 :                            ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
  604/ 2B0 :                            ; THIS IS DONE BY 'DEFLT'.
  605/ 2B0 :                            ;
  606/ 2B0 : 21 00 00                   REM:    LXI  H,0H                       ;*** REM ***
  607/ 2B3 : 3E                                 DB   3EH                        ;THIS IS LIKE 'IF 0'
  608/ 2B4 :                            ;
  609/ 2B4 : DF                         IFF:    RST  3                          ;*** IF ***
  610/ 2B5 : 7C                                 MOV  A,H                        ;IS THE EXPR.=0?
  611/ 2B6 : B5                                 ORA  L
  612/ 2B7 : C2 57 01                           JNZ  RUNSML                     ;NO, CONTINUE
  613/ 2BA : CD 56 05                           CALL FNDSKP                     ;YES, SKIP REST OF LINE
  614/ 2BD : D2 50 01                           JNC  RUNTSL                     ;AND RUN THE NEXT LINE
  615/ 2C0 : C3 BA 00                           JMP  RSTART                     ;IF NO NEXT, RE-START
  616/ 2C3 :                            ;
  617/ 2C3 : 2A 07 10                   INPERR: LHLD STKINP                     ;*** INPERR ***
  618/ 2C6 : F9                                 SPHL                            ;RESTORE OLD SP
  619/ 2C7 : E1                                 POP  H                          ;AND OLD 'CURRNT'
  620/ 2C8 : 22 01 10                           SHLD CURRNT
  621/ 2CB : D1                                 POP  D                          ;AND OLD TEXT POINTER
  622/ 2CC : D1                                 POP  D                          ;REDO INPUT
  623/ 2CD :                            ;
  624/ 2CD :                            INPUT:                                  ;*** INPUT ***
  625/ 2CD : D5                         IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
  626/ 2CE : CD 6C 05                           CALL QTSTG                      ;IS NEXT ITEM A STRING?
  627/ 2D1 : C3 DB 02                           JMP  IP2                        ;NO
  628/ 2D4 : FF                                 RST  7                          ;YES, BUT FOLLOWED BY A
  629/ 2D5 : DA 15 03                           JC   IP4                        ;VARIABLE?   NO.
  630/ 2D8 : C3 EB 02                           JMP  IP3                        ;YES.  INPUT VARIABLE
  631/ 2DB : D5                         IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
  632/ 2DC : FF                                 RST  7                          ;MUST BE VARIABLE NOW
  633/ 2DD : DA C6 04                           JC   QWHAT                      ;"WHAT?" IT IS NOT?
  634/ 2E0 : 1A                                 LDAX D                          ;GET READY FOR 'PRTSTR'
  635/ 2E1 : 4F                                 MOV  C,A
  636/ 2E2 : 97                                 SUB  A
  637/ 2E3 : 12                                 STAX D
  638/ 2E4 : D1                                 POP  D
  639/ 2E5 : CD 60 05                           CALL PRTSTG                     ;PRINT STRING AS PROMPT
  640/ 2E8 : 79                                 MOV  A,C                        ;RESTORE TEXT
  641/ 2E9 : 1B                                 DCX  D
  642/ 2EA : 12                                 STAX D
  643/ 2EB : D5                         IP3:    PUSH D                          ;SAVE TEXT POINTER
  644/ 2EC : EB                                 XCHG
  645/ 2ED : 2A 01 10                           LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
  646/ 2F0 : E5                                 PUSH H
  647/ 2F1 : 21 CD 02                           LXI  H,IP1                      ;A NEGATIVE NUMBER
  648/ 2F4 : 22 01 10                           SHLD CURRNT                     ;AS A FLAG
  649/ 2F7 : 21 00 00                           LXI  H,0H                       ;SAVE SP TOO
  650/ 2FA : 39                                 DAD  SP
  651/ 2FB : 22 07 10                           SHLD STKINP
  652/ 2FE : D5                                 PUSH D                          ;OLD HL
  653/ 2FF : 3E 3A                              MVI  A,3AH                      ;PRINT THIS TOO
  654/ 301 : CD FA 04                           CALL GETLN                      ;AND GET A LINE
  655/ 304 : 11 9D 13                           LXI  D,BUFFER                   ;POINTS TO BUFFER
  656/ 307 : DF                                 RST  3                          ;EVALUATE INPUT
  657/ 308 : 00                                 NOP                             ;CAN BE 'CALL ENDCHK'
  658/ 309 : 00                                 NOP
  659/ 30A : 00                                 NOP
  660/ 30B : D1                                 POP  D                          ;OK, GET OLD HL
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 12 - 9/26/2024 12:44:33


  661/ 30C : EB                                 XCHG
  662/ 30D : 73                                 MOV  M,E                        ;SAVE VALUE IN VAR.
  663/ 30E : 23                                 INX  H
  664/ 30F : 72                                 MOV  M,D
  665/ 310 : E1                                 POP  H                          ;GET OLD 'CURRNT'
  666/ 311 : 22 01 10                           SHLD CURRNT
  667/ 314 : D1                                 POP  D                          ;AND OLD TEXT POINTER
  668/ 315 : F1                         IP4:    POP  PSW                        ;PURGE JUNK IN STACK
  669/ 316 : CF                                 RST  1                          ;IS NEXT CH. ','?
  670/ 317 : 2C                                 DB   ','
  671/ 318 : 03                                 DB   IP5-$-1
  672/ 319 : C3 CD 02                           JMP  IP1                        ;YES, MORE ITEMS.
  673/ 31C : F7                         IP5:    RST  6
  674/ 31D :                            ;
  675/ 31D : 1A                         DEFLT:  LDAX D                          ;***  DEFLT ***
  676/ 31E : FE 0D                              CPI  CR                         ;EMPTY LINE IS OK
  677/ 320 : CA 2C 03                           JZ   LT1                        ;ELSE IT IS 'LET'
  678/ 323 :                            ;
  679/ 323 : CD A0 04                   LET:    CALL SETVAL                     ;*** LET ***
  680/ 326 : CF                                 RST  1                          ;SET VALUE TO VAR.
  681/ 327 : 2C                                 DB   ','
  682/ 328 : 03                                 DB   LT1-$-1
  683/ 329 : C3 23 03                           JMP  LET                        ;ITEM BY ITEM
  684/ 32C : F7                         LT1:    RST  6                          ;UNTIL FINISH
  685/ 32D :                            ;
  686/ 32D :                            ;*************************************************************
  687/ 32D :                            ;
  688/ 32D :                            ; *** EXPR ***
  689/ 32D :                            ;
  690/ 32D :                            ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
  691/ 32D :                            ; <EXPR>::<EXPR2>
  692/ 32D :                            ;         <EXPR2><REL.OP.><EXPR2>
  693/ 32D :                            ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
  694/ 32D :                            ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
  695/ 32D :                            ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
  696/ 32D :                            ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
  697/ 32D :                            ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
  698/ 32D :                            ; <EXPR4>::=<VARIABLE>
  699/ 32D :                            ;           <FUNCTION>
  700/ 32D :                            ;           (<EXPR>)
  701/ 32D :                            ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
  702/ 32D :                            ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
  703/ 32D :                            ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
  704/ 32D :                            ;
  705/ 32D :                            ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
  706/ 32D :                            ;       PUSH H                          ;SAVE <EXPR2> VALUE
  707/ 32D : 21 20 07                   EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
  708/ 330 : C3 3A 07                           JMP  EXEC                       ;GO DO IT
  709/ 333 : CD 5C 03                   XP11:   CALL XP18                       ;REL.OP.">="
  710/ 336 : D8                                 RC                              ;NO, RETURN HL=0
  711/ 337 : 6F                                 MOV  L,A                        ;YES, RETURN HL=1
  712/ 338 : C9                                 RET
  713/ 339 : CD 5C 03                   XP12:   CALL XP18                       ;REL.OP."#"
  714/ 33C : C8                                 RZ                              ;FALSE, RETURN HL=0
  715/ 33D : 6F                                 MOV  L,A                        ;TRUE, RETURN HL=1
  716/ 33E : C9                                 RET
  717/ 33F : CD 5C 03                   XP13:   CALL XP18                       ;REL.OP.">"
  718/ 342 : C8                                 RZ                              ;FALSE
  719/ 343 : D8                                 RC                              ;ALSO FALSE, HL=0
  720/ 344 : 6F                                 MOV  L,A                        ;TRUE, HL=1
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 13 - 9/26/2024 12:44:33


  721/ 345 : C9                                 RET
  722/ 346 : CD 5C 03                   XP14:   CALL XP18                       ;REL.OP."<="
  723/ 349 : 6F                                 MOV  L,A                        ;SET HL=1
  724/ 34A : C8                                 RZ                              ;REL. TRUE, RETURN
  725/ 34B : D8                                 RC
  726/ 34C : 6C                                 MOV  L,H                        ;ELSE SET HL=0
  727/ 34D : C9                                 RET
  728/ 34E : CD 5C 03                   XP15:   CALL XP18                       ;REL.OP."="
  729/ 351 : C0                                 RNZ                             ;FALSE, RETURN HL=0
  730/ 352 : 6F                                 MOV  L,A                        ;ELSE SET HL=1
  731/ 353 : C9                                 RET
  732/ 354 : CD 5C 03                   XP16:   CALL XP18                       ;REL.OP."<"
  733/ 357 : D0                                 RNC                             ;FALSE, RETURN HL=0
  734/ 358 : 6F                                 MOV  L,A                        ;ELSE SET HL=1
  735/ 359 : C9                                 RET
  736/ 35A : E1                         XP17:   POP  H                          ;NOT .REL.OP
  737/ 35B : C9                                 RET                             ;RETURN HL=<EXPR2>
  738/ 35C : 79                         XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
  739/ 35D : E1                                 POP  H                          ;REL.OP.'S
  740/ 35E : C1                                 POP  B
  741/ 35F : E5                                 PUSH H                          ;REVERSE TOP OF STACK
  742/ 360 : C5                                 PUSH B
  743/ 361 : 4F                                 MOV  C,A
  744/ 362 : CD 71 03                           CALL EXPR2                      ;GET 2ND <EXPR2>
  745/ 365 : EB                                 XCHG                            ;VALUE IN DE NOW
  746/ 366 : E3                                 XTHL                            ;1ST <EXPR2> IN HL
  747/ 367 : CD 98 04                           CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
  748/ 36A : D1                                 POP  D                          ;RESTORE TEXT POINTER
  749/ 36B : 21 00 00                           LXI  H,0H                       ;SET HL=0, A=1
  750/ 36E : 3E 01                              MVI  A,1
  751/ 370 : C9                                 RET
  752/ 371 :                            ;
  753/ 371 : CF                         EXPR2:  RST  1                          ;NEGATIVE SIGN?
  754/ 372 : 2D                                 DB   '-'
  755/ 373 : 06                                 DB   XP21-$-1
  756/ 374 : 21 00 00                           LXI  H,0H                       ;YES, FAKE '0-'
  757/ 377 : C3 9B 03                           JMP  XP26                       ;TREAT LIKE SUBTRACT
  758/ 37A : CF                         XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
  759/ 37B : 2B                                 DB   '+'
  760/ 37C : 00                                 DB   XP22-$-1
  761/ 37D : CD A5 03                   XP22:   CALL EXPR3                      ;1ST <EXPR3>
  762/ 380 : CF                         XP23:   RST  1                          ;ADD?
  763/ 381 : 2B                                 DB   '+'
  764/ 382 : 15                                 DB   XP25-$-1
  765/ 383 : E5                                 PUSH H                          ;YES, SAVE VALUE
  766/ 384 : CD A5 03                           CALL EXPR3                      ;GET 2ND <EXPR3>
  767/ 387 : EB                         XP24:   XCHG                            ;2ND IN DE
  768/ 388 : E3                                 XTHL                            ;1ST IN HL
  769/ 389 : 7C                                 MOV  A,H                        ;COMPARE SIGN
  770/ 38A : AA                                 XRA  D
  771/ 38B : 7A                                 MOV  A,D
  772/ 38C : 19                                 DAD  D
  773/ 38D : D1                                 POP  D                          ;RESTORE TEXT POINTER
  774/ 38E : FA 80 03                           JM   XP23                       ;1ST AND 2ND SIGN DIFFER
  775/ 391 : AC                                 XRA  H                          ;1ST AND 2ND SIGN EQUAL
  776/ 392 : F2 80 03                           JP   XP23                       ;SO IS RESULT
  777/ 395 : C3 9F 00                           JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
  778/ 398 : CF                         XP25:   RST  1                          ;SUBTRACT?
  779/ 399 : 2D                                 DB   '-'
  780/ 39A : 86                                 DB   XP42-$-1
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 14 - 9/26/2024 12:44:33


  781/ 39B : E5                         XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
  782/ 39C : CD A5 03                           CALL EXPR3                      ;GET 2ND <EXPR3>
  783/ 39F : CD 86 04                           CALL CHGSGN                     ;NEGATE
  784/ 3A2 : C3 87 03                           JMP  XP24                       ;AND ADD THEM
  785/ 3A5 :                            ;
  786/ 3A5 : CD 05 04                   EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
  787/ 3A8 : CF                         XP31:   RST  1                          ;MULTIPLY?
  788/ 3A9 : 2A                                 DB   '*'
  789/ 3AA : 2D                                 DB   XP34-$-1
  790/ 3AB : E5                                 PUSH H                          ;YES, SAVE 1ST
  791/ 3AC : CD 05 04                           CALL EXPR4                      ;AND GET 2ND <EXPR4>
  792/ 3AF : 06 00                              MVI  B,0H                       ;CLEAR B FOR SIGN
  793/ 3B1 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN
  794/ 3B4 : E3                                 XTHL                            ;1ST IN HL
  795/ 3B5 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN OF 1ST
  796/ 3B8 : EB                                 XCHG
  797/ 3B9 : E3                                 XTHL
  798/ 3BA : 7C                                 MOV  A,H                        ;IS HL > 255 ?
  799/ 3BB : B7                                 ORA  A
  800/ 3BC : CA C5 03                           JZ   XP32                       ;NO
  801/ 3BF : 7A                                 MOV  A,D                        ;YES, HOW ABOUT DE
  802/ 3C0 : B2                                 ORA  D
  803/ 3C1 : EB                                 XCHG                            ;PUT SMALLER IN HL
  804/ 3C2 : C2 A0 00                           JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
  805/ 3C5 : 7D                         XP32:   MOV  A,L                        ;THIS IS DUMB
  806/ 3C6 : 21 00 00                           LXI  H,0H                       ;CLEAR RESULT
  807/ 3C9 : B7                                 ORA  A                          ;ADD AND COUNT
  808/ 3CA : CA F7 03                           JZ   XP35
  809/ 3CD : 19                         XP33:   DAD  D
  810/ 3CE : DA A0 00                           JC   AHOW                       ;OVERFLOW
  811/ 3D1 : 3D                                 DCR  A
  812/ 3D2 : C2 CD 03                           JNZ  XP33
  813/ 3D5 : C3 F7 03                           JMP  XP35                       ;FINISHED
  814/ 3D8 : CF                         XP34:   RST  1                          ;DIVIDE?
  815/ 3D9 : 2F                                 DB   '/'
  816/ 3DA : 46                                 DB   XP42-$-1
  817/ 3DB : E5                                 PUSH H                          ;YES, SAVE 1ST <EXPR4>
  818/ 3DC : CD 05 04                           CALL EXPR4                      ;AND GET THE SECOND ONE
  819/ 3DF : 06 00                              MVI  B,0H                       ;CLEAR B FOR SIGN
  820/ 3E1 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN OF 2ND
  821/ 3E4 : E3                                 XTHL                            ;GET 1ST IN HL
  822/ 3E5 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN OF 1ST
  823/ 3E8 : EB                                 XCHG
  824/ 3E9 : E3                                 XTHL
  825/ 3EA : EB                                 XCHG
  826/ 3EB : 7A                                 MOV  A,D                        ;DIVIDE BY 0?
  827/ 3EC : B3                                 ORA  E
  828/ 3ED : CA A0 00                           JZ   AHOW                       ;SAY "HOW?"
  829/ 3F0 : C5                                 PUSH B                          ;ELSE SAVE SIGN
  830/ 3F1 : CD 66 04                           CALL DIVIDE                     ;USE SUBROUTINE
  831/ 3F4 : 60                                 MOV  H,B                        ;RESULT IN HL NOW
  832/ 3F5 : 69                                 MOV  L,C
  833/ 3F6 : C1                                 POP  B                          ;GET SIGN BACK
  834/ 3F7 : D1                         XP35:   POP  D                          ;AND TEXT POINTER
  835/ 3F8 : 7C                                 MOV  A,H                        ;HL MUST BE +
  836/ 3F9 : B7                                 ORA  A
  837/ 3FA : FA 9F 00                           JM   QHOW                       ;ELSE IT IS OVERFLOW
  838/ 3FD : 78                                 MOV  A,B
  839/ 3FE : B7                                 ORA  A
  840/ 3FF : FC 86 04                           CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 15 - 9/26/2024 12:44:33


  841/ 402 : C3 A8 03                           JMP  XP31                       ;LOOK FOR MORE TERMS
  842/ 405 :                            ;
  843/ 405 : 21 00 07                   EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
  844/ 408 : C3 3A 07                           JMP  EXEC                       ;AND GO DO IT
  845/ 40B : FF                         XP40:   RST  7                          ;NO, NOT A FUNCTION
  846/ 40C : DA 14 04                           JC   XP41                       ;NOR A VARIABLE
  847/ 40F : 7E                                 MOV  A,M                        ;VARIABLE
  848/ 410 : 23                                 INX  H
  849/ 411 : 66                                 MOV  H,M                        ;VALUE IN HL
  850/ 412 : 6F                                 MOV  L,A
  851/ 413 : C9                                 RET
  852/ 414 : CD 77 00                   XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
  853/ 417 : 78                                 MOV  A,B                        ;# OF DIGIT
  854/ 418 : B7                                 ORA  A
  855/ 419 : C0                                 RNZ                             ;OK
  856/ 41A : CF                         PARN:   RST  1
  857/ 41B : 28                                 DB   '('
  858/ 41C : 05                                 DB   XP43-$-1
  859/ 41D : DF                                 RST  3                          ;"(EXPR)"
  860/ 41E : CF                                 RST  1
  861/ 41F : 29                                 DB   ')'
  862/ 420 : 01                                 DB   XP43-$-1
  863/ 421 : C9                         XP42:   RET
  864/ 422 : C3 C6 04                   XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
  865/ 425 :                            ;
  866/ 425 : CD 1A 04                   RND:    CALL PARN                       ;*** RND(EXPR) ***
  867/ 428 : 7C                                 MOV  A,H                        ;EXPR MUST BE +
  868/ 429 : B7                                 ORA  A
  869/ 42A : FA 9F 00                           JM   QHOW
  870/ 42D : B5                                 ORA  L                          ;AND NON-ZERO
  871/ 42E : CA 9F 00                           JZ   QHOW
  872/ 431 : D5                                 PUSH D                          ;SAVE BOTH
  873/ 432 : E5                                 PUSH H
  874/ 433 : 2A 13 10                           LHLD RANPNT                     ;GET MEMORY AS RANDOM
  875/ 436 : 11 68 07                           LXI  D,LSTROM                   ;NUMBER
  876/ 439 : E7                                 RST  4
  877/ 43A : DA 40 04                           JC   RA1                        ;WRAP AROUND IF LAST
  878/ 43D : 21 00 00                           LXI  H,START
  879/ 440 : 5E                         RA1:    MOV  E,M
  880/ 441 : 23                                 INX  H
  881/ 442 : 56                                 MOV  D,M
  882/ 443 : 22 13 10                           SHLD RANPNT
  883/ 446 : E1                                 POP  H
  884/ 447 : EB                                 XCHG
  885/ 448 : C5                                 PUSH B
  886/ 449 : CD 66 04                           CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
  887/ 44C : C1                                 POP  B
  888/ 44D : D1                                 POP  D
  889/ 44E : 23                                 INX  H
  890/ 44F : C9                                 RET
  891/ 450 :                            ;
  892/ 450 : CD 1A 04                   ABS:    CALL PARN                       ;*** ABS(EXPR) ***
  893/ 453 : 1B                                 DCX  D
  894/ 454 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN
  895/ 457 : 13                                 INX  D
  896/ 458 : C9                                 RET
  897/ 459 :                            ;
  898/ 459 : 2A 15 10                   SIZE:   LHLD TXTUNF                     ;*** SIZE ***
  899/ 45C : D5                                 PUSH D                          ;GET THE NUMBER OF FREE
  900/ 45D : EB                                 XCHG                            ;BYTES BETWEEN 'TXTUNF'
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 16 - 9/26/2024 12:44:33


  901/ 45E : 21 66 13                           LXI  H,VARBGN                   ;AND 'VARBGN'
  902/ 461 : CD 7C 04                           CALL SUBDE
  903/ 464 : D1                                 POP  D
  904/ 465 : C9                                 RET
  905/ 466 :                            ;
  906/ 466 :                            ;*************************************************************
  907/ 466 :                            ;
  908/ 466 :                            ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
  909/ 466 :                            ;
  910/ 466 :                            ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
  911/ 466 :                            ;
  912/ 466 :                            ; 'SUBDE' SUBSTRACTS DE FROM HL
  913/ 466 :                            ;
  914/ 466 :                            ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
  915/ 466 :                            ; SIGN AND FLIP SIGN OF B.
  916/ 466 :                            ;
  917/ 466 :                            ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
  918/ 466 :                            ;
  919/ 466 :                            ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
  920/ 466 :                            ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
  921/ 466 :                            ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
  922/ 466 :                            ;
  923/ 466 : E5                         DIVIDE: PUSH H                          ;*** DIVIDE ***
  924/ 467 : 6C                                 MOV  L,H                        ;DIVIDE H BY DE
  925/ 468 : 26 00                              MVI  H,0
  926/ 46A : CD 71 04                           CALL DV1
  927/ 46D : 41                                 MOV  B,C                        ;SAVE RESULT IN B
  928/ 46E : 7D                                 MOV  A,L                        ;(REMINDER+L)/DE
  929/ 46F : E1                                 POP  H
  930/ 470 : 67                                 MOV  H,A
  931/ 471 : 0E FF                      DV1:    MVI  C,0FFH                     ;RESULT IN C
  932/ 473 : 0C                         DV2:    INR  C                          ;DUMB ROUTINE
  933/ 474 : CD 7C 04                           CALL SUBDE                      ;DIVIDE BY SUBTRACT
  934/ 477 : D2 73 04                           JNC  DV2                        ;AND COUNT
  935/ 47A : 19                                 DAD  D
  936/ 47B : C9                                 RET
  937/ 47C :                            ;
  938/ 47C : 7D                         SUBDE:  MOV  A,L                        ;*** SUBDE ***
  939/ 47D : 93                                 SUB  E                          ;SUBSTRACT DE FROM
  940/ 47E : 6F                                 MOV  L,A                        ;HL
  941/ 47F : 7C                                 MOV  A,H
  942/ 480 : 9A                                 SBB  D
  943/ 481 : 67                                 MOV  H,A
  944/ 482 : C9                                 RET
  945/ 483 :                            ;
  946/ 483 : 7C                         CHKSGN: MOV  A,H                        ;*** CHKSGN ***
  947/ 484 : B7                                 ORA  A                          ;CHECK SIGN OF HL
  948/ 485 : F0                                 RP                              ;IF -, CHANGE SIGN
  949/ 486 :                            ;
  950/ 486 : 7C                         CHGSGN: MOV  A,H                        ;*** CHGSGN ***
  951/ 487 : F5                                 PUSH PSW
  952/ 488 : 2F                                 CMA                             ;CHANGE SIGN OF HL
  953/ 489 : 67                                 MOV  H,A
  954/ 48A : 7D                                 MOV  A,L
  955/ 48B : 2F                                 CMA
  956/ 48C : 6F                                 MOV  L,A
  957/ 48D : 23                                 INX  H
  958/ 48E : F1                                 POP  PSW
  959/ 48F : AC                                 XRA  H
  960/ 490 : F2 9F 00                           JP   QHOW
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 17 - 9/26/2024 12:44:33


  961/ 493 : 78                                 MOV  A,B                        ;AND ALSO FLIP B
  962/ 494 : EE 80                              XRI  80H
  963/ 496 : 47                                 MOV  B,A
  964/ 497 : C9                                 RET
  965/ 498 :                            ;
  966/ 498 : 7C                         CKHLDE: MOV  A,H
  967/ 499 : AA                                 XRA  D                          ;SAME SIGN?
  968/ 49A : F2 9E 04                           JP   CK1                        ;YES, COMPARE
  969/ 49D : EB                                 XCHG                            ;NO, XCH AND COMP
  970/ 49E : E7                         CK1:    RST  4
  971/ 49F : C9                                 RET
  972/ 4A0 :                            ;
  973/ 4A0 :                            ;*************************************************************
  974/ 4A0 :                            ;
  975/ 4A0 :                            ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
  976/ 4A0 :                            ;
  977/ 4A0 :                            ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
  978/ 4A0 :                            ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
  979/ 4A0 :                            ; TO THAT VALUE.
  980/ 4A0 :                            ;
  981/ 4A0 :                            ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
  982/ 4A0 :                            ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
  983/ 4A0 :                            ; NEXT LINE AND CONTINUE FROM THERE.
  984/ 4A0 :                            ;
  985/ 4A0 :                            ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
  986/ 4A0 :                            ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
  987/ 4A0 :                            ;
  988/ 4A0 :                            ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
  989/ 4A0 :                            ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
  990/ 4A0 :                            ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
  991/ 4A0 :                            ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
  992/ 4A0 :                            ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
  993/ 4A0 :                            ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
  994/ 4A0 :                            ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
  995/ 4A0 :                            ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
  996/ 4A0 :                            ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
  997/ 4A0 :                            ;
  998/ 4A0 :                            ; RELATED TO 'ERROR' ARE THE FOLLOWING:
  999/ 4A0 :                            ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
 1000/ 4A0 :                            ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
 1001/ 4A0 :                            ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
 1002/ 4A0 :                            ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
 1003/ 4A0 :                            ;
 1004/ 4A0 : FF                         SETVAL: RST  7                          ;*** SETVAL ***
 1005/ 4A1 : DA C6 04                           JC   QWHAT                      ;"WHAT?" NO VARIABLE
 1006/ 4A4 : E5                                 PUSH H                          ;SAVE ADDRESS OF VAR.
 1007/ 4A5 : CF                                 RST  1                          ;PASS "=" SIGN
 1008/ 4A6 : 3D                                 DB   '='
 1009/ 4A7 : 08                                 DB   SV1-$-1
 1010/ 4A8 : DF                                 RST  3                          ;EVALUATE EXPR.
 1011/ 4A9 : 44                                 MOV  B,H                        ;VALUE IS IN BC NOW
 1012/ 4AA : 4D                                 MOV  C,L
 1013/ 4AB : E1                                 POP  H                          ;GET ADDRESS
 1014/ 4AC : 71                                 MOV  M,C                        ;SAVE VALUE
 1015/ 4AD : 23                                 INX  H
 1016/ 4AE : 70                                 MOV  M,B
 1017/ 4AF : C9                                 RET
 1018/ 4B0 : C3 C6 04                   SV1:    JMP  QWHAT                      ;NO "=" SIGN
 1019/ 4B3 :                            ;
 1020/ 4B3 : CF                         FIN:    RST  1                          ;*** FIN ***
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 18 - 9/26/2024 12:44:33


 1021/ 4B4 : 3B                                 DB   3BH
 1022/ 4B5 : 04                                 DB   FI1-$-1
 1023/ 4B6 : F1                                 POP  PSW                        ;";", PURGE RET. ADDR.
 1024/ 4B7 : C3 57 01                           JMP  RUNSML                     ;CONTINUE SAME LINE
 1025/ 4BA : CF                         FI1:    RST  1                          ;NOT ";", IS IT CR?
 1026/ 4BB : 0D                                 DB   CR
 1027/ 4BC : 04                                 DB   FI2-$-1
 1028/ 4BD : F1                                 POP  PSW                        ;YES, PURGE RET. ADDR.
 1029/ 4BE : C3 47 01                           JMP  RUNNXL                     ;RUN NEXT LINE
 1030/ 4C1 : C9                         FI2:    RET                             ;ELSE RETURN TO CALLER
 1031/ 4C2 :                            ;
 1032/ 4C2 : EF                         ENDCHK: RST  5                          ;*** ENDCHK ***
 1033/ 4C3 : FE 0D                              CPI  CR                         ;END WITH CR?
 1034/ 4C5 : C8                                 RZ                              ;OK, ELSE SAY: "WHAT?"
 1035/ 4C6 :                            ;
 1036/ 4C6 : D5                         QWHAT:  PUSH D                          ;*** QWHAT ***
 1037/ 4C7 : 11 AE 00                   AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
 1038/ 4CA : 97                         ERROR:  SUB  A                          ;*** ERROR ***
 1039/ 4CB : CD 60 05                           CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
 1040/ 4CE : D1                                 POP  D                          ;OR 'SORRY'
 1041/ 4CF : 1A                                 LDAX D                          ;SAVE THE CHARACTER
 1042/ 4D0 : F5                                 PUSH PSW                        ;AT WHERE OLD DE ->
 1043/ 4D1 : 97                                 SUB  A                          ;AND PUT A 0 THERE
 1044/ 4D2 : 12                                 STAX D
 1045/ 4D3 : 2A 01 10                           LHLD CURRNT                     ;GET CURRENT LINE #
 1046/ 4D6 : E5                                 PUSH H
 1047/ 4D7 : 7E                                 MOV  A,M                        ;CHECK THE VALUE
 1048/ 4D8 : 23                                 INX  H
 1049/ 4D9 : B6                                 ORA  M
 1050/ 4DA : D1                                 POP  D
 1051/ 4DB : CA BA 00                           JZ   RSTART                     ;IF ZERO, JUST RESTART
 1052/ 4DE : 7E                                 MOV  A,M                        ;IF NEGATIVE,
 1053/ 4DF : B7                                 ORA  A
 1054/ 4E0 : FA C3 02                           JM   INPERR                     ;REDO INPUT
 1055/ 4E3 : CD D2 05                           CALL PRTLN                      ;ELSE PRINT THE LINE
 1056/ 4E6 : 1B                                 DCX  D                          ;UPTO WHERE THE 0 IS
 1057/ 4E7 : F1                                 POP  PSW                        ;RESTORE THE CHARACTER
 1058/ 4E8 : 12                                 STAX D
 1059/ 4E9 : 3E 3F                              MVI  A,3FH                      ;PRINT A "?"
 1060/ 4EB : D7                                 RST  2
 1061/ 4EC : 97                                 SUB  A                          ;AND THE REST OF THE
 1062/ 4ED : CD 60 05                           CALL PRTSTG                     ;LINE
 1063/ 4F0 : C3 BA 00                           JMP  RSTART                     ;THEN RESTART
 1064/ 4F3 :                            ;
 1065/ 4F3 : D5                         QSORRY: PUSH D                          ;*** QSORRY ***
 1066/ 4F4 : 11 B4 00                   ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
 1067/ 4F7 : C3 CA 04                           JMP  ERROR
 1068/ 4FA :                            ;
 1069/ 4FA :                            ;*************************************************************
 1070/ 4FA :                            ;
 1071/ 4FA :                            ; *** GETLN *** FNDLN (& FRIENDS) ***
 1072/ 4FA :                            ;
 1073/ 4FA :                            ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
 1074/ 4FA :                            ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
 1075/ 4FA :                            ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
 1076/ 4FA :                            ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
 1077/ 4FA :                            ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
 1078/ 4FA :                            ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
 1079/ 4FA :                            ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
 1080/ 4FA :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 19 - 9/26/2024 12:44:33


 1081/ 4FA :                            ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
 1082/ 4FA :                            ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
 1083/ 4FA :                            ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
 1084/ 4FA :                            ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
 1085/ 4FA :                            ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
 1086/ 4FA :                            ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
 1087/ 4FA :                            ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
 1088/ 4FA :                            ; LINE, FLAGS ARE C & NZ.
 1089/ 4FA :                            ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
 1090/ 4FA :                            ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
 1091/ 4FA :                            ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
 1092/ 4FA :                            ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
 1093/ 4FA :                            ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
 1094/ 4FA :                            ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
 1095/ 4FA :                            ;
 1096/ 4FA : D7                         GETLN:  RST  2                          ;*** GETLN ***
 1097/ 4FB : 11 9D 13                           LXI  D,BUFFER                   ;PROMPT AND INIT.
 1098/ 4FE : CD 83 06                   GL1:    CALL CHKIO                      ;CHECK KEYBOARD
 1099/ 501 : CA FE 04                           JZ   GL1                        ;NO INPUT, WAIT
 1100/ 504 : FE 7F                              CPI  7FH                        ;DELETE LAST CHARACTER?
 1101/ 506 : CA 23 05                           JZ   GL3                        ;YES
 1102/ 509 : D7                                 RST  2                          ;INPUT, ECHO BACK
 1103/ 50A : FE 0A                              CPI  0AH                        ;IGNORE LF
 1104/ 50C : CA FE 04                           JZ   GL1
 1105/ 50F : B7                                 ORA  A                          ;IGNORE NULL
 1106/ 510 : CA FE 04                           JZ   GL1
 1107/ 513 : FE 7D                              CPI  7DH                        ;DELETE THE WHOLE LINE?
 1108/ 515 : CA 30 05                           JZ   GL4                        ;YES
 1109/ 518 : 12                                 STAX D                          ;ELSE SAVE INPUT
 1110/ 519 : 13                                 INX  D                          ;AND BUMP POINTER
 1111/ 51A : FE 0D                              CPI  0DH                        ;WAS IT CR?
 1112/ 51C : C8                                 RZ                              ;YES, END OF LINE
 1113/ 51D : 7B                                 MOV  A,E                        ;ELSE MORE FREE ROOM?
 1114/ 51E : FE DD                              CPI  BUFEND & 0FFH
 1115/ 520 : C2 FE 04                           JNZ  GL1                        ;YES, GET NEXT INPUT
 1116/ 523 : 7B                         GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
 1117/ 524 : FE 9D                              CPI  BUFFER & 0FFH              ;BUT DO WE HAVE ANY?
 1118/ 526 : CA 30 05                           JZ   GL4                        ;NO, REDO WHOLE LINE
 1119/ 529 : 1B                                 DCX  D                          ;YES, BACKUP POINTER
 1120/ 52A : 3E 5C                              MVI  A,5CH                      ;AND ECHO A BACK-SLASH
 1121/ 52C : D7                                 RST  2
 1122/ 52D : C3 FE 04                           JMP  GL1                        ;GO GET NEXT INPUT
 1123/ 530 : CD 0E 00                   GL4:    CALL CRLF                       ;REDO ENTIRE LINE
 1124/ 533 : 3E 5E                              MVI  A,05EH                     ;CR, LF AND UP-ARROW
 1125/ 535 : C3 FA 04                           JMP  GETLN
 1126/ 538 :                            ;
 1127/ 538 : 7C                         FNDLN:  MOV  A,H                        ;*** FNDLN ***
 1128/ 539 : B7                                 ORA  A                          ;CHECK SIGN OF HL
 1129/ 53A : FA 9F 00                           JM   QHOW                       ;IT CANNOT BE -
 1130/ 53D : 11 17 10                           LXI  D,TXTBGN                   ;INIT TEXT POINTER
 1131/ 540 :                            ;
 1132/ 540 :                            FNDLP:                                  ;*** FDLNP ***
 1133/ 540 : E5                         FL1:    PUSH H                          ;SAVE LINE #
 1134/ 541 : 2A 15 10                           LHLD TXTUNF                     ;CHECK IF WE PASSED END
 1135/ 544 : 2B                                 DCX  H
 1136/ 545 : E7                                 RST  4
 1137/ 546 : E1                                 POP  H                          ;GET LINE # BACK
 1138/ 547 : D8                                 RC                              ;C,NZ PASSED END
 1139/ 548 : 1A                                 LDAX D                          ;WE DID NOT, GET BYTE 1
 1140/ 549 : 95                                 SUB  L                          ;IS THIS THE LINE?
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 20 - 9/26/2024 12:44:33


 1141/ 54A : 47                                 MOV  B,A                        ;COMPARE LOW ORDER
 1142/ 54B : 13                                 INX  D
 1143/ 54C : 1A                                 LDAX D                          ;GET BYTE 2
 1144/ 54D : 9C                                 SBB  H                          ;COMPARE HIGH ORDER
 1145/ 54E : DA 55 05                           JC   FL2                        ;NO, NOT THERE YET
 1146/ 551 : 1B                                 DCX  D                          ;ELSE WE EITHER FOUND
 1147/ 552 : B0                                 ORA  B                          ;IT, OR IT IS NOT THERE
 1148/ 553 : C9                                 RET                             ;NC,Z:FOUND, NC,NZ:NO
 1149/ 554 :                            ;
 1150/ 554 :                            FNDNXT:                                 ;*** FNDNXT ***
 1151/ 554 : 13                                 INX  D                          ;FIND NEXT LINE
 1152/ 555 : 13                         FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
 1153/ 556 :                            ;
 1154/ 556 : 1A                         FNDSKP: LDAX D                          ;*** FNDSKP ***
 1155/ 557 : FE 0D                              CPI  CR                         ;TRY TO FIND CR
 1156/ 559 : C2 55 05                           JNZ  FL2                        ;KEEP LOOKING
 1157/ 55C : 13                                 INX  D                          ;FOUND CR, SKIP OVER
 1158/ 55D : C3 40 05                           JMP  FL1                        ;CHECK IF END OF TEXT
 1159/ 560 :                            ;
 1160/ 560 :                            ;*************************************************************
 1161/ 560 :                            ;
 1162/ 560 :                            ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
 1163/ 560 :                            ;
 1164/ 560 :                            ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
 1165/ 560 :                            ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
 1166/ 560 :                            ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
 1167/ 560 :                            ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
 1168/ 560 :                            ;
 1169/ 560 :                            ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
 1170/ 560 :                            ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
 1171/ 560 :                            ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
 1172/ 560 :                            ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
 1173/ 560 :                            ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
 1174/ 560 :                            ; OVER (USUALLY A JUMP INSTRUCTION.
 1175/ 560 :                            ;
 1176/ 560 :                            ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
 1177/ 560 :                            ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
 1178/ 560 :                            ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
 1179/ 560 :                            ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
 1180/ 560 :                            ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
 1181/ 560 :                            ;
 1182/ 560 :                            ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
 1183/ 560 :                            ;
 1184/ 560 : 47                         PRTSTG: MOV  B,A                        ;*** PRTSTG ***
 1185/ 561 : 1A                         PS1:    LDAX D                          ;GET A CHARACTER
 1186/ 562 : 13                                 INX  D                          ;BUMP POINTER
 1187/ 563 : B8                                 CMP  B                          ;SAME AS OLD A?
 1188/ 564 : C8                                 RZ                              ;YES, RETURN
 1189/ 565 : D7                                 RST  2                          ;ELSE PRINT IT
 1190/ 566 : FE 0D                              CPI  CR                         ;WAS IT A CR?
 1191/ 568 : C2 61 05                           JNZ  PS1                        ;NO, NEXT
 1192/ 56B : C9                                 RET                             ;YES, RETURN
 1193/ 56C :                            ;
 1194/ 56C : CF                         QTSTG:  RST  1                          ;*** QTSTG ***
 1195/ 56D : 22                                 DB   '"'
 1196/ 56E : 0F                                 DB   QT3-$-1
 1197/ 56F : 3E 22                              MVI  A,22H                      ;IT IS A "
 1198/ 571 : CD 60 05                   QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
 1199/ 574 : FE 0D                              CPI  CR                         ;WAS LAST ONE A CR?
 1200/ 576 : E1                                 POP  H                          ;RETURN ADDRESS
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 21 - 9/26/2024 12:44:33


 1201/ 577 : CA 47 01                           JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
 1202/ 57A : 23                         QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
 1203/ 57B : 23                                 INX  H
 1204/ 57C : 23                                 INX  H
 1205/ 57D : E9                                 PCHL                            ;RETURN
 1206/ 57E : CF                         QT3:    RST  1                          ;IS IT A '?
 1207/ 57F : 27                                 DB   27H
 1208/ 580 : 05                                 DB   QT4-$-1
 1209/ 581 : 3E 27                              MVI  A,27H                      ;YES, DO THE SAME
 1210/ 583 : C3 71 05                           JMP  QT1                        ;AS IN "
 1211/ 586 : CF                         QT4:    RST  1                          ;IS IT BACK-ARROW?
 1212/ 587 : 5F                                 DB   5FH
 1213/ 588 : 08                                 DB   QT5-$-1
 1214/ 589 : 3E 8D                              MVI  A,08DH                     ;YES, CR WITHOUT LF
 1215/ 58B : D7                                 RST  2                          ;DO IT TWICE TO GIVE
 1216/ 58C : D7                                 RST  2                          ;TTY ENOUGH TIME
 1217/ 58D : E1                                 POP  H                          ;RETURN ADDRESS
 1218/ 58E : C3 7A 05                           JMP  QT2
 1219/ 591 : C9                         QT5:    RET                             ;NONE OF ABOVE
 1220/ 592 :                            ;
 1221/ 592 : 06 00                      PRTNUM: MVI  B,0                        ;*** PRTNUM ***
 1222/ 594 : CD 83 04                           CALL CHKSGN                     ;CHECK SIGN
 1223/ 597 : F2 9D 05                           JP   PN1                        ;NO SIGN
 1224/ 59A : 06 2D                              MVI  B,'-'                      ;B=SIGN
 1225/ 59C : 0D                                 DCR  C                          ;'-' TAKES SPACE
 1226/ 59D : D5                         PN1:    PUSH D                          ;SAVE
 1227/ 59E : 11 0A 00                           LXI  D,0AH                      ;DECIMAL
 1228/ 5A1 : D5                                 PUSH D                          ;SAVE AS A FLAG
 1229/ 5A2 : 0D                                 DCR  C                          ;C=SPACES
 1230/ 5A3 : C5                                 PUSH B                          ;SAVE SIGN & SPACE
 1231/ 5A4 : CD 66 04                   PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
 1232/ 5A7 : 78                                 MOV  A,B                        ;RESULT 0?
 1233/ 5A8 : B1                                 ORA  C
 1234/ 5A9 : CA B4 05                           JZ   PN3                        ;YES, WE GOT ALL
 1235/ 5AC : E3                                 XTHL                            ;NO, SAVE REMAINDER
 1236/ 5AD : 2D                                 DCR  L                          ;AND COUNT SPACE
 1237/ 5AE : E5                                 PUSH H                          ;HL IS OLD BC
 1238/ 5AF : 60                                 MOV  H,B                        ;MOVE RESULT TO BC
 1239/ 5B0 : 69                                 MOV  L,C
 1240/ 5B1 : C3 A4 05                           JMP  PN2                        ;AND DIVIDE BY 10
 1241/ 5B4 : C1                         PN3:    POP  B                          ;WE GOT ALL DIGITS IN
 1242/ 5B5 : 0D                         PN4:    DCR  C                          ;THE STACK
 1243/ 5B6 : 79                                 MOV  A,C                        ;LOOK AT SPACE COUNT
 1244/ 5B7 : B7                                 ORA  A
 1245/ 5B8 : FA C1 05                           JM   PN5                        ;NO LEADING BLANKS
 1246/ 5BB : 3E 20                              MVI  A,20H                      ;LEADING BLANKS
 1247/ 5BD : D7                                 RST  2
 1248/ 5BE : C3 B5 05                           JMP  PN4                        ;MORE?
 1249/ 5C1 : 78                         PN5:    MOV  A,B                        ;PRINT SIGN
 1250/ 5C2 : B7                                 ORA  A
 1251/ 5C3 : C4 10 00                           CNZ  10H
 1252/ 5C6 : 5D                                 MOV  E,L                        ;LAST REMAINDER IN E
 1253/ 5C7 : 7B                         PN6:    MOV  A,E                        ;CHECK DIGIT IN E
 1254/ 5C8 : FE 0A                              CPI  0AH                        ;10 IS FLAG FOR NO MORE
 1255/ 5CA : D1                                 POP  D
 1256/ 5CB : C8                                 RZ                              ;IF SO, RETURN
 1257/ 5CC : C6 30                              ADI  30H                        ;ELSE CONVERT TO ASCII
 1258/ 5CE : D7                                 RST  2                          ;AND PRINT THE DIGIT
 1259/ 5CF : C3 C7 05                           JMP  PN6                        ;GO BACK FOR MORE
 1260/ 5D2 :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 22 - 9/26/2024 12:44:33


 1261/ 5D2 : 1A                         PRTLN:  LDAX D                          ;*** PRTLN ***
 1262/ 5D3 : 6F                                 MOV  L,A                        ;LOW ORDER LINE #
 1263/ 5D4 : 13                                 INX  D
 1264/ 5D5 : 1A                                 LDAX D                          ;HIGH ORDER
 1265/ 5D6 : 67                                 MOV  H,A
 1266/ 5D7 : 13                                 INX  D
 1267/ 5D8 : 0E 04                              MVI  C,4H                       ;PRINT 4 DIGIT LINE #
 1268/ 5DA : CD 92 05                           CALL PRTNUM
 1269/ 5DD : 3E 20                              MVI  A,20H                      ;FOLLOWED BY A BLANK
 1270/ 5DF : D7                                 RST  2
 1271/ 5E0 : 97                                 SUB  A                          ;AND THEN THE NEXT
 1272/ 5E1 : CD 60 05                           CALL PRTSTG
 1273/ 5E4 : C9                                 RET
 1274/ 5E5 :                            ;
 1275/ 5E5 :                            ;*************************************************************
 1276/ 5E5 :                            ;
 1277/ 5E5 :                            ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
 1278/ 5E5 :                            ;
 1279/ 5E5 :                            ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
 1280/ 5E5 :                            ; DE = HL
 1281/ 5E5 :                            ;
 1282/ 5E5 :                            ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
 1283/ 5E5 :                            ; UNTIL DE = BC
 1284/ 5E5 :                            ;
 1285/ 5E5 :                            ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
 1286/ 5E5 :                            ; STACK
 1287/ 5E5 :                            ;
 1288/ 5E5 :                            ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
 1289/ 5E5 :                            ; STACK
 1290/ 5E5 :                            ;
 1291/ 5E5 : E7                         MVUP:   RST  4                          ;*** MVUP ***
 1292/ 5E6 : C8                                 RZ                              ;DE = HL, RETURN
 1293/ 5E7 : 1A                                 LDAX D                          ;GET ONE BYTE
 1294/ 5E8 : 02                                 STAX B                          ;MOVE IT
 1295/ 5E9 : 13                                 INX  D                          ;INCREASE BOTH POINTERS
 1296/ 5EA : 03                                 INX  B
 1297/ 5EB : C3 E5 05                           JMP  MVUP                       ;UNTIL DONE
 1298/ 5EE :                            ;
 1299/ 5EE : 78                         MVDOWN: MOV  A,B                        ;*** MVDOWN ***
 1300/ 5EF : 92                                 SUB  D                          ;TEST IF DE = BC
 1301/ 5F0 : C2 F6 05                           JNZ  MD1                        ;NO, GO MOVE
 1302/ 5F3 : 79                                 MOV  A,C                        ;MAYBE, OTHER BYTE?
 1303/ 5F4 : 93                                 SUB  E
 1304/ 5F5 : C8                                 RZ                              ;YES, RETURN
 1305/ 5F6 : 1B                         MD1:    DCX  D                          ;ELSE MOVE A BYTE
 1306/ 5F7 : 2B                                 DCX  H                          ;BUT FIRST DECREASE
 1307/ 5F8 : 1A                                 LDAX D                          ;BOTH POINTERS AND
 1308/ 5F9 : 77                                 MOV  M,A                        ;THEN DO IT
 1309/ 5FA : C3 EE 05                           JMP  MVDOWN                     ;LOOP BACK
 1310/ 5FD :                            ;
 1311/ 5FD : C1                         POPA:   POP  B                          ;BC = RETURN ADDR.
 1312/ 5FE : E1                                 POP  H                          ;RESTORE LOPVAR, BUT
 1313/ 5FF : 22 09 10                           SHLD LOPVAR                     ;=0 MEANS NO MORE
 1314/ 602 : 7C                                 MOV  A,H
 1315/ 603 : B5                                 ORA  L
 1316/ 604 : CA 17 06                           JZ   PP1                        ;YEP, GO RETURN
 1317/ 607 : E1                                 POP  H                          ;NOP, RESTORE OTHERS
 1318/ 608 : 22 0B 10                           SHLD LOPINC
 1319/ 60B : E1                                 POP  H
 1320/ 60C : 22 0D 10                           SHLD LOPLMT
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 23 - 9/26/2024 12:44:33


 1321/ 60F : E1                                 POP  H
 1322/ 610 : 22 0F 10                           SHLD LOPLN
 1323/ 613 : E1                                 POP  H
 1324/ 614 : 22 11 10                           SHLD LOPPT
 1325/ 617 : C5                         PP1:    PUSH B                          ;BC = RETURN ADDR.
 1326/ 618 : C9                                 RET
 1327/ 619 :                            ;
 1328/ 619 : 21 DE 13                   PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
 1329/ 61C : CD 86 04                           CALL CHGSGN
 1330/ 61F : C1                                 POP  B                          ;BC=RETURN ADDRESS
 1331/ 620 : 39                                 DAD  SP                         ;IS STACK NEAR THE TOP?
 1332/ 621 : D2 F3 04                           JNC  QSORRY                     ;YES, SORRY FOR THAT
 1333/ 624 : 2A 09 10                           LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
 1334/ 627 : 7C                                 MOV  A,H                        ;BUT IF LOPVAR IS 0
 1335/ 628 : B5                                 ORA  L                          ;THAT WILL BE ALL
 1336/ 629 : CA 3F 06                           JZ   PU1
 1337/ 62C : 2A 11 10                           LHLD LOPPT                      ;ELSE, MORE TO SAVE
 1338/ 62F : E5                                 PUSH H
 1339/ 630 : 2A 0F 10                           LHLD LOPLN
 1340/ 633 : E5                                 PUSH H
 1341/ 634 : 2A 0D 10                           LHLD LOPLMT
 1342/ 637 : E5                                 PUSH H
 1343/ 638 : 2A 0B 10                           LHLD LOPINC
 1344/ 63B : E5                                 PUSH H
 1345/ 63C : 2A 09 10                           LHLD LOPVAR
 1346/ 63F : E5                         PU1:    PUSH H
 1347/ 640 : C5                                 PUSH B                          ;BC = RETURN ADDR.
 1348/ 641 : C9                                 RET
 1349/ 642 :                            ;
 1350/ 642 :                            ;*************************************************************
 1351/ 642 :                            ;
 1352/ 642 :                            ; *** OUTC *** & CHKIO ***
 1353/ 642 :                            ;
 1354/ 642 :                            ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 1355/ 642 :                            ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
 1356/ 642 :                            ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
 1357/ 642 :                            ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
 1358/ 642 :                            ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
 1359/ 642 :                            ; ARE RESTORED.
 1360/ 642 :                            ;
 1361/ 642 :                            ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
 1362/ 642 :                            ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
 1363/ 642 :                            ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
 1364/ 642 :                            ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
 1365/ 642 :                            ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
 1366/ 642 :                            ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
 1367/ 642 :                            ;
 1368/ 642 :                            ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
 1369/ 642 :                            ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
 1370/ 642 :                            ;       ORA  A
 1371/ 642 : 32 00 10                   INIT:   STA  OCSW
 1372/ 645 : 3E CF                              MVI  A,0CFH
 1373/ 647 : D3 FB                              OUT  0FBH
 1374/ 649 : 3E 27                              MVI  A,27H
 1375/ 64B : D3 FB                              OUT  0FBH
 1376/ 64D : 16 19                              MVI  D,19H
 1377/ 64F :                            PATLOP:
 1378/ 64F : CD 0E 00                           CALL CRLF
 1379/ 652 :                                    ;DCR  D
 1380/ 652 : C2 4F 06                           JNZ  PATLOP
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 24 - 9/26/2024 12:44:33


 1381/ 655 : 97                                 SUB  A
 1382/ 656 : 11 A2 06                           LXI  D,MSG1
 1383/ 659 : CD 60 05                           CALL PRTSTG
 1384/ 65C : 21 00 00                           LXI  H,START
 1385/ 65F : 22 13 10                           SHLD RANPNT
 1386/ 662 : 21 17 10                           LXI  H,TXTBGN
 1387/ 665 : 22 15 10                           SHLD TXTUNF
 1388/ 668 : C3 BA 00                           JMP  RSTART
 1389/ 66B : C2 70 06                   OC2:    JNZ  OC3                        ;IT IS ON
 1390/ 66E : F1                                 POP  PSW                        ;IT IS OFF
 1391/ 66F : C9                                 RET                             ;RESTORE AF AND RETURN
 1392/ 670 : DB FB                      OC3:    IN   0FBH                       ;COME HERE TO DO OUTPUT
 1393/ 672 : E6 01                              ANI  1H                         ;STATUS BIT
 1394/ 674 : CA 70 06                           JZ   OC3                        ;NOT READY, WAIT
 1395/ 677 : F1                                 POP  PSW                        ;READY, GET OLD A BACK
 1396/ 678 : D3 FA                              OUT  0FAH                       ;AND SEND IT OUT
 1397/ 67A : FE 0D                              CPI  CR                         ;WAS IT CR?
 1398/ 67C : C0                                 RNZ                             ;NO, FINISHED
 1399/ 67D : 3E 0A                              MVI  A,LF                       ;YES, WE SEND LF TOO
 1400/ 67F : D7                                 RST  2                          ;THIS IS RECURSIVE
 1401/ 680 : 3E 0D                              MVI  A,CR                       ;GET CR BACK IN A
 1402/ 682 : C9                                 RET
 1403/ 683 :                            ;
 1404/ 683 : DB FB                      CHKIO:  IN   0FBH                       ;*** CHKIO ***
 1405/ 685 : 00                                 NOP                             ;STATUS BIT FLIPPED?
 1406/ 686 : E6 02                              ANI  2H                         ;MASK STATUS BIT
 1407/ 688 : C8                                 RZ                              ;NOT READY, RETURN "Z"
 1408/ 689 : DB FA                              IN   0FAH                       ;READY, READ DATA
 1409/ 68B : E6 7F                              ANI  7FH                        ;MASK BIT 7 OFF
 1410/ 68D : FE 0F                              CPI  0FH                        ;IS IT CONTROL-O?
 1411/ 68F : C2 9C 06                           JNZ  CI1                        ;NO, MORE CHECKING
 1412/ 692 : 3A 00 10                           LDA  OCSW                       ;CONTROL-O FLIPS OCSW
 1413/ 695 : 2F                                 CMA                             ;ON TO OFF, OFF TO ON
 1414/ 696 : 32 00 10                           STA  OCSW
 1415/ 699 : C3 83 06                           JMP  CHKIO                      ;GET ANOTHER INPUT
 1416/ 69C : FE 03                      CI1:    CPI  3H                         ;IS IT CONTROL-C?
 1417/ 69E : C0                                 RNZ                             ;NO, RETURN "NZ"
 1418/ 69F : C3 BA 00                           JMP  RSTART                     ;YES, RESTART TBI
 1419/ 6A2 :                            ;
 1420/ 6A2 : 54 49 4E 59 20             MSG1:   DB   "TINY "
 1421/ 6A7 : 42 41 53 49 43                     DB   "BASIC"
 1422/ 6AC : 0D                                 DB   CR
 1423/ 6AD :                            ;
 1424/ 6AD :                            ;*************************************************************
 1425/ 6AD :                            ;
 1426/ 6AD :                            ; *** TABLES *** DIRECT *** & EXEC ***
 1427/ 6AD :                            ;
 1428/ 6AD :                            ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
 1429/ 6AD :                            ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
 1430/ 6AD :                            ; OF CODE ACCORDING TO THE TABLE.
 1431/ 6AD :                            ;
 1432/ 6AD :                            ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
 1433/ 6AD :                            ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
 1434/ 6AD :                            ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
 1435/ 6AD :                            ; ALL DIRECT AND STATEMENT COMMANDS.
 1436/ 6AD :                            ;
 1437/ 6AD :                            ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
 1438/ 6AD :                            ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
 1439/ 6AD :                            ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
 1440/ 6AD :                            ;
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 25 - 9/26/2024 12:44:33


 1441/ 6AD :                            ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
 1442/ 6AD :                            ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
 1443/ 6AD :                            ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
 1444/ 6AD :                            ; BYTE SET TO 1.
 1445/ 6AD :                            ;
 1446/ 6AD :                            ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
 1447/ 6AD :                            ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
 1448/ 6AD :                            ; MATCH THIS NULL ITEM AS DEFAULT.
 1449/ 6AD :                            ;
 1450/ 6AD :                            TAB1:                                   ;DIRECT COMMANDS
 1451/ 6AD : 4C 49 53 54                        DB   "LIST"
 1452/ 6B1 : (MACRO)[0]                         DWA  LIST
 1452/ 6B1 : 81                                 DB   (LIST >> 8) + 128
 1452/ 6B2 : 6F                                 DB   LIST & 0FFH
 1453/ 6B3 : 52 55 4E                           DB   "RUN"
 1454/ 6B6 : (MACRO)[1]                         DWA  RUN
 1454/ 6B6 : 81                                 DB   (RUN >> 8) + 128
 1454/ 6B7 : 41                                 DB   RUN & 0FFH
 1455/ 6B8 : 4E 45 57                           DB   "NEW"
 1456/ 6BB : (MACRO)[2]                         DWA  NEW
 1456/ 6BB : 81                                 DB   (NEW >> 8) + 128
 1456/ 6BC : 32                                 DB   NEW & 0FFH
 1457/ 6BD :                            ;
 1458/ 6BD :                            TAB2:                                   ;DIRECT/STATEMENT
 1459/ 6BD : 4E 45 58 54                        DB   "NEXT"
 1460/ 6C1 : (MACRO)[3]                         DWA  NEXT
 1460/ 6C1 : 82                                 DB   (NEXT >> 8) + 128
 1460/ 6C2 : 57                                 DB   NEXT & 0FFH
 1461/ 6C3 : 4C 45 54                           DB   "LET"
 1462/ 6C6 : (MACRO)[4]                         DWA  LET
 1462/ 6C6 : 83                                 DB   (LET >> 8) + 128
 1462/ 6C7 : 23                                 DB   LET & 0FFH
 1463/ 6C8 : 49 46                              DB   "IF"
 1464/ 6CA : (MACRO)[5]                         DWA  IFF
 1464/ 6CA : 82                                 DB   (IFF >> 8) + 128
 1464/ 6CB : B4                                 DB   IFF & 0FFH
 1465/ 6CC : 47 4F 54 4F                        DB   "GOTO"
 1466/ 6D0 : (MACRO)[6]                         DWA  GOTO
 1466/ 6D0 : 81                                 DB   (GOTO >> 8) + 128
 1466/ 6D1 : 60                                 DB   GOTO & 0FFH
 1467/ 6D2 : 47 4F 53 55 42                     DB   "GOSUB"
 1468/ 6D7 : (MACRO)[7]                         DWA  GOSUB
 1468/ 6D7 : 81                                 DB   (GOSUB >> 8) + 128
 1468/ 6D8 : BF                                 DB   GOSUB & 0FFH
 1469/ 6D9 : 52 45 54 55 52 4E                  DB   "RETURN"
 1470/ 6DF : (MACRO)[8]                         DWA  RETURN
 1470/ 6DF : 81                                 DB   (RETURN >> 8) + 128
 1470/ 6E0 : DF                                 DB   RETURN & 0FFH
 1471/ 6E1 : 52 45 4D                           DB   "REM"
 1472/ 6E4 : (MACRO)[9]                         DWA  REM
 1472/ 6E4 : 82                                 DB   (REM >> 8) + 128
 1472/ 6E5 : B0                                 DB   REM & 0FFH
 1473/ 6E6 : 46 4F 52                           DB   "FOR"
 1474/ 6E9 : (MACRO)[10]                        DWA  FOR
 1474/ 6E9 : 81                                 DB   (FOR >> 8) + 128
 1474/ 6EA : F8                                 DB   FOR & 0FFH
 1475/ 6EB : 49 4E 50 55 54                     DB   "INPUT"
 1476/ 6F0 : (MACRO)[11]                        DWA  INPUT
 1476/ 6F0 : 82                                 DB   (INPUT >> 8) + 128
 1476/ 6F1 : CD                                 DB   INPUT & 0FFH
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 26 - 9/26/2024 12:44:33


 1477/ 6F2 : 50 52 49 4E 54                     DB   "PRINT"
 1478/ 6F7 : (MACRO)[12]                        DWA  PRINT
 1478/ 6F7 : 81                                 DB   (PRINT >> 8) + 128
 1478/ 6F8 : 87                                 DB   PRINT & 0FFH
 1479/ 6F9 : 53 54 4F 50                        DB   "STOP"
 1480/ 6FD : (MACRO)[13]                        DWA  STOP
 1480/ 6FD : 81                                 DB   (STOP >> 8) + 128
 1480/ 6FE : 3B                                 DB   STOP & 0FFH
 1481/ 6FF : (MACRO)[14]                        DWA  DEFLT
 1481/ 6FF : 83                                 DB   (DEFLT >> 8) + 128
 1481/ 700 : 1D                                 DB   DEFLT & 0FFH
 1482/ 701 :                            ;
 1483/ 701 :                            TAB4:                                   ;FUNCTIONS
 1484/ 701 : 52 4E 44                           DB   "RND"
 1485/ 704 : (MACRO)[15]                        DWA  RND
 1485/ 704 : 84                                 DB   (RND >> 8) + 128
 1485/ 705 : 25                                 DB   RND & 0FFH
 1486/ 706 : 41 42 53                           DB   "ABS"
 1487/ 709 : (MACRO)[16]                        DWA  ABS
 1487/ 709 : 84                                 DB   (ABS >> 8) + 128
 1487/ 70A : 50                                 DB   ABS & 0FFH
 1488/ 70B : 53 49 5A 45                        DB   "SIZE"
 1489/ 70F : (MACRO)[17]                        DWA  SIZE
 1489/ 70F : 84                                 DB   (SIZE >> 8) + 128
 1489/ 710 : 59                                 DB   SIZE & 0FFH
 1490/ 711 : (MACRO)[18]                        DWA  XP40
 1490/ 711 : 84                                 DB   (XP40 >> 8) + 128
 1490/ 712 : 0B                                 DB   XP40 & 0FFH
 1491/ 713 :                            ;
 1492/ 713 :                            TAB5:                                   ;"TO" IN "FOR"
 1493/ 713 : 54 4F                              DB   "TO"
 1494/ 715 : (MACRO)[19]                        DWA  FR1
 1494/ 715 : 82                                 DB   (FR1 >> 8) + 128
 1494/ 716 : 08                                 DB   FR1 & 0FFH
 1495/ 717 : (MACRO)[20]                        DWA  QWHAT
 1495/ 717 : 84                                 DB   (QWHAT >> 8) + 128
 1495/ 718 : C6                                 DB   QWHAT & 0FFH
 1496/ 719 :                            ;
 1497/ 719 :                            TAB6:                                   ;"STEP" IN "FOR"
 1498/ 719 : 53 54 45 50                        DB   "STEP"
 1499/ 71D : (MACRO)[21]                        DWA  FR2
 1499/ 71D : 82                                 DB   (FR2 >> 8) + 128
 1499/ 71E : 12                                 DB   FR2 & 0FFH
 1500/ 71F : (MACRO)[22]                        DWA  FR3
 1500/ 71F : 82                                 DB   (FR3 >> 8) + 128
 1500/ 720 : 16                                 DB   FR3 & 0FFH
 1501/ 721 :                            ;
 1502/ 721 :                            TAB8:                                   ;RELATION OPERATORS
 1503/ 721 : 3E 3D                              DB   ">="
 1504/ 723 : (MACRO)[23]                        DWA  XP11
 1504/ 723 : 83                                 DB   (XP11 >> 8) + 128
 1504/ 724 : 33                                 DB   XP11 & 0FFH
 1505/ 725 : 23                                 DB   "#"
 1506/ 726 : (MACRO)[24]                        DWA  XP12
 1506/ 726 : 83                                 DB   (XP12 >> 8) + 128
 1506/ 727 : 39                                 DB   XP12 & 0FFH
 1507/ 728 : 3E                                 DB   ">"
 1508/ 729 : (MACRO)[25]                        DWA  XP13
 1508/ 729 : 83                                 DB   (XP13 >> 8) + 128
 1508/ 72A : 3F                                 DB   XP13 & 0FFH
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 27 - 9/26/2024 12:44:33


 1509/ 72B : 3D                                 DB   "="
 1510/ 72C : (MACRO)[26]                        DWA  XP15
 1510/ 72C : 83                                 DB   (XP15 >> 8) + 128
 1510/ 72D : 4E                                 DB   XP15 & 0FFH
 1511/ 72E : 3C 3D                              DB   "<="
 1512/ 730 : (MACRO)[27]                        DWA  XP14
 1512/ 730 : 83                                 DB   (XP14 >> 8) + 128
 1512/ 731 : 46                                 DB   XP14 & 0FFH
 1513/ 732 : 3C                                 DB   "<"
 1514/ 733 : (MACRO)[28]                        DWA  XP16
 1514/ 733 : 83                                 DB   (XP16 >> 8) + 128
 1514/ 734 : 54                                 DB   XP16 & 0FFH
 1515/ 735 : (MACRO)[29]                        DWA  XP17
 1515/ 735 : 83                                 DB   (XP17 >> 8) + 128
 1515/ 736 : 5A                                 DB   XP17 & 0FFH
 1516/ 737 :                            ;
 1517/ 737 : 21 AC 06                   DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
 1518/ 73A :                            ;
 1519/ 73A :                            EXEC:                                   ;*** EXEC ***
 1520/ 73A : EF                         EX0:    RST  5                          ;IGNORE LEADING BLANKS
 1521/ 73B : D5                                 PUSH D                          ;SAVE POINTER
 1522/ 73C : 1A                         EX1:    LDAX D                          ;IF FOUND '.' IN STRING
 1523/ 73D : 13                                 INX  D                          ;BEFORE ANY MISMATCH
 1524/ 73E : FE 2E                              CPI  2EH                        ;WE DECLARE A MATCH
 1525/ 740 : CA 59 07                           JZ   EX3
 1526/ 743 : 23                                 INX  H                          ;HL->TABLE
 1527/ 744 : BE                                 CMP  M                          ;IF MATCH, TEST NEXT
 1528/ 745 : CA 3C 07                           JZ   EX1
 1529/ 748 : 3E 7F                              MVI  A,07FH                     ;ELSE SEE IF BIT 7
 1530/ 74A : 1B                                 DCX  D                          ;OF TABLE IS SET, WHICH
 1531/ 74B : BE                                 CMP  M                          ;IS THE JUMP ADDR. (HI)
 1532/ 74C : DA 60 07                           JC   EX5                        ;C:YES, MATCHED
 1533/ 74F : 23                         EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
 1534/ 750 : BE                                 CMP  M
 1535/ 751 : D2 4F 07                           JNC  EX2
 1536/ 754 : 23                                 INX  H                          ;BUMP TO NEXT TAB. ITEM
 1537/ 755 : D1                                 POP  D                          ;RESTORE STRING POINTER
 1538/ 756 : C3 3A 07                           JMP  EX0                        ;TEST AGAINST NEXT ITEM
 1539/ 759 : 3E 7F                      EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
 1540/ 75B : 23                         EX4:    INX  H                          ;JUMP ADDR., WHICH IS
 1541/ 75C : BE                                 CMP  M                          ;FLAGGED BY BIT 7
 1542/ 75D : D2 5B 07                           JNC  EX4
 1543/ 760 : 7E                         EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
 1544/ 761 : 23                                 INX  H                          ;ADDRESS FROM THE TABLE
 1545/ 762 : 6E                                 MOV  L,M
 1546/ 763 : E6 7F                              ANI  7FH                        ;MASK OFF BIT 7
 1547/ 765 : 67                                 MOV  H,A
 1548/ 766 : F1                                 POP  PSW                        ;CLEAN UP THE GABAGE
 1549/ 767 : E9                                 PCHL                            ;AND WE GO DO IT
 1550/ 768 :                            ;
 1551/ 768 :                            LSTROM:                                 ;ALL ABOVE CAN BE ROM
 1552/1000 :                                    ORG  1000H                      ;HERE DOWN MUST BE RAM
 1553/1000 :                            OCSW:   DS   1                          ;SWITCH FOR OUTPUT
 1554/1001 :                            CURRNT: DS   2                          ;POINTS TO CURRENT LINE
 1555/1003 :                            STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
 1556/1005 :                            VARNXT: DS   2                          ;TEMP STORAGE
 1557/1007 :                            STKINP: DS   2                          ;SAVES SP IN 'INPUT'
 1558/1009 :                            LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
 1559/100B :                            LOPINC: DS   2                          ;INCREMENT
 1560/100D :                            LOPLMT: DS   2                          ;LIMIT
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 28 - 9/26/2024 12:44:33


 1561/100F :                            LOPLN:  DS   2                          ;LINE NUMBER
 1562/1011 :                            LOPPT:  DS   2                          ;TEXT POINTER
 1563/1013 :                            RANPNT: DS   2                          ;RANDOM NUMBER POINTER
 1564/1015 :                            TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
 1565/1017 :                            TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
 1566/1366 :                                    ORG  1366H
> > > tinybasic-2-rs.asm(1567): warning: no memory reserved, are you sure you wanted that?
 1567/1366 :                            TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
 1568/1366 :                            VARBGN: DS   55                         ;VARIABLE @(0)
 1569/139D :                            BUFFER: DS   64                         ;INPUT BUFFER
 1570/13DD :                            BUFEND: DS   1                          ;BUFFER ENDS
 1571/13DE :                            STKLMT: DS   1                          ;TOP LIMIT FOR STACK
 1572/1400 :                                    ORG  1400H
> > > tinybasic-2-rs.asm(1573): warning: no memory reserved, are you sure you wanted that?
 1573/1400 :                            STACK:  DS   0                          ;STACK STARTS HERE
 1574/1400 :                            ;
 1575/1400 : =0DH                       CR      EQU  0DH
 1576/1400 : =0AH                       LF      EQU  0AH
 1577/1400 :                            
 1578/1400 :                                    END
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 29 - 9/26/2024 12:44:33


  Symbol Table (* = unused):
  --------------------------

 ABS :                          450 C |  AHOW :                         0A0 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ASORRY :                       4F4 C |  AWHAT :                        4C7 C |
 BUFEND :                      13DD C |  BUFFER :                      139D C |
*CASESENSITIVE :                  0 - |  CHGSGN :                       486 C |
 CHKIO :                        683 C |  CHKSGN :                       483 C |
 CI1 :                          69C C |  CK1 :                          49E C |
 CKHLDE :                       498 C | *CONSTPI :        3.141592653589793 - |
 CR :                            0D - |  CRLF :                          0E C |
 CURRNT :                      1001 C | *DATE :                 "9/26/2024" - |
 DEFLT :                        31D C |  DIRECT :                       737 C |
 DIVIDE :                       466 C |  DV1 :                          471 C |
 DV2 :                          473 C |  ENDCHK :                       4C2 C |
 ERROR :                        4CA C |  EX0 :                          73A C |
 EX1 :                          73C C |  EX2 :                          74F C |
 EX3 :                          759 C |  EX4 :                          75B C |
 EX5 :                          760 C |  EXEC :                         73A C |
 EXPR1 :                        32D C |  EXPR2 :                        371 C |
 EXPR3 :                        3A5 C |  EXPR4 :                        405 C |
*FALSE :                          0 - |  FI1 :                          4BA C |
 FI2 :                          4C1 C |  FIN :                          4B3 C |
 FL1 :                          540 C |  FL2 :                          555 C |
*FLOATMAX :      1.797693134866E308 - |  FNDLN :                        538 C |
 FNDLP :                        540 C |  FNDNXT :                       554 C |
 FNDSKP :                       556 C |  FOR :                          1F8 C |
 FR1 :                          208 C |  FR2 :                          212 C |
 FR3 :                          216 C |  FR4 :                          219 C |
*FR5 :                          21C C |  FR7 :                          231 C |
 FR8 :                          252 C |  GETLN :                        4FA C |
 GL1 :                          4FE C |  GL3 :                          523 C |
 GL4 :                          530 C |  GOSUB :                        1BF C |
 GOTO :                         160 C | *HAS64 :                          1 - |
 HOW :                          0A6 C |  IFF :                          2B4 C |
 INIT :                         642 C |  INPERR :                       2C3 C |
 INPUT :                        2CD C |  IP1 :                          2CD C |
 IP2 :                          2DB C |  IP3 :                          2EB C |
 IP4 :                          315 C |  IP5 :                          31C C |
 LET :                          323 C |  LF :                            0A - |
 LIST :                         16F C | *LISTON :                         1 - |
 LOPINC :                      100B C |  LOPLMT :                      100D C |
 LOPLN :                       100F C |  LOPPT :                       1011 C |
 LOPVAR :                      1009 C |  LS1 :                          178 C |
 LSTROM :                       768 C |  LT1 :                          32C C |
*MACEXP :                         7 - |  MD1 :                          5F6 C |
*MOMCPU :                      8085 - | *MOMCPUNAME :                "8085" - |
 MSG1 :                         6A2 C |  MVDOWN :                       5EE C |
 MVUP :                         5E5 C | *NESTMAX :                      100 - |
 NEW :                          132 C |  NEXT :                         257 C |
 NX0 :                          25E C |  NX1 :                          298 C |
 NX2 :                          2AC C |  NX3 :                          276 C |
 NX4 :                          288 C |  NX5 :                          2AA C |
 OC2 :                          66B C |  OC3 :                          670 C |
 OCSW :                        1000 C |  OK :                           0AB C |
 PARN :                         41A C |  PATLOP :                       64F C |
 PN1 :                          59D C |  PN2 :                          5A4 C |
 PN3 :                          5B4 C |  PN4 :                          5B5 C |
 PN5 :                          5C1 C |  PN6 :                          5C7 C |
 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 30 - 9/26/2024 12:44:33


 POPA :                         5FD C |  PP1 :                          617 C |
 PR0 :                          19B C |  PR1 :                          1A3 C |
 PR2 :                          192 C |  PR3 :                          1A9 C |
 PR6 :                          1B2 C |  PR8 :                          1B6 C |
 PRINT :                        187 C |  PRTLN :                        5D2 C |
 PRTNUM :                       592 C |  PRTSTG :                       560 C |
 PS1 :                          561 C |  PU1 :                          63F C |
 PUSHA :                        619 C |  QHOW :                          9F C |
 QSORRY :                       4F3 C |  QT1 :                          571 C |
 QT2 :                          57A C |  QT3 :                          57E C |
 QT4 :                          586 C |  QT5 :                          591 C |
 QTSTG :                        56C C |  QWHAT :                        4C6 C |
 RA1 :                          440 C |  RANPNT :                      1013 C |
*RELAXED :                        0 - |  REM :                          2B0 C |
 RETURN :                       1DF C |  RND :                          425 C |
 RSTART :                       0BA C |  RUN :                          141 C |
 RUNNXL :                       147 C |  RUNSML :                       157 C |
 RUNTSL :                       150 C |  SETVAL :                       4A0 C |
 SIZE :                         459 C |  SORRY :                        0B4 C |
 SS1 :                           28 C | *ST1 :                          0BD C |
 ST2 :                          0CD C |  ST3 :                          0D6 C |
 ST4 :                          10B C |  STACK :                       1400 C |
 START :                          0 C |  STKGOS :                      1003 C |
 STKINP :                      1007 C |  STKLMT :                      13DE C |
 STOP :                         13B C |  SUBDE :                        47C C |
 SV1 :                          4B0 C |  TAB1 :                         6AD C |
 TAB2 :                         6BD C |  TAB4 :                         701 C |
 TAB5 :                         713 C |  TAB6 :                         719 C |
 TAB8 :                         721 C |  TC1 :                           68 C |
 TC2 :                           73 C | *TIME :                  "12:44:33" - |
 TN1 :                           7C C | *TRUE :                           1 - |
 TSTNUM :                        77 C |  TV1 :                           58 C |
 TXTBGN :                      1017 C |  TXTEND :                      1366 C |
 TXTUNF :                      1015 C |  VARBGN :                      1366 C |
 VARNXT :                      1005 C | *VERSION :                     142F - |
 WHAT :                         0AE C |  XP11 :                         333 C |
 XP12 :                         339 C |  XP13 :                         33F C |
 XP14 :                         346 C |  XP15 :                         34E C |
 XP16 :                         354 C |  XP17 :                         35A C |
 XP18 :                         35C C |  XP21 :                         37A C |
 XP22 :                         37D C |  XP23 :                         380 C |
 XP24 :                         387 C |  XP25 :                         398 C |
 XP26 :                         39B C |  XP31 :                         3A8 C |
 XP32 :                         3C5 C |  XP33 :                         3CD C |
 XP34 :                         3D8 C |  XP35 :                         3F7 C |
 XP40 :                         40B C |  XP41 :                         414 C |
 XP42 :                         421 C |  XP43 :                         422 C |
*Z80SYNTAX :                      0 - |

    208 symbols
     19 unused symbols

 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 31 - 9/26/2024 12:44:33


  Defined Macros:
  ---------------

DWA                                   |

      1 macro

 AS V1.42 Beta [Bld 276] - Source File tinybasic-2-rs.asm - Page 32 - 9/26/2024 12:44:33


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.07 seconds assembly time

   1579 lines source file
   1639 lines incl. macro expansions
      2 passes
      0 errors
      2 warnings
